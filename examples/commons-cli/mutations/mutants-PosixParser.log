1:EVR:<NEW_CLASS(java.util.ArrayList<java.lang.String>)>:<DEFAULT>:org.apache.commons.cli.PosixParser:35:new ArrayList<String>() |==> null
2:LVR:FALSE:TRUE:org.apache.commons.cli.PosixParser@init():53:false |==> true
3:STD:<ASSIGN>:<NO-OP>:org.apache.commons.cli.PosixParser@init():53:eatTheRest = false |==> <NO-OP>
4:STD:<CALL>:<NO-OP>:org.apache.commons.cli.PosixParser@init():54:tokens.clear() |==> <NO-OP>
5:STD:<CALL>:<NO-OP>:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):97:init() |==> <NO-OP>
6:STD:<ASSIGN>:<NO-OP>:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):98:this.options = options |==> <NO-OP>
7:EVR:<METHOD_INVOCATION(java.util.Iterator<java.lang.String>)>:<DEFAULT>:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):101:Arrays.asList(arguments).iterator() |==> null
8:EVR:<METHOD_INVOCATION(java.lang.String)>:<DEFAULT>:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):107:iter.next() |==> null
9:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):110:"-".equals(token) || "--".equals(token) |==> "-".equals(token) != "--".equals(token)
10:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):110:"-".equals(token) || "--".equals(token) |==> "-".equals(token)
11:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):110:"-".equals(token) || "--".equals(token) |==> "--".equals(token)
12:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):110:"-".equals(token) || "--".equals(token) |==> true
13:STD:<CALL>:<NO-OP>:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):112:tokens.add(token) |==> <NO-OP>
14:COR:token.startsWith("--"):TRUE:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):116:token.startsWith("--") |==> false
15:COR:token.startsWith("--"):FALSE:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):116:token.startsWith("--") |==> true
16:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):118:token.indexOf('=') |==> 0
17:LVR:NEG:0:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):119:-1 |==> 0
18:LVR:NEG:POS:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):119:-1 |==> 1
19:ROR:==(int,int):<=(int,int):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):119:pos == -1 |==> pos <= -1
20:ROR:==(int,int):>=(int,int):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):119:pos == -1 |==> pos >= -1
21:ROR:==(int,int):FALSE(int,int):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):119:pos == -1 |==> false
22:LVR:0:POS:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):119:0 |==> 1
23:LVR:0:NEG:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):119:0 |==> -1
24:EVR:<METHOD_INVOCATION(java.util.List<java.lang.String>)>:<DEFAULT>:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):121:options.getMatchingOptions(opt) |==> null
25:COR:matchingOpts.isEmpty():TRUE:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):123:matchingOpts.isEmpty() |==> false
26:COR:matchingOpts.isEmpty():FALSE:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):123:matchingOpts.isEmpty() |==> true
27:STD:<CALL>:<NO-OP>:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):125:processNonOptionToken(token, stopAtNonOption) |==> <NO-OP>
28:LVR:POS:0:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):127:1 |==> 0
29:LVR:POS:NEG:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):127:1 |==> -1
30:ROR:>(int,int):!=(int,int):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):127:matchingOpts.size() > 1 |==> matchingOpts.size() != 1
31:ROR:>(int,int):>=(int,int):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):127:matchingOpts.size() > 1 |==> matchingOpts.size() >= 1
32:ROR:>(int,int):FALSE(int,int):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):127:matchingOpts.size() > 1 |==> false
33:LVR:0:POS:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):133:0 |==> 1
34:LVR:0:NEG:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):133:0 |==> -1
35:STD:<ASSIGN>:<NO-OP>:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):133:currentOption = options.getOption(matchingOpts.get(0)) |==> <NO-OP>
36:STD:<CALL>:<NO-OP>:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):135:tokens.add("--" + currentOption.getLongOpt()) |==> <NO-OP>
37:LVR:NEG:0:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):136:-1 |==> 0
38:LVR:NEG:POS:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):136:-1 |==> 1
39:ROR:!=(int,int):<(int,int):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):136:pos != -1 |==> pos < -1
40:ROR:!=(int,int):>(int,int):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):136:pos != -1 |==> pos > -1
41:ROR:!=(int,int):TRUE(int,int):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):136:pos != -1 |==> true
42:LVR:POS:0:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):138:1 |==> 0
43:LVR:POS:NEG:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):138:1 |==> -1
44:AOR:+(int,int):%(int,int):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):138:pos + 1 |==> pos % 1
45:AOR:+(int,int):*(int,int):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):138:pos + 1 |==> pos * 1
46:AOR:+(int,int):-(int,int):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):138:pos + 1 |==> pos - 1
47:AOR:+(int,int):/(int,int):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):138:pos + 1 |==> pos / 1
48:STD:<CALL>:<NO-OP>:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):138:tokens.add(token.substring(pos + 1)) |==> <NO-OP>
49:COR:token.startsWith("-"):TRUE:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):143:token.startsWith("-") |==> false
50:COR:token.startsWith("-"):FALSE:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):143:token.startsWith("-") |==> true
51:LVR:POS:0:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):145:2 |==> 0
52:LVR:POS:NEG:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):145:2 |==> -2
53:ROR:==(int,int):<=(int,int):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):145:token.length() == 2 |==> token.length() <= 2
54:ROR:==(int,int):>=(int,int):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):145:token.length() == 2 |==> token.length() >= 2
55:ROR:==(int,int):FALSE(int,int):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):145:token.length() == 2 |==> false
56:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):145:token.length() == 2 || options.hasOption(token) |==> token.length() == 2 != options.hasOption(token)
57:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):145:token.length() == 2 || options.hasOption(token) |==> token.length() == 2
58:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):145:token.length() == 2 || options.hasOption(token) |==> options.hasOption(token)
59:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):145:token.length() == 2 || options.hasOption(token) |==> true
60:STD:<CALL>:<NO-OP>:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):147:processOptionToken(token, stopAtNonOption) |==> <NO-OP>
61:COR:options.getMatchingOptions(token).isEmpty():TRUE:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):149:options.getMatchingOptions(token).isEmpty() |==> false
62:COR:options.getMatchingOptions(token).isEmpty():FALSE:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):149:options.getMatchingOptions(token).isEmpty() |==> true
63:EVR:<METHOD_INVOCATION(java.util.List<java.lang.String>)>:<DEFAULT>:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):151:options.getMatchingOptions(token) |==> null
64:LVR:POS:0:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):152:1 |==> 0
65:LVR:POS:NEG:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):152:1 |==> -1
66:ROR:>(int,int):!=(int,int):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):152:matchingOpts.size() > 1 |==> matchingOpts.size() != 1
67:ROR:>(int,int):>=(int,int):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):152:matchingOpts.size() > 1 |==> matchingOpts.size() >= 1
68:ROR:>(int,int):FALSE(int,int):org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):152:matchingOpts.size() > 1 |==> false
69:LVR:0:POS:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):156:0 |==> 1
70:LVR:0:NEG:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):156:0 |==> -1
71:STD:<CALL>:<NO-OP>:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):157:processOptionToken("-" + opt.getLongOpt(), stopAtNonOption) |==> <NO-OP>
72:STD:<CALL>:<NO-OP>:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):162:burstToken(token, stopAtNonOption) |==> <NO-OP>
73:STD:<CALL>:<NO-OP>:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):167:processNonOptionToken(token, stopAtNonOption) |==> <NO-OP>
74:STD:<CALL>:<NO-OP>:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):170:gobble(iter) |==> <NO-OP>
75:EVR:<METHOD_INVOCATION(java.lang.String[])>:<DEFAULT>:org.apache.commons.cli.PosixParser@flatten(org.apache.commons.cli.Options,java.lang.String[],boolean):173:tokens.toArray(new String[tokens.size()]) |==> null
76:COR:eatTheRest:TRUE:org.apache.commons.cli.PosixParser@gobble(java.util.Iterator<java.lang.String>):183:eatTheRest |==> false
77:COR:eatTheRest:FALSE:org.apache.commons.cli.PosixParser@gobble(java.util.Iterator<java.lang.String>):183:eatTheRest |==> true
78:STD:<CALL>:<NO-OP>:org.apache.commons.cli.PosixParser@gobble(java.util.Iterator<java.lang.String>):187:tokens.add(iter.next()) |==> <NO-OP>
79:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.cli.PosixParser@processNonOptionToken(java.lang.String,boolean):201:currentOption == null |==> false
80:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.cli.PosixParser@processNonOptionToken(java.lang.String,boolean):201:currentOption == null || !currentOption.hasArg() |==> currentOption == null != !currentOption.hasArg()
81:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.cli.PosixParser@processNonOptionToken(java.lang.String,boolean):201:currentOption == null || !currentOption.hasArg() |==> currentOption == null
82:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.cli.PosixParser@processNonOptionToken(java.lang.String,boolean):201:currentOption == null || !currentOption.hasArg() |==> !currentOption.hasArg()
83:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.cli.PosixParser@processNonOptionToken(java.lang.String,boolean):201:currentOption == null || !currentOption.hasArg() |==> true
84:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.cli.PosixParser@processNonOptionToken(java.lang.String,boolean):201:stopAtNonOption && (currentOption == null || !currentOption.hasArg()) |==> stopAtNonOption == (currentOption == null || !currentOption.hasArg())
85:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.cli.PosixParser@processNonOptionToken(java.lang.String,boolean):201:stopAtNonOption && (currentOption == null || !currentOption.hasArg()) |==> false
86:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.cli.PosixParser@processNonOptionToken(java.lang.String,boolean):201:stopAtNonOption && (currentOption == null || !currentOption.hasArg()) |==> stopAtNonOption
87:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.cli.PosixParser@processNonOptionToken(java.lang.String,boolean):201:stopAtNonOption && (currentOption == null || !currentOption.hasArg()) |==> (currentOption == null || !currentOption.hasArg())
88:LVR:TRUE:FALSE:org.apache.commons.cli.PosixParser@processNonOptionToken(java.lang.String,boolean):203:true |==> false
89:STD:<ASSIGN>:<NO-OP>:org.apache.commons.cli.PosixParser@processNonOptionToken(java.lang.String,boolean):203:eatTheRest = true |==> <NO-OP>
90:STD:<CALL>:<NO-OP>:org.apache.commons.cli.PosixParser@processNonOptionToken(java.lang.String,boolean):204:tokens.add("--") |==> <NO-OP>
91:STD:<CALL>:<NO-OP>:org.apache.commons.cli.PosixParser@processNonOptionToken(java.lang.String,boolean):207:tokens.add(value) |==> <NO-OP>
92:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.cli.PosixParser@processOptionToken(java.lang.String,boolean):224:stopAtNonOption && !options.hasOption(token) |==> stopAtNonOption == !options.hasOption(token)
93:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.cli.PosixParser@processOptionToken(java.lang.String,boolean):224:stopAtNonOption && !options.hasOption(token) |==> false
94:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.cli.PosixParser@processOptionToken(java.lang.String,boolean):224:stopAtNonOption && !options.hasOption(token) |==> stopAtNonOption
95:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.cli.PosixParser@processOptionToken(java.lang.String,boolean):224:stopAtNonOption && !options.hasOption(token) |==> !options.hasOption(token)
96:LVR:TRUE:FALSE:org.apache.commons.cli.PosixParser@processOptionToken(java.lang.String,boolean):226:true |==> false
97:STD:<ASSIGN>:<NO-OP>:org.apache.commons.cli.PosixParser@processOptionToken(java.lang.String,boolean):226:eatTheRest = true |==> <NO-OP>
98:COR:options.hasOption(token):TRUE:org.apache.commons.cli.PosixParser@processOptionToken(java.lang.String,boolean):229:options.hasOption(token) |==> false
99:COR:options.hasOption(token):FALSE:org.apache.commons.cli.PosixParser@processOptionToken(java.lang.String,boolean):229:options.hasOption(token) |==> true
100:STD:<ASSIGN>:<NO-OP>:org.apache.commons.cli.PosixParser@processOptionToken(java.lang.String,boolean):231:currentOption = options.getOption(token) |==> <NO-OP>
101:STD:<CALL>:<NO-OP>:org.apache.commons.cli.PosixParser@processOptionToken(java.lang.String,boolean):234:tokens.add(token) |==> <NO-OP>
102:LVR:POS:0:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):265:1 |==> 0
103:LVR:POS:NEG:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):265:1 |==> -1
104:ROR:<(int,int):!=(int,int):org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):265:i < token.length() |==> i != token.length()
105:ROR:<(int,int):<=(int,int):org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):265:i < token.length() |==> i <= token.length()
106:ROR:<(int,int):FALSE(int,int):org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):265:i < token.length() |==> false
107:EVR:<METHOD_INVOCATION(java.lang.String)>:<DEFAULT>:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):267:String.valueOf(token.charAt(i)) |==> null
108:COR:options.hasOption(ch):TRUE:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):269:options.hasOption(ch) |==> false
109:COR:options.hasOption(ch):FALSE:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):269:options.hasOption(ch) |==> true
110:STD:<CALL>:<NO-OP>:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):271:tokens.add("-" + ch) |==> <NO-OP>
111:STD:<ASSIGN>:<NO-OP>:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):272:currentOption = options.getOption(ch) |==> <NO-OP>
112:LVR:POS:0:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):274:1 |==> 0
113:LVR:POS:NEG:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):274:1 |==> -1
114:AOR:+(int,int):%(int,int):org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):274:i + 1 |==> i % 1
115:AOR:+(int,int):*(int,int):org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):274:i + 1 |==> i * 1
116:AOR:+(int,int):-(int,int):org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):274:i + 1 |==> i - 1
117:AOR:+(int,int):/(int,int):org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):274:i + 1 |==> i / 1
118:ROR:!=(int,int):<(int,int):org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):274:token.length() != i + 1 |==> token.length() < i + 1
119:ROR:!=(int,int):>(int,int):org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):274:token.length() != i + 1 |==> token.length() > i + 1
120:ROR:!=(int,int):TRUE(int,int):org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):274:token.length() != i + 1 |==> true
121:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):274:currentOption.hasArg() && token.length() != i + 1 |==> currentOption.hasArg() == (token.length() != i + 1)
122:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):274:currentOption.hasArg() && token.length() != i + 1 |==> false
123:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):274:currentOption.hasArg() && token.length() != i + 1 |==> currentOption.hasArg()
124:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):274:currentOption.hasArg() && token.length() != i + 1 |==> token.length() != i + 1
125:LVR:POS:0:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):276:1 |==> 0
126:LVR:POS:NEG:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):276:1 |==> -1
127:AOR:+(int,int):%(int,int):org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):276:i + 1 |==> i % 1
128:AOR:+(int,int):*(int,int):org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):276:i + 1 |==> i * 1
129:AOR:+(int,int):-(int,int):org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):276:i + 1 |==> i - 1
130:AOR:+(int,int):/(int,int):org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):276:i + 1 |==> i / 1
131:STD:<CALL>:<NO-OP>:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):276:tokens.add(token.substring(i + 1)) |==> <NO-OP>
132:STD:<BREAK>:<NO-OP>:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):278:break; |==> <NO-OP>
133:COR:stopAtNonOption:TRUE:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):281:stopAtNonOption |==> false
134:COR:stopAtNonOption:FALSE:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):281:stopAtNonOption |==> true
135:LVR:TRUE:FALSE:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):283:true |==> false
136:STD:<CALL>:<NO-OP>:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):283:processNonOptionToken(token.substring(i), true) |==> <NO-OP>
137:STD:<BREAK>:<NO-OP>:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):284:break; |==> <NO-OP>
138:STD:<CALL>:<NO-OP>:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):288:tokens.add(token) |==> <NO-OP>
139:STD:<BREAK>:<NO-OP>:org.apache.commons.cli.PosixParser@burstToken(java.lang.String,boolean):289:break; |==> <NO-OP>
