digraph GnuParser_CFG {
  // graph-vertices
  v1  [label="50:  String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption)"];
  v2  [label="52:  final List<String> tokens = new ArrayList<String>()"];
  v3  [label="54:  boolean eatTheRest = false"];
  v4  [label="56:  int i = 0"];
  v5  [label="56:  for (i < arguments.length)"];
  v6  [label="56:  i++"];
  v7  [label="endfor"];
  v8  [label="58:  final String arg = arguments[i]"];
  v9  [label="60:  if ('--'.equals(arg))"];
  v10  [label="62:  eatTheRest = true"];
  v11  [label="63:  tokens.add('--')"];
  v12  [label="endif"];
  v13  [label="65:  if ('-'.equals(arg))"];
  v14  [label="67:  tokens.add('-')"];
  v15  [label="endif"];
  v16  [label="69:  if (arg.startsWith('-'))"];
  v17  [label="71:  final String opt = Util.stripLeadingHyphens(arg)"];
  v18  [label="73:  if (options.hasOption(opt))"];
  v19  [label="75:  tokens.add(arg)"];
  v20  [label="endif"];
  v21  [label="79:  if (opt.indexOf('=') != -1 && options.hasOption(opt.substring(0, opt.indexOf('='))))"];
  v22  [label="82:  tokens.add(arg.substring(0, arg.indexOf('=')))"];
  v23  [label="83:  tokens.add(arg.substring(arg.indexOf('=') + 1))"];
  v24  [label="endif"];
  v25  [label="85:  if (options.hasOption(arg.substring(0, 2)))"];
  v26  [label="88:  tokens.add(arg.substring(0, 2))"];
  v27  [label="89:  tokens.add(arg.substring(2))"];
  v28  [label="endif"];
  v29  [label="93:  eatTheRest = stopAtNonOption"];
  v30  [label="94:  tokens.add(arg)"];
  v31  [label="endif"];
  v32  [label="100:  tokens.add(arg)"];
  v33  [label="103:  if (eatTheRest)"];
  v34  [label="105:  i++"];
  v35  [label="105:  for (i < arguments.length)"];
  v36  [label="105:  i++"];
  v37  [label="endfor"];
  v38  [label="107:  tokens.add(arguments[i])"];
  v39  [label="endif"];
  v40  [label="112:  return tokens.toArray(new String[tokens.size()]);"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4;
  v4 -> v5;
  v5 -> v7  [label="False"];
  v5 -> v8  [label="True"];
  v8 -> v9;
  v9 -> v10  [label="True"];
  v10 -> v11;
  v11 -> v12;
  v9 -> v13  [label="False"];
  v13 -> v14  [label="True"];
  v14 -> v15;
  v13 -> v16  [label="False"];
  v16 -> v17  [label="True"];
  v17 -> v18;
  v18 -> v19  [label="True"];
  v19 -> v20;
  v18 -> v21  [label="False"];
  v21 -> v22  [label="True"];
  v22 -> v23;
  v23 -> v24;
  v21 -> v25  [label="False"];
  v25 -> v26  [label="True"];
  v26 -> v27;
  v27 -> v28;
  v25 -> v29  [label="False"];
  v29 -> v30;
  v30 -> v28;
  v28 -> v24;
  v24 -> v20;
  v20 -> v31;
  v16 -> v32  [label="False"];
  v32 -> v31;
  v31 -> v15;
  v15 -> v12;
  v12 -> v33;
  v33 -> v34  [label="True"];
  v34 -> v35;
  v35 -> v37  [label="False"];
  v35 -> v38  [label="True"];
  v38 -> v36;
  v36 -> v35;
  v37 -> v39;
  v33 -> v39  [label="False"];
  v39 -> v6;
  v6 -> v5;
  v7 -> v40;
  // end-of-graph
}
