digraph Options_CFG {
  // graph-vertices
  v1  [label="66:  Options addOptionGroup(final OptionGroup group)"];
  v2  [label="68:  if (group.isRequired())"];
  v3  [label="70:  requiredOpts.add(group)"];
  v4  [label="endif"];
  v5  [label="73:  for (final Option option : group.getOptions())"];
  v6  [label="endfor"];
  v7  [label="78:  option.setRequired(false)"];
  v8  [label="79:  addOption(option)"];
  v9  [label="81:  optionGroups.put(option.getKey(), group)"];
  v10  [label="84:  return this;"];
  v11  [label="92:  Collection<OptionGroup> getOptionGroups()"];
  v12  [label="94:  return new HashSet<OptionGroup>(optionGroups.values());"];
  v13  [label="109:  Options addOption(final String opt, final String description)"];
  v14  [label="111:  addOption(opt, null, false, description)"];
  v15  [label="112:  return this;"];
  v16  [label="127:  Options addOption(final String opt, final boolean hasArg, final String description)"];
  v17  [label="129:  addOption(opt, null, hasArg, description)"];
  v18  [label="130:  return this;"];
  v19  [label="146:  Options addOption(final String opt, final String longOpt, final boolean hasArg, final String description)"];
  v20  [label="148:  addOption(new Option(opt, longOpt, hasArg, description))"];
  v21  [label="149:  return this;"];
  v22  [label="174:  Options addRequiredOption(final String opt, final String longOpt, final boolean hasArg, final String description)"];
  v23  [label="176:  final Option option = new Option(opt, longOpt, hasArg, description)"];
  v24  [label="177:  option.setRequired(true)"];
  v25  [label="178:  addOption(option)"];
  v26  [label="179:  return this;"];
  v27  [label="188:  Options addOption(final Option opt)"];
  v28  [label="190:  final String key = opt.getKey()"];
  v29  [label="193:  if (opt.hasLongOpt())"];
  v30  [label="195:  longOpts.put(opt.getLongOpt(), opt)"];
  v31  [label="endif"];
  v32  [label="199:  if (opt.isRequired())"];
  v33  [label="201:  if (requiredOpts.contains(key))"];
  v34  [label="203:  requiredOpts.remove(requiredOpts.indexOf(key))"];
  v35  [label="endif"];
  v36  [label="205:  requiredOpts.add(key)"];
  v37  [label="endif"];
  v38  [label="208:  shortOpts.put(key, opt)"];
  v39  [label="210:  return this;"];
  v40  [label="218:  Collection<Option> getOptions()"];
  v41  [label="220:  return Collections.unmodifiableCollection(helpOptions());"];
  v42  [label="228:  List<Option> helpOptions()"];
  v43  [label="230:  return new ArrayList<Option>(shortOpts.values());"];
  v44  [label="238:  List getRequiredOptions()"];
  v45  [label="240:  return Collections.unmodifiableList(requiredOpts);"];
  v46  [label="253:  Option getOption(String opt)"];
  v47  [label="255:  opt = Util.stripLeadingHyphens(opt)"];
  v48  [label="257:  if (shortOpts.containsKey(opt))"];
  v49  [label="259:  return shortOpts.get(opt);"];
  v50  [label="endif"];
  v51  [label="262:  return longOpts.get(opt);"];
  v52  [label="272:  List<String> getMatchingOptions(String opt)"];
  v53  [label="274:  opt = Util.stripLeadingHyphens(opt)"];
  v54  [label="276:  final List<String> matchingOpts = new ArrayList<String>()"];
  v55  [label="279:  if (longOpts.keySet().contains(opt))"];
  v56  [label="281:  return Collections.singletonList(opt);"];
  v57  [label="endif"];
  v58  [label="284:  for (final String longOpt : longOpts.keySet())"];
  v59  [label="endfor"];
  v60  [label="286:  if (longOpt.startsWith(opt))"];
  v61  [label="288:  matchingOpts.add(longOpt)"];
  v62  [label="endif"];
  v63  [label="292:  return matchingOpts;"];
  v64  [label="301:  boolean hasOption(String opt)"];
  v65  [label="303:  opt = Util.stripLeadingHyphens(opt)"];
  v66  [label="305:  return shortOpts.containsKey(opt) || longOpts.containsKey(opt);"];
  v67  [label="315:  boolean hasLongOption(String opt)"];
  v68  [label="317:  opt = Util.stripLeadingHyphens(opt)"];
  v69  [label="319:  return longOpts.containsKey(opt);"];
  v70  [label="329:  boolean hasShortOption(String opt)"];
  v71  [label="331:  opt = Util.stripLeadingHyphens(opt)"];
  v72  [label="333:  return shortOpts.containsKey(opt);"];
  v73  [label="342:  OptionGroup getOptionGroup(final Option opt)"];
  v74  [label="344:  return optionGroups.get(opt.getKey());"];
  v75  [label="353:  String toString()"];
  v76  [label="355:  final StringBuilder buf = new StringBuilder()"];
  v77  [label="357:  buf.append('[ Options: [ short ')"];
  v78  [label="358:  buf.append(shortOpts.toString())"];
  v79  [label="359:  buf.append(' ] [ long ')"];
  v80  [label="360:  buf.append(longOpts)"];
  v81  [label="361:  buf.append(' ]')"];
  v82  [label="363:  return buf.toString();"];
  // graph-edges
  v1 -> v2;
  v2 -> v3  [label="True"];
  v3 -> v4;
  v2 -> v4  [label="False"];
  v4 -> v5;
  v5 -> v6  [label="False"];
  v5 -> v7  [label="True"];
  v7 -> v8;
  v8 -> v9;
  v9 -> v5;
  v6 -> v10;
  v11 -> v12;
  v13 -> v14;
  v14 -> v15;
  v16 -> v17;
  v17 -> v18;
  v19 -> v20;
  v20 -> v21;
  v22 -> v23;
  v23 -> v24;
  v24 -> v25;
  v25 -> v26;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30  [label="True"];
  v30 -> v31;
  v29 -> v31  [label="False"];
  v31 -> v32;
  v32 -> v33  [label="True"];
  v33 -> v34  [label="True"];
  v34 -> v35;
  v33 -> v35  [label="False"];
  v35 -> v36;
  v36 -> v37;
  v32 -> v37  [label="False"];
  v37 -> v38;
  v38 -> v39;
  v40 -> v41;
  v42 -> v43;
  v44 -> v45;
  v46 -> v47;
  v47 -> v48;
  v48 -> v49  [label="True"];
  v48 -> v50  [label="False"];
  v50 -> v51;
  v52 -> v53;
  v53 -> v54;
  v54 -> v55;
  v55 -> v56  [label="True"];
  v55 -> v57  [label="False"];
  v57 -> v58;
  v58 -> v59  [label="False"];
  v58 -> v60  [label="True"];
  v60 -> v61  [label="True"];
  v61 -> v62;
  v60 -> v62  [label="False"];
  v62 -> v58;
  v59 -> v63;
  v64 -> v65;
  v65 -> v66;
  v67 -> v68;
  v68 -> v69;
  v70 -> v71;
  v71 -> v72;
  v73 -> v74;
  v75 -> v76;
  v76 -> v77;
  v77 -> v78;
  v78 -> v79;
  v79 -> v80;
  v80 -> v81;
  v81 -> v82;
  // end-of-graph
}
