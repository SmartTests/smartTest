digraph CommandLine_CFG {
  // graph-vertices
  v1  [label="52:  CommandLine ()"];
  v2  [label="64:  boolean hasOption(final Option opt)"];
  v3  [label="66:  return options.contains(opt);"];
  v4  [label="75:  boolean hasOption(final String opt)"];
  v5  [label="77:  return hasOption(resolveOption(opt));"];
  v6  [label="86:  boolean hasOption(final char opt)"];
  v7  [label="88:  return hasOption(String.valueOf(opt));"];
  v8  [label="99:  Object getOptionObject(final String opt)"];
  v9  [label="101:  try"];
  v10  [label="end-try"];
  v11  [label="103:  return getParsedOptionValue(opt);"];
  v12  [label="end-catch"];
  v13  [label="105:  catch (ParseException pe)"];
  v14  [label="107:  System.err.println('Exception found converting ' + opt + ' to desired type: ' + pe.getMessage())"];
  v15  [label="108:  return null;"];
  v16  [label="121:  Object getParsedOptionValue(final Option option)"];
  v17  [label="123:  if (option == null)"];
  v18  [label="125:  return null;"];
  v19  [label="endif"];
  v20  [label="127:  final String res = getOptionValue(option)"];
  v21  [label="128:  if (res == null)"];
  v22  [label="130:  return null;"];
  v23  [label="endif"];
  v24  [label="132:  return TypeHandler.createValue(res, option.getType());"];
  v25  [label="144:  Object getParsedOptionValue(final String opt)"];
  v26  [label="146:  return getParsedOptionValue(resolveOption(opt));"];
  v27  [label="158:  Object getParsedOptionValue(final char opt)"];
  v28  [label="160:  return getParsedOptionValue(String.valueOf(opt));"];
  v29  [label="170:  Object getOptionObject(final char opt)"];
  v30  [label="172:  return getOptionObject(String.valueOf(opt));"];
  v31  [label="183:  String getOptionValue(final Option option)"];
  v32  [label="185:  if (option == null)"];
  v33  [label="187:  return null;"];
  v34  [label="endif"];
  v35  [label="189:  final String[] values = getOptionValues(option)"];
  v36  [label="190:  return (values == null) ? null : values[0];"];
  v37  [label="200:  String getOptionValue(final String opt)"];
  v38  [label="202:  return getOptionValue(resolveOption(opt));"];
  v39  [label="212:  String getOptionValue(final char opt)"];
  v40  [label="214:  return getOptionValue(String.valueOf(opt));"];
  v41  [label="225:  String[] getOptionValues(final Option option)"];
  v42  [label="227:  final List<String> values = new ArrayList<String>()"];
  v43  [label="229:  for (final Option processedOption : options)"];
  v44  [label="endfor"];
  v45  [label="231:  if (processedOption.equals(option))"];
  v46  [label="233:  values.addAll(processedOption.getValuesList())"];
  v47  [label="endif"];
  v48  [label="237:  return values.isEmpty() ? null : values.toArray(new String[values.size()]);"];
  v49  [label="247:  String[] getOptionValues(final String opt)"];
  v50  [label="249:  return getOptionValues(resolveOption(opt));"];
  v51  [label="258:  Option resolveOption(String opt)"];
  v52  [label="260:  opt = Util.stripLeadingHyphens(opt)"];
  v53  [label="261:  for (final Option option : options)"];
  v54  [label="endfor"];
  v55  [label="263:  if (opt.equals(option.getOpt()))"];
  v56  [label="265:  return option;"];
  v57  [label="endif"];
  v58  [label="268:  if (opt.equals(option.getLongOpt()))"];
  v59  [label="270:  return option;"];
  v60  [label="endif"];
  v61  [label="274:  return null;"];
  v62  [label="284:  String[] getOptionValues(final char opt)"];
  v63  [label="286:  return getOptionValues(String.valueOf(opt));"];
  v64  [label="299:  String getOptionValue(final Option option, final String defaultValue)"];
  v65  [label="301:  final String answer = getOptionValue(option)"];
  v66  [label="302:  return (answer != null) ? answer : defaultValue;"];
  v67  [label="314:  String getOptionValue(final String opt, final String defaultValue)"];
  v68  [label="316:  return getOptionValue(resolveOption(opt), defaultValue);"];
  v69  [label="328:  String getOptionValue(final char opt, final String defaultValue)"];
  v70  [label="330:  return getOptionValue(String.valueOf(opt), defaultValue);"];
  v71  [label="346:  Properties getOptionProperties(final Option option)"];
  v72  [label="348:  final Properties props = new Properties()"];
  v73  [label="350:  for (final Option processedOption : options)"];
  v74  [label="endfor"];
  v75  [label="352:  if (processedOption.equals(option))"];
  v76  [label="354:  final List<String> values = processedOption.getValuesList()"];
  v77  [label="355:  if (values.size() == 2)"];
  v78  [label="358:  props.put(values.get(0), values.get(1))"];
  v79  [label="endif"];
  v80  [label="360:  if (values.size() == 1)"];
  v81  [label="363:  props.put(values.get(0), 'true')"];
  v82  [label="endif"];
  v83  [label="endif"];
  v84  [label="368:  return props;"];
  v85  [label="384:  Properties getOptionProperties(final String opt)"];
  v86  [label="386:  final Properties props = new Properties()"];
  v87  [label="388:  for (final Option option : options)"];
  v88  [label="endfor"];
  v89  [label="390:  if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt()))"];
  v90  [label="392:  final List<String> values = option.getValuesList()"];
  v91  [label="393:  if (values.size() >= 2)"];
  v92  [label="396:  props.put(values.get(0), values.get(1))"];
  v93  [label="endif"];
  v94  [label="398:  if (values.size() == 1)"];
  v95  [label="401:  props.put(values.get(0), 'true')"];
  v96  [label="endif"];
  v97  [label="endif"];
  v98  [label="406:  return props;"];
  v99  [label="414:  String[] getArgs()"];
  v100  [label="416:  final String[] answer = new String[args.size()]"];
  v101  [label="418:  args.toArray(answer)"];
  v102  [label="420:  return answer;"];
  v103  [label="428:  List<String> getArgList()"];
  v104  [label="430:  return args;"];
  v105  [label="460:  void addArg(final String arg)"];
  v106  [label="462:  args.add(arg)"];
  v107  [label="470:  void addOption(final Option opt)"];
  v108  [label="472:  options.add(opt)"];
  v109  [label="481:  Iterator<Option> iterator()"];
  v110  [label="483:  return options.iterator();"];
  v111  [label="491:  Option[] getOptions()"];
  v112  [label="493:  final Collection<Option> processed = options"];
  v113  [label="496:  final Option[] optionsArray = new Option[processed.size()]"];
  v114  [label="499:  return processed.toArray(optionsArray);"];
  v115  [label="522:  Builder addOption(final Option opt)"];
  v116  [label="524:  commandLine.addOption(opt)"];
  v117  [label="525:  return this;"];
  v118  [label="535:  Builder addArg(final String arg)"];
  v119  [label="537:  commandLine.addArg(arg)"];
  v120  [label="538:  return this;"];
  v121  [label="541:  CommandLine build()"];
  v122  [label="543:  return commandLine;"];
  // graph-edges
  v2 -> v3;
  v4 -> v5;
  v6 -> v7;
  v8 -> v9;
  v9 -> v11;
  v10 -> v13  [label="Throws"];
  v13 -> v14;
  v14 -> v15;
  v12 -> v10;
  v16 -> v17;
  v17 -> v18  [label="True"];
  v17 -> v19  [label="False"];
  v19 -> v20;
  v20 -> v21;
  v21 -> v22  [label="True"];
  v21 -> v23  [label="False"];
  v23 -> v24;
  v25 -> v26;
  v27 -> v28;
  v29 -> v30;
  v31 -> v32;
  v32 -> v33  [label="True"];
  v32 -> v34  [label="False"];
  v34 -> v35;
  v35 -> v36;
  v37 -> v38;
  v39 -> v40;
  v41 -> v42;
  v42 -> v43;
  v43 -> v44  [label="False"];
  v43 -> v45  [label="True"];
  v45 -> v46  [label="True"];
  v46 -> v47;
  v45 -> v47  [label="False"];
  v47 -> v43;
  v44 -> v48;
  v49 -> v50;
  v51 -> v52;
  v52 -> v53;
  v53 -> v54  [label="False"];
  v53 -> v55  [label="True"];
  v55 -> v56  [label="True"];
  v55 -> v57  [label="False"];
  v57 -> v58;
  v58 -> v59  [label="True"];
  v58 -> v60  [label="False"];
  v60 -> v53;
  v54 -> v61;
  v62 -> v63;
  v64 -> v65;
  v65 -> v66;
  v67 -> v68;
  v69 -> v70;
  v71 -> v72;
  v72 -> v73;
  v73 -> v74  [label="False"];
  v73 -> v75  [label="True"];
  v75 -> v76  [label="True"];
  v76 -> v77;
  v77 -> v78  [label="True"];
  v78 -> v79;
  v77 -> v80  [label="False"];
  v80 -> v81  [label="True"];
  v81 -> v82;
  v80 -> v82  [label="False"];
  v82 -> v79;
  v79 -> v83;
  v75 -> v83  [label="False"];
  v83 -> v73;
  v74 -> v84;
  v85 -> v86;
  v86 -> v87;
  v87 -> v88  [label="False"];
  v87 -> v89  [label="True"];
  v89 -> v90  [label="True"];
  v90 -> v91;
  v91 -> v92  [label="True"];
  v92 -> v93;
  v91 -> v94  [label="False"];
  v94 -> v95  [label="True"];
  v95 -> v96;
  v94 -> v96  [label="False"];
  v96 -> v93;
  v93 -> v97;
  v89 -> v97  [label="False"];
  v97 -> v87;
  v88 -> v98;
  v99 -> v100;
  v100 -> v101;
  v101 -> v102;
  v103 -> v104;
  v105 -> v106;
  v107 -> v108;
  v109 -> v110;
  v111 -> v112;
  v112 -> v113;
  v113 -> v114;
  v115 -> v116;
  v116 -> v117;
  v118 -> v119;
  v119 -> v120;
  v121 -> v122;
  // end-of-graph
}
