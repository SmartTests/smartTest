digraph DefaultParser_CFG {
  // graph-vertices
  v1  [label="77:  DefaultParser ()"];
  v2  [label="78:  this.allowPartialMatching = true"];
  v3  [label="100:  DefaultParser (final boolean allowPartialMatching)"];
  v4  [label="101:  this.allowPartialMatching = allowPartialMatching"];
  v5  [label="104:  CommandLine parse(final Options options, final String[] arguments)"];
  v6  [label="106:  return parse(options, arguments, null);"];
  v7  [label="120:  CommandLine parse(final Options options, final String[] arguments, final Properties properties)"];
  v8  [label="122:  return parse(options, arguments, properties, false);"];
  v9  [label="125:  CommandLine parse(final Options options, final String[] arguments, final boolean stopAtNonOption)"];
  v10  [label="127:  return parse(options, arguments, null, stopAtNonOption);"];
  v11  [label="145:  CommandLine parse(final Options options, final String[] arguments, final Properties properties, final boolean stopAtNonOption)"];
  v12  [label="148:  this.options = options"];
  v13  [label="149:  this.stopAtNonOption = stopAtNonOption"];
  v14  [label="150:  skipParsing = false"];
  v15  [label="151:  currentOption = null"];
  v16  [label="152:  expectedOpts = new ArrayList(options.getRequiredOptions())"];
  v17  [label="155:  for (final OptionGroup group : options.getOptionGroups())"];
  v18  [label="endfor"];
  v19  [label="157:  group.setSelected(null)"];
  v20  [label="160:  cmd = new CommandLine()"];
  v21  [label="162:  if (arguments != null)"];
  v22  [label="164:  for (final String argument : arguments)"];
  v23  [label="endfor"];
  v24  [label="166:  handleToken(argument)"];
  v25  [label="endif"];
  v26  [label="171:  checkRequiredArgs()"];
  v27  [label="174:  handleProperties(properties)"];
  v28  [label="176:  checkRequiredOptions()"];
  v29  [label="178:  return cmd;"];
  v30  [label="186:  void handleProperties(final Properties properties)"];
  v31  [label="188:  if (properties == null)"];
  v32  [label="190:  return;"];
  v33  [label="endif"];
  v34  [label="193:  for (  final Enumeration<?> e = properties.propertyNames( ;    ; ) ; e.hasMoreElements(  final Enumeration<?> e = properties.propertyNames( ;    ; ) ;  ;    ; ) ;    ; )"];
  v37  [label="endfor"];
  v38  [label="195:  final String option = e.nextElement().toString()"];
  v39  [label="197:  final Option opt = options.getOption(option)"];
  v40  [label="198:  if (opt == null)"];
  v41  [label="200:  throw new UnrecognizedOptionException('Default option wasn't defined', option)"];
  v42  [label="endif"];
  v43  [label="204:  final OptionGroup group = options.getOptionGroup(opt)"];
  v44  [label="205:  final boolean selected = group != null && group.getSelected() != null"];
  v45  [label="207:  if (!cmd.hasOption(option) && !selected)"];
  v46  [label="210:  final String value = properties.getProperty(option)"];
  v47  [label="212:  if (opt.hasArg())"];
  v48  [label="214:  if (true)"];
  v49  [label="216:  opt.addValueForProcessing(value)"];
  v50  [label="endif"];
  v51  [label="endif"];
  v52  [label="219:  if (!('yes'.equalsIgnoreCase(value) || 'true'.equalsIgnoreCase(value) || '1'.equalsIgnoreCase(value)))"];
  v53  [label="224:  continue;"];
  v54  [label="endif"];
  v55  [label="227:  handleOption(opt)"];
  v56  [label="228:  currentOption = null"];
  v57  [label="endif"];
  v58  [label="240:  void checkRequiredOptions()"];
  v59  [label="243:  if (!expectedOpts.isEmpty())"];
  v60  [label="245:  throw new MissingOptionException(expectedOpts)"];
  v61  [label="endif"];
  v62  [label="253:  void checkRequiredArgs()"];
  v63  [label="255:  if (currentOption != null && currentOption.requiresArg())"];
  v64  [label="257:  throw new MissingArgumentException(currentOption)"];
  v65  [label="endif"];
  v66  [label="267:  void handleToken(final String token)"];
  v67  [label="269:  currentToken = token"];
  v68  [label="271:  if (skipParsing)"];
  v69  [label="273:  cmd.addArg(token)"];
  v70  [label="endif"];
  v71  [label="275:  if ('--'.equals(token))"];
  v72  [label="277:  skipParsing = true"];
  v73  [label="endif"];
  v74  [label="279:  if (currentOption != null && currentOption.acceptsArg() && isArgument(token))"];
  v75  [label="281:  currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token))"];
  v76  [label="endif"];
  v77  [label="283:  if (token.startsWith('--'))"];
  v78  [label="285:  handleLongOption(token)"];
  v79  [label="endif"];
  v80  [label="287:  if (token.startsWith('-') && !'-'.equals(token))"];
  v81  [label="289:  handleShortAndLongOption(token)"];
  v82  [label="endif"];
  v83  [label="293:  handleUnknownToken(token)"];
  v84  [label="296:  if (currentOption != null && !currentOption.acceptsArg())"];
  v85  [label="298:  currentOption = null"];
  v86  [label="endif"];
  v87  [label="307:  boolean isArgument(final String token)"];
  v88  [label="309:  return !isOption(token) || isNegativeNumber(token);"];
  v89  [label="317:  boolean isNegativeNumber(final String token)"];
  v90  [label="319:  try"];
  v91  [label="end-try"];
  v92  [label="321:  Double.parseDouble(token)"];
  v93  [label="322:  return true;"];
  v94  [label="end-catch"];
  v95  [label="324:  catch (NumberFormatException e)"];
  v96  [label="326:  return false;"];
  v97  [label="335:  boolean isOption(final String token)"];
  v98  [label="337:  return isLongOption(token) || isShortOption(token);"];
  v99  [label="345:  boolean isShortOption(final String token)"];
  v100  [label="348:  if (!token.startsWith('-') || token.length() == 1)"];
  v101  [label="350:  return false;"];
  v102  [label="endif"];
  v103  [label="354:  final int pos = token.indexOf('=')"];
  v104  [label="355:  final String optName = pos == -1 ? token.substring(1) : token.substring(1, pos)"];
  v105  [label="356:  if (options.hasShortOption(optName))"];
  v106  [label="358:  return true;"];
  v107  [label="endif"];
  v108  [label="361:  return optName.length() > 0 && options.hasShortOption(String.valueOf(optName.charAt(0)));"];
  v109  [label="369:  boolean isLongOption(final String token)"];
  v110  [label="371:  if (!token.startsWith('-') || token.length() == 1)"];
  v111  [label="373:  return false;"];
  v112  [label="endif"];
  v113  [label="376:  final int pos = token.indexOf('=')"];
  v114  [label="377:  final String t = pos == -1 ? token : token.substring(0, pos)"];
  v115  [label="379:  if (!getMatchingLongOptions(t).isEmpty())"];
  v116  [label="382:  return true;"];
  v117  [label="endif"];
  v118  [label="384:  if (getLongPrefix(token) != null && !token.startsWith('--'))"];
  v119  [label="387:  return true;"];
  v120  [label="endif"];
  v121  [label="390:  return false;"];
  v122  [label="402:  void handleUnknownToken(final String token)"];
  v123  [label="404:  if (token.startsWith('-') && token.length() > 1 && !stopAtNonOption)"];
  v124  [label="406:  throw new UnrecognizedOptionException('Unrecognized option: ' + token, token)"];
  v125  [label="endif"];
  v126  [label="409:  cmd.addArg(token)"];
  v127  [label="410:  if (stopAtNonOption)"];
  v128  [label="412:  skipParsing = true"];
  v129  [label="endif"];
  v130  [label="426:  void handleLongOption(final String token)"];
  v131  [label="428:  if (token.indexOf('=') == -1)"];
  v132  [label="430:  handleLongOptionWithoutEqual(token)"];
  v133  [label="endif"];
  v134  [label="434:  handleLongOptionWithEqual(token)"];
  v135  [label="448:  void handleLongOptionWithoutEqual(final String token)"];
  v136  [label="450:  final List<String> matchingOpts = getMatchingLongOptions(token)"];
  v137  [label="451:  if (matchingOpts.isEmpty())"];
  v138  [label="453:  handleUnknownToken(currentToken)"];
  v139  [label="endif"];
  v140  [label="455:  if (matchingOpts.size() > 1 && !options.hasLongOption(token))"];
  v141  [label="457:  throw new AmbiguousOptionException(token, matchingOpts)"];
  v142  [label="endif"];
  v143  [label="461:  final String key = options.hasLongOption(token) ? token : matchingOpts.get(0)"];
  v144  [label="462:  handleOption(options.getOption(key))"];
  v145  [label="476:  void handleLongOptionWithEqual(final String token)"];
  v146  [label="478:  final int pos = token.indexOf('=')"];
  v147  [label="480:  final String value = token.substring(pos + 1)"];
  v148  [label="482:  final String opt = token.substring(0, pos)"];
  v149  [label="484:  final List<String> matchingOpts = getMatchingLongOptions(opt)"];
  v150  [label="485:  if (matchingOpts.isEmpty())"];
  v151  [label="487:  handleUnknownToken(currentToken)"];
  v152  [label="endif"];
  v153  [label="489:  if (matchingOpts.size() > 1 && !options.hasLongOption(opt))"];
  v154  [label="491:  throw new AmbiguousOptionException(opt, matchingOpts)"];
  v155  [label="endif"];
  v156  [label="495:  final String key = options.hasLongOption(opt) ? opt : matchingOpts.get(0)"];
  v157  [label="496:  final Option option = options.getOption(key)"];
  v158  [label="498:  if (option.acceptsArg())"];
  v159  [label="500:  handleOption(option)"];
  v160  [label="501:  currentOption.addValueForProcessing(value)"];
  v161  [label="502:  currentOption = null"];
  v162  [label="endif"];
  v163  [label="506:  handleUnknownToken(currentToken)"];
  v164  [label="530:  void handleShortAndLongOption(final String token)"];
  v165  [label="532:  final String t = Util.stripLeadingHyphens(token)"];
  v166  [label="534:  final int pos = t.indexOf('=')"];
  v167  [label="536:  if (t.length() == 1)"];
  v168  [label="539:  if (options.hasShortOption(t))"];
  v169  [label="541:  handleOption(options.getOption(t))"];
  v170  [label="endif"];
  v171  [label="545:  handleUnknownToken(token)"];
  v172  [label="endif"];
  v173  [label="548:  if (pos == -1)"];
  v174  [label="551:  if (options.hasShortOption(t))"];
  v175  [label="553:  handleOption(options.getOption(t))"];
  v176  [label="endif"];
  v177  [label="555:  if (!getMatchingLongOptions(t).isEmpty())"];
  v178  [label="558:  handleLongOptionWithoutEqual(token)"];
  v179  [label="endif"];
  v180  [label="563:  final String opt = getLongPrefix(t)"];
  v181  [label="565:  if (opt != null && options.getOption(opt).acceptsArg())"];
  v182  [label="567:  handleOption(options.getOption(opt))"];
  v183  [label="568:  currentOption.addValueForProcessing(t.substring(opt.length()))"];
  v184  [label="569:  currentOption = null"];
  v185  [label="endif"];
  v186  [label="571:  if (isJavaProperty(t))"];
  v187  [label="574:  handleOption(options.getOption(t.substring(0, 1)))"];
  v188  [label="575:  currentOption.addValueForProcessing(t.substring(1))"];
  v189  [label="576:  currentOption = null"];
  v190  [label="endif"];
  v191  [label="581:  handleConcatenatedOptions(token)"];
  v192  [label="endif"];
  v193  [label="588:  final String opt = t.substring(0, pos)"];
  v194  [label="589:  final String value = t.substring(pos + 1)"];
  v195  [label="591:  if (opt.length() == 1)"];
  v196  [label="594:  final Option option = options.getOption(opt)"];
  v197  [label="595:  if (option != null && option.acceptsArg())"];
  v198  [label="597:  handleOption(option)"];
  v199  [label="598:  currentOption.addValueForProcessing(value)"];
  v200  [label="599:  currentOption = null"];
  v201  [label="endif"];
  v202  [label="603:  handleUnknownToken(token)"];
  v203  [label="endif"];
  v204  [label="606:  if (isJavaProperty(opt))"];
  v205  [label="609:  handleOption(options.getOption(opt.substring(0, 1)))"];
  v206  [label="610:  currentOption.addValueForProcessing(opt.substring(1))"];
  v207  [label="611:  currentOption.addValueForProcessing(value)"];
  v208  [label="612:  currentOption = null"];
  v209  [label="endif"];
  v210  [label="617:  handleLongOptionWithEqual(token)"];
  v211  [label="627:  String getLongPrefix(final String token)"];
  v212  [label="629:  final String t = Util.stripLeadingHyphens(token)"];
  v213  [label="631:  int i"];
  v214  [label="632:  String opt = null"];
  v215  [label="633:  for (  i = t.length( ;   i--) - 2 ; i > 1 ;   i--)"];
  v218  [label="endfor"];
  v219  [label="635:  final String prefix = t.substring(0, i)"];
  v220  [label="636:  if (options.hasLongOption(prefix))"];
  v221  [label="638:  opt = prefix"];
  v222  [label="639:  break;"];
  v223  [label="endif"];
  v224  [label="643:  return opt;"];
  v225  [label="649:  boolean isJavaProperty(final String token)"];
  v226  [label="651:  final String opt = token.substring(0, 1)"];
  v227  [label="652:  final Option option = options.getOption(opt)"];
  v228  [label="654:  return option != null && (option.getArgs() >= 2 || option.getArgs() == Option.UNLIMITED_VALUES);"];
  v229  [label="657:  void handleOption(Option option)"];
  v230  [label="660:  checkRequiredArgs()"];
  v231  [label="662:  option = (Option) option.clone()"];
  v232  [label="664:  updateRequiredOptions(option)"];
  v233  [label="666:  cmd.addOption(option)"];
  v234  [label="668:  if (option.hasArg())"];
  v235  [label="670:  currentOption = option"];
  v236  [label="endif"];
  v237  [label="674:  currentOption = null"];
  v238  [label="683:  void updateRequiredOptions(final Option option)"];
  v239  [label="685:  if (option.isRequired())"];
  v240  [label="687:  expectedOpts.remove(option.getKey())"];
  v241  [label="endif"];
  v242  [label="691:  if (options.getOptionGroup(option) != null)"];
  v243  [label="693:  final OptionGroup group = options.getOptionGroup(option)"];
  v244  [label="695:  if (group.isRequired())"];
  v245  [label="697:  expectedOpts.remove(group)"];
  v246  [label="endif"];
  v247  [label="700:  group.setSelected(option)"];
  v248  [label="endif"];
  v249  [label="711:  List<String> getMatchingLongOptions(final String token)"];
  v250  [label="713:  if (allowPartialMatching)"];
  v251  [label="715:  return options.getMatchingOptions(token);"];
  v252  [label="endif"];
  v253  [label="719:  List<String> matches = new ArrayList<String>(1)"];
  v254  [label="720:  if (options.hasLongOption(token))"];
  v255  [label="722:  Option option = options.getOption(token)"];
  v256  [label="723:  matches.add(option.getLongOpt())"];
  v257  [label="endif"];
  v258  [label="726:  return matches;"];
  v259  [label="757:  void handleConcatenatedOptions(final String token)"];
  v260  [label="759:  for (  int i = 1 ; i < token.length(  int i = 1 ;  ;   i++) ;   i++)"];
  v263  [label="endfor"];
  v264  [label="761:  final String ch = String.valueOf(token.charAt(i))"];
  v265  [label="763:  if (options.hasOption(ch))"];
  v266  [label="765:  handleOption(options.getOption(ch))"];
  v267  [label="767:  if (currentOption != null && token.length() != i + 1)"];
  v268  [label="770:  currentOption.addValueForProcessing(token.substring(i + 1))"];
  v269  [label="771:  break;"];
  v270  [label="endif"];
  v271  [label="endif"];
  v272  [label="776:  handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token)"];
  v273  [label="777:  break;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v7 -> v8;
  v9 -> v10;
  v11 -> v12;
  v12 -> v13;
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v17;
  v17 -> v18  [label="False"];
  v17 -> v19  [label="True"];
  v19 -> v17;
  v18 -> v20;
  v20 -> v21;
  v21 -> v22  [label="True"];
  v22 -> v23  [label="False"];
  v22 -> v24  [label="True"];
  v24 -> v22;
  v23 -> v25;
  v21 -> v25  [label="False"];
  v25 -> v26;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v30 -> v31;
  v31 -> v32  [label="True"];
  v31 -> v33  [label="False"];
  v33 -> v34;
  v34 -> v37  [label="False"];
  v34 -> v38  [label="True"];
  v38 -> v39;
  v39 -> v40;
  v40 -> v41  [label="True"];
  v40 -> v42  [label="False"];
  v42 -> v43;
  v43 -> v44;
  v44 -> v45;
  v45 -> v46  [label="True"];
  v46 -> v47;
  v47 -> v48  [label="True"];
  v48 -> v49  [label="True"];
  v49 -> v50;
  v48 -> v50  [label="False"];
  v50 -> v51;
  v47 -> v52  [label="False"];
  v52 -> v53  [label="True"];
  v53 -> v34;
  v52 -> v54  [label="False"];
  v54 -> v51;
  v51 -> v55;
  v55 -> v56;
  v56 -> v57;
  v45 -> v57  [label="False"];
  v57 -> v34;
  v58 -> v59;
  v59 -> v60  [label="True"];
  v59 -> v61  [label="False"];
  v62 -> v63;
  v63 -> v64  [label="True"];
  v63 -> v65  [label="False"];
  v66 -> v67;
  v67 -> v68;
  v68 -> v69  [label="True"];
  v69 -> v70;
  v68 -> v71  [label="False"];
  v71 -> v72  [label="True"];
  v72 -> v73;
  v71 -> v74  [label="False"];
  v74 -> v75  [label="True"];
  v75 -> v76;
  v74 -> v77  [label="False"];
  v77 -> v78  [label="True"];
  v78 -> v79;
  v77 -> v80  [label="False"];
  v80 -> v81  [label="True"];
  v81 -> v82;
  v80 -> v83  [label="False"];
  v83 -> v82;
  v82 -> v79;
  v79 -> v76;
  v76 -> v73;
  v73 -> v70;
  v70 -> v84;
  v84 -> v85  [label="True"];
  v85 -> v86;
  v84 -> v86  [label="False"];
  v87 -> v88;
  v89 -> v90;
  v90 -> v92;
  v92 -> v93;
  v91 -> v95  [label="Throws"];
  v95 -> v96;
  v94 -> v91;
  v97 -> v98;
  v99 -> v100;
  v100 -> v101  [label="True"];
  v100 -> v102  [label="False"];
  v102 -> v103;
  v103 -> v104;
  v104 -> v105;
  v105 -> v106  [label="True"];
  v105 -> v107  [label="False"];
  v107 -> v108;
  v109 -> v110;
  v110 -> v111  [label="True"];
  v110 -> v112  [label="False"];
  v112 -> v113;
  v113 -> v114;
  v114 -> v115;
  v115 -> v116  [label="True"];
  v115 -> v118  [label="False"];
  v118 -> v119  [label="True"];
  v118 -> v120  [label="False"];
  v120 -> v117;
  v117 -> v121;
  v122 -> v123;
  v123 -> v124  [label="True"];
  v123 -> v125  [label="False"];
  v125 -> v126;
  v126 -> v127;
  v127 -> v128  [label="True"];
  v128 -> v129;
  v127 -> v129  [label="False"];
  v130 -> v131;
  v131 -> v132  [label="True"];
  v132 -> v133;
  v131 -> v134  [label="False"];
  v134 -> v133;
  v135 -> v136;
  v136 -> v137;
  v137 -> v138  [label="True"];
  v138 -> v139;
  v137 -> v140  [label="False"];
  v140 -> v141  [label="True"];
  v140 -> v143  [label="False"];
  v143 -> v144;
  v144 -> v142;
  v142 -> v139;
  v145 -> v146;
  v146 -> v147;
  v147 -> v148;
  v148 -> v149;
  v149 -> v150;
  v150 -> v151  [label="True"];
  v151 -> v152;
  v150 -> v153  [label="False"];
  v153 -> v154  [label="True"];
  v153 -> v156  [label="False"];
  v156 -> v157;
  v157 -> v158;
  v158 -> v159  [label="True"];
  v159 -> v160;
  v160 -> v161;
  v161 -> v162;
  v158 -> v163  [label="False"];
  v163 -> v162;
  v162 -> v155;
  v155 -> v152;
  v164 -> v165;
  v165 -> v166;
  v166 -> v167;
  v167 -> v168  [label="True"];
  v168 -> v169  [label="True"];
  v169 -> v170;
  v168 -> v171  [label="False"];
  v171 -> v170;
  v170 -> v172;
  v167 -> v173  [label="False"];
  v173 -> v174  [label="True"];
  v174 -> v175  [label="True"];
  v175 -> v176;
  v174 -> v177  [label="False"];
  v177 -> v178  [label="True"];
  v178 -> v179;
  v177 -> v180  [label="False"];
  v180 -> v181;
  v181 -> v182  [label="True"];
  v182 -> v183;
  v183 -> v184;
  v184 -> v185;
  v181 -> v186  [label="False"];
  v186 -> v187  [label="True"];
  v187 -> v188;
  v188 -> v189;
  v189 -> v190;
  v186 -> v191  [label="False"];
  v191 -> v190;
  v190 -> v185;
  v185 -> v179;
  v179 -> v176;
  v176 -> v192;
  v173 -> v193  [label="False"];
  v193 -> v194;
  v194 -> v195;
  v195 -> v196  [label="True"];
  v196 -> v197;
  v197 -> v198  [label="True"];
  v198 -> v199;
  v199 -> v200;
  v200 -> v201;
  v197 -> v202  [label="False"];
  v202 -> v201;
  v201 -> v203;
  v195 -> v204  [label="False"];
  v204 -> v205  [label="True"];
  v205 -> v206;
  v206 -> v207;
  v207 -> v208;
  v208 -> v209;
  v204 -> v210  [label="False"];
  v210 -> v209;
  v209 -> v203;
  v203 -> v192;
  v192 -> v172;
  v211 -> v212;
  v212 -> v213;
  v213 -> v214;
  v214 -> v215;
  v215 -> v218  [label="False"];
  v215 -> v219  [label="True"];
  v219 -> v220;
  v220 -> v221  [label="True"];
  v221 -> v222;
  v222 -> v218;
  v220 -> v223  [label="False"];
  v223 -> v215;
  v218 -> v224;
  v225 -> v226;
  v226 -> v227;
  v227 -> v228;
  v229 -> v230;
  v230 -> v231;
  v231 -> v232;
  v232 -> v233;
  v233 -> v234;
  v234 -> v235  [label="True"];
  v235 -> v236;
  v234 -> v237  [label="False"];
  v237 -> v236;
  v238 -> v239;
  v239 -> v240  [label="True"];
  v240 -> v241;
  v239 -> v241  [label="False"];
  v241 -> v242;
  v242 -> v243  [label="True"];
  v243 -> v244;
  v244 -> v245  [label="True"];
  v245 -> v246;
  v244 -> v246  [label="False"];
  v246 -> v247;
  v247 -> v248;
  v242 -> v248  [label="False"];
  v249 -> v250;
  v250 -> v251  [label="True"];
  v250 -> v253  [label="False"];
  v253 -> v254;
  v254 -> v255  [label="True"];
  v255 -> v256;
  v256 -> v257;
  v254 -> v257  [label="False"];
  v257 -> v258;
  v259 -> v260;
  v260 -> v263  [label="False"];
  v260 -> v264  [label="True"];
  v264 -> v265;
  v265 -> v266  [label="True"];
  v266 -> v267;
  v267 -> v268  [label="True"];
  v268 -> v269;
  v269 -> v263;
  v267 -> v270  [label="False"];
  v270 -> v271;
  v265 -> v272  [label="False"];
  v272 -> v273;
  v273 -> v263;
  v271 -> v260;
  // end-of-graph
}
