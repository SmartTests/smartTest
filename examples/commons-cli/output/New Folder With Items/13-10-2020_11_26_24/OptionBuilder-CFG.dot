digraph OptionBuilder_CFG {
  // graph-vertices
  v1  [label="61:  static"];
  v2  [label="64:  reset()"];
  v3  [label="70:  OptionBuilder ()"];
  v4  [label="78:  void reset()"];
  v5  [label="80:  description = null"];
  v6  [label="81:  argName = null"];
  v7  [label="82:  longopt = null"];
  v8  [label="83:  type = String.class"];
  v9  [label="84:  required = false"];
  v10  [label="85:  numberOfArgs = Option.UNINITIALIZED"];
  v11  [label="86:  optionalArg = false"];
  v12  [label="87:  valuesep = (char) 0"];
  v13  [label="96:  OptionBuilder withLongOpt(final String newLongopt)"];
  v14  [label="98:  OptionBuilder.longopt = newLongopt"];
  v15  [label="100:  return INSTANCE;"];
  v16  [label="108:  OptionBuilder hasArg()"];
  v17  [label="110:  OptionBuilder.numberOfArgs = 1"];
  v18  [label="112:  return INSTANCE;"];
  v19  [label="122:  OptionBuilder hasArg(final boolean hasArg)"];
  v20  [label="124:  OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED"];
  v21  [label="126:  return INSTANCE;"];
  v22  [label="135:  OptionBuilder withArgName(final String name)"];
  v23  [label="137:  OptionBuilder.argName = name"];
  v24  [label="139:  return INSTANCE;"];
  v25  [label="147:  OptionBuilder isRequired()"];
  v26  [label="149:  OptionBuilder.required = true"];
  v27  [label="151:  return INSTANCE;"];
  v28  [label="173:  OptionBuilder withValueSeparator(final char sep)"];
  v29  [label="175:  OptionBuilder.valuesep = sep"];
  v30  [label="177:  return INSTANCE;"];
  v31  [label="196:  OptionBuilder withValueSeparator()"];
  v32  [label="198:  OptionBuilder.valuesep = '='"];
  v33  [label="200:  return INSTANCE;"];
  v34  [label="210:  OptionBuilder isRequired(final boolean newRequired)"];
  v35  [label="212:  OptionBuilder.required = newRequired"];
  v36  [label="214:  return INSTANCE;"];
  v37  [label="222:  OptionBuilder hasArgs()"];
  v38  [label="224:  OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES"];
  v39  [label="226:  return INSTANCE;"];
  v40  [label="235:  OptionBuilder hasArgs(final int num)"];
  v41  [label="237:  OptionBuilder.numberOfArgs = num"];
  v42  [label="239:  return INSTANCE;"];
  v43  [label="247:  OptionBuilder hasOptionalArg()"];
  v44  [label="249:  OptionBuilder.numberOfArgs = 1"];
  v45  [label="250:  OptionBuilder.optionalArg = true"];
  v46  [label="252:  return INSTANCE;"];
  v47  [label="260:  OptionBuilder hasOptionalArgs()"];
  v48  [label="262:  OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES"];
  v49  [label="263:  OptionBuilder.optionalArg = false"];
  v50  [label="265:  return INSTANCE;"];
  v51  [label="275:  OptionBuilder hasOptionalArgs(final int numArgs)"];
  v52  [label="277:  OptionBuilder.numberOfArgs = numArgs"];
  v53  [label="278:  OptionBuilder.optionalArg = true"];
  v54  [label="280:  return INSTANCE;"];
  v55  [label="295:  OptionBuilder withType(final Object newType)"];
  v56  [label="297:  return withType((Class<?>) newType);"];
  v57  [label="308:  OptionBuilder withType(final Class<?> newType)"];
  v58  [label="310:  OptionBuilder.type = newType"];
  v59  [label="312:  return INSTANCE;"];
  v60  [label="321:  OptionBuilder withDescription(final String newDescription)"];
  v61  [label="323:  OptionBuilder.description = newDescription"];
  v62  [label="325:  return INSTANCE;"];
  v63  [label="337:  Option create(final char opt)"];
  v64  [label="339:  return create(String.valueOf(opt));"];
  v65  [label="348:  Option create()"];
  v66  [label="350:  if (longopt == null)"];
  v67  [label="352:  OptionBuilder.reset()"];
  v68  [label="353:  throw new IllegalArgumentException('must specify longopt')"];
  v69  [label="endif"];
  v70  [label="356:  return create(null);"];
  v71  [label="369:  Option create(final String opt)"];
  v72  [label="371:  Option option = null"];
  v73  [label="372:  try"];
  v74  [label="end-try"];
  v75  [label="375:  option = new Option(opt, description)"];
  v76  [label="378:  option.setLongOpt(longopt)"];
  v77  [label="379:  option.setRequired(required)"];
  v78  [label="380:  option.setOptionalArg(optionalArg)"];
  v79  [label="381:  option.setArgs(numberOfArgs)"];
  v80  [label="382:  option.setType(type)"];
  v81  [label="383:  option.setValueSeparator(valuesep)"];
  v82  [label="384:  option.setArgName(argName)"];
  v83  [label="386:  finally"];
  v84  [label="389:  OptionBuilder.reset()"];
  v85  [label="end-finally"];
  v86  [label="393:  return option;"];
  // graph-edges
  v1 -> v2;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8;
  v8 -> v9;
  v9 -> v10;
  v10 -> v11;
  v11 -> v12;
  v13 -> v14;
  v14 -> v15;
  v16 -> v17;
  v17 -> v18;
  v19 -> v20;
  v20 -> v21;
  v22 -> v23;
  v23 -> v24;
  v25 -> v26;
  v26 -> v27;
  v28 -> v29;
  v29 -> v30;
  v31 -> v32;
  v32 -> v33;
  v34 -> v35;
  v35 -> v36;
  v37 -> v38;
  v38 -> v39;
  v40 -> v41;
  v41 -> v42;
  v43 -> v44;
  v44 -> v45;
  v45 -> v46;
  v47 -> v48;
  v48 -> v49;
  v49 -> v50;
  v51 -> v52;
  v52 -> v53;
  v53 -> v54;
  v55 -> v56;
  v57 -> v58;
  v58 -> v59;
  v60 -> v61;
  v61 -> v62;
  v63 -> v64;
  v65 -> v66;
  v66 -> v67  [label="True"];
  v67 -> v68;
  v66 -> v69  [label="False"];
  v69 -> v70;
  v71 -> v72;
  v72 -> v73;
  v73 -> v75;
  v75 -> v76;
  v76 -> v77;
  v77 -> v78;
  v78 -> v79;
  v79 -> v80;
  v80 -> v81;
  v81 -> v82;
  v82 -> v74;
  v74 -> v83;
  v83 -> v84;
  v84 -> v85;
  v85 -> v86;
  // end-of-graph
}
