digraph PosixParser_CFG {
  // graph-vertices
  v1  [label="51:  void init()"];
  v2  [label="53:  eatTheRest = false"];
  v3  [label="54:  tokens.clear()"];
  v4  [label="95:  String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption)"];
  v5  [label="97:  init()"];
  v6  [label="98:  this.options = options"];
  v7  [label="101:  final Iterator<String> iter = Arrays.asList(arguments).iterator()"];
  v8  [label="104:  while (iter.hasNext())"];
  v9  [label="endwhile"];
  v10  [label="107:  final String token = iter.next()"];
  v11  [label="110:  if ('-'.equals(token) || '--'.equals(token))"];
  v12  [label="112:  tokens.add(token)"];
  v13  [label="endif"];
  v14  [label="116:  if (token.startsWith('--'))"];
  v15  [label="118:  final int pos = token.indexOf('=')"];
  v16  [label="119:  final String opt = pos == -1 ? token : token.substring(0, pos)"];
  v17  [label="121:  final List<String> matchingOpts = options.getMatchingOptions(opt)"];
  v18  [label="123:  if (matchingOpts.isEmpty())"];
  v19  [label="125:  processNonOptionToken(token, stopAtNonOption)"];
  v20  [label="endif"];
  v21  [label="127:  if (matchingOpts.size() >= 1)"];
  v22  [label="129:  throw new AmbiguousOptionException(opt, matchingOpts)"];
  v23  [label="endif"];
  v24  [label="133:  currentOption = options.getOption(matchingOpts.get(0))"];
  v25  [label="135:  tokens.add('--' + currentOption.getLongOpt())"];
  v26  [label="136:  if (pos != -1)"];
  v27  [label="138:  tokens.add(token.substring(pos + 1))"];
  v28  [label="endif"];
  v29  [label="endif"];
  v30  [label="143:  if (token.startsWith('-'))"];
  v31  [label="145:  if (token.length() == 2 || options.hasOption(token))"];
  v32  [label="147:  processOptionToken(token, stopAtNonOption)"];
  v33  [label="endif"];
  v34  [label="149:  if (!options.getMatchingOptions(token).isEmpty())"];
  v35  [label="151:  final List<String> matchingOpts = options.getMatchingOptions(token)"];
  v36  [label="152:  if (matchingOpts.size() > 1)"];
  v37  [label="154:  throw new AmbiguousOptionException(token, matchingOpts)"];
  v38  [label="endif"];
  v39  [label="156:  final Option opt = options.getOption(matchingOpts.get(0))"];
  v40  [label="157:  processOptionToken('-' + opt.getLongOpt(), stopAtNonOption)"];
  v41  [label="endif"];
  v42  [label="162:  burstToken(token, stopAtNonOption)"];
  v43  [label="endif"];
  v44  [label="167:  processNonOptionToken(token, stopAtNonOption)"];
  v45  [label="170:  gobble(iter)"];
  v46  [label="173:  return tokens.toArray(new String[tokens.size()]);"];
  v47  [label="181:  void gobble(final Iterator<String> iter)"];
  v48  [label="183:  if (eatTheRest)"];
  v49  [label="185:  while (iter.hasNext())"];
  v50  [label="endwhile"];
  v51  [label="187:  tokens.add(iter.next())"];
  v52  [label="endif"];
  v53  [label="199:  void processNonOptionToken(final String value, final boolean stopAtNonOption)"];
  v54  [label="201:  if (stopAtNonOption && (currentOption == null || !currentOption.hasArg()))"];
  v55  [label="203:  eatTheRest = true"];
  v56  [label="204:  tokens.add('--')"];
  v57  [label="endif"];
  v58  [label="207:  tokens.add(value)"];
  v59  [label="222:  void processOptionToken(final String token, final boolean stopAtNonOption)"];
  v60  [label="224:  if (stopAtNonOption && !options.hasOption(token))"];
  v61  [label="226:  eatTheRest = true"];
  v62  [label="endif"];
  v63  [label="229:  if (options.hasOption(token))"];
  v64  [label="231:  currentOption = options.getOption(token)"];
  v65  [label="endif"];
  v66  [label="234:  tokens.add(token)"];
  v67  [label="263:  void burstToken(final String token, final boolean stopAtNonOption)"];
  v68  [label="265:  for (  int i = 1 ; i < token.length(  int i = 1 ;  ;   i++) ;   i++)"];
  v71  [label="endfor"];
  v72  [label="267:  final String ch = String.valueOf(token.charAt(i))"];
  v73  [label="269:  if (options.hasOption(ch))"];
  v74  [label="271:  tokens.add('-' + ch)"];
  v75  [label="272:  currentOption = options.getOption(ch)"];
  v76  [label="274:  if (currentOption.hasArg() && token.length() != i + 1)"];
  v77  [label="276:  tokens.add(token.substring(i + 1))"];
  v78  [label="278:  break;"];
  v79  [label="endif"];
  v80  [label="endif"];
  v81  [label="281:  if (stopAtNonOption)"];
  v82  [label="283:  processNonOptionToken(token.substring(i), true)"];
  v83  [label="284:  break;"];
  v84  [label="endif"];
  v85  [label="288:  tokens.add(token)"];
  v86  [label="289:  break;"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8;
  v8 -> v9  [label="False"];
  v8 -> v10  [label="True"];
  v10 -> v11;
  v11 -> v12  [label="True"];
  v12 -> v13;
  v11 -> v14  [label="False"];
  v14 -> v15  [label="True"];
  v15 -> v16;
  v16 -> v17;
  v17 -> v18;
  v18 -> v19  [label="True"];
  v19 -> v20;
  v18 -> v21  [label="False"];
  v21 -> v22  [label="True"];
  v21 -> v24  [label="False"];
  v24 -> v25;
  v25 -> v26;
  v26 -> v27  [label="True"];
  v27 -> v28;
  v26 -> v28  [label="False"];
  v28 -> v23;
  v23 -> v20;
  v20 -> v29;
  v14 -> v30  [label="False"];
  v30 -> v31  [label="True"];
  v31 -> v32  [label="True"];
  v32 -> v33;
  v31 -> v34  [label="False"];
  v34 -> v35  [label="True"];
  v35 -> v36;
  v36 -> v37  [label="True"];
  v36 -> v38  [label="False"];
  v38 -> v39;
  v39 -> v40;
  v40 -> v41;
  v34 -> v42  [label="False"];
  v42 -> v41;
  v41 -> v33;
  v33 -> v43;
  v30 -> v44  [label="False"];
  v44 -> v43;
  v43 -> v29;
  v29 -> v13;
  v13 -> v45;
  v45 -> v8;
  v9 -> v46;
  v47 -> v48;
  v48 -> v49  [label="True"];
  v49 -> v50  [label="False"];
  v49 -> v51  [label="True"];
  v51 -> v49;
  v50 -> v52;
  v48 -> v52  [label="False"];
  v53 -> v54;
  v54 -> v55  [label="True"];
  v55 -> v56;
  v56 -> v57;
  v54 -> v57  [label="False"];
  v57 -> v58;
  v59 -> v60;
  v60 -> v61  [label="True"];
  v61 -> v62;
  v60 -> v62  [label="False"];
  v62 -> v63;
  v63 -> v64  [label="True"];
  v64 -> v65;
  v63 -> v65  [label="False"];
  v65 -> v66;
  v67 -> v68;
  v68 -> v71  [label="False"];
  v68 -> v72  [label="True"];
  v72 -> v73;
  v73 -> v74  [label="True"];
  v74 -> v75;
  v75 -> v76;
  v76 -> v77  [label="True"];
  v77 -> v78;
  v78 -> v71;
  v76 -> v79  [label="False"];
  v79 -> v80;
  v73 -> v81  [label="False"];
  v81 -> v82  [label="True"];
  v82 -> v83;
  v83 -> v71;
  v81 -> v85  [label="False"];
  v85 -> v86;
  v86 -> v71;
  v84 -> v80;
  v80 -> v68;
  // end-of-graph
}
