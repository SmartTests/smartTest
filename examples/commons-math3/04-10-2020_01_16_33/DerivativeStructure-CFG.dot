digraph DerivativeStructure_CFG {
  // graph-vertices
  v1  [label="76:  DerivativeStructure (final DSCompiler compiler)"];
  v2  [label="78:  this.data = new double[compiler.getSize()]"];
  v3  [label="86:  DerivativeStructure (final int parameters, final int order)"];
  v4  [label="88:  this(DSCompiler.getCompiler(parameters, order))"];
  v5  [label="98:  DerivativeStructure (final int parameters, final int order, final double value)"];
  v6  [label="100:  this(parameters, order)"];
  v7  [label="101:  this.data[0] = value"];
  v8  [label="116:  DerivativeStructure (final int parameters, final int order,  final int index, final double value)"];
  v9  [label="119:  this(parameters, order, value)"];
  v10  [label="121:  if (index >= parameters)"];
  v11  [label="122:  throw new NumberIsTooLargeException(index, parameters, false)"];
  v12  [label="endif"];
  v13  [label="125:  if (order > 0)"];
  v14  [label="127:  data[DSCompiler.getCompiler(index, order).getSize()] = 1.0"];
  v15  [label="endif"];
  v16  [label="140:  DerivativeStructure (final double a1, final DerivativeStructure ds1,  final double a2, final DerivativeStructure ds2)"];
  v17  [label="143:  this(ds1.compiler)"];
  v18  [label="144:  compiler.checkCompatibility(ds2.compiler)"];
  v19  [label="145:  compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0)"];
  v20  [label="158:  DerivativeStructure (final double a1, final DerivativeStructure ds1,  final double a2, final DerivativeStructure ds2,  final double a3, final DerivativeStructure ds3)"];
  v21  [label="162:  this(ds1.compiler)"];
  v22  [label="163:  compiler.checkCompatibility(ds2.compiler)"];
  v23  [label="164:  compiler.checkCompatibility(ds3.compiler)"];
  v24  [label="165:  compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0)"];
  v25  [label="180:  DerivativeStructure (final double a1, final DerivativeStructure ds1,  final double a2, final DerivativeStructure ds2,  final double a3, final DerivativeStructure ds3,  final double a4, final DerivativeStructure ds4)"];
  v26  [label="185:  this(ds1.compiler)"];
  v27  [label="186:  compiler.checkCompatibility(ds2.compiler)"];
  v28  [label="187:  compiler.checkCompatibility(ds3.compiler)"];
  v29  [label="188:  compiler.checkCompatibility(ds4.compiler)"];
  v30  [label="189:  compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0,  a3, ds3.data, 0, a4, ds4.data, 0,  data, 0)"];
  v31  [label="204:  DerivativeStructure (final int parameters, final int order, final double ... derivatives)"];
  v32  [label="206:  this(parameters, order)"];
  v33  [label="207:  if (derivatives.length != data.length)"];
  v34  [label="208:  throw new DimensionMismatchException(derivatives.length, data.length)"];
  v35  [label="endif"];
  v36  [label="210:  System.arraycopy(derivatives, 0, data, 0, data.length)"];
  v37  [label="216:  DerivativeStructure (final DerivativeStructure ds)"];
  v38  [label="217:  this.compiler = ds.compiler"];
  v39  [label="218:  this.data = ds.data.clone()"];
  v40  [label="224:  int getFreeParameters()"];
  v41  [label="225:  return compiler.getFreeParameters();"];
  v42  [label="231:  int getOrder()"];
  v43  [label="232:  return compiler.getOrder();"];
  v44  [label="245:  DerivativeStructure createConstant(final double c)"];
  v45  [label="246:  return new DerivativeStructure(getFreeParameters(), getOrder(), c);"];
  v46  [label="252:  double getReal()"];
  v47  [label="253:  return data[0];"];
  v48  [label="260:  double getValue()"];
  v49  [label="261:  return data[0];"];
  v50  [label="274:  double getPartialDerivative(final int ... orders)"];
  v51  [label="276:  return data[compiler.getPartialDerivativeIndex(orders)];"];
  v52  [label="283:  double[] getAllDerivatives()"];
  v53  [label="284:  return data.clone();"];
  v54  [label="290:  DerivativeStructure add(final double a)"];
  v55  [label="291:  final DerivativeStructure ds = new DerivativeStructure(this)"];
  v56  [label="292:  ds.data[0] += a"];
  v57  [label="293:  return ds;"];
  v58  [label="300:  DerivativeStructure add(final DerivativeStructure a)"];
  v59  [label="302:  compiler.checkCompatibility(a.compiler)"];
  v60  [label="303:  final DerivativeStructure ds = new DerivativeStructure(this)"];
  v61  [label="304:  compiler.add(data, 0, a.data, 0, ds.data, 0)"];
  v62  [label="305:  return ds;"];
  v63  [label="311:  DerivativeStructure subtract(final double a)"];
  v64  [label="312:  return add(-a);"];
  v65  [label="319:  DerivativeStructure subtract(final DerivativeStructure a)"];
  v66  [label="321:  compiler.checkCompatibility(a.compiler)"];
  v67  [label="322:  final DerivativeStructure ds = new DerivativeStructure(this)"];
  v68  [label="323:  compiler.subtract(data, 0, a.data, 0, ds.data, 0)"];
  v69  [label="324:  return ds;"];
  v70  [label="328:  DerivativeStructure multiply(final int n)"];
  v71  [label="329:  return multiply((double) n);"];
  v72  [label="335:  DerivativeStructure multiply(final double a)"];
  v73  [label="336:  final DerivativeStructure ds = new DerivativeStructure(this)"];
  v74  [label="337:  for (  int i = 0 ; i < ds.data.length ;   ++i)"];
  v77  [label="endfor"];
  v78  [label="338:  ds.data[i] *= a"];
  v79  [label="340:  return ds;"];
  v80  [label="347:  DerivativeStructure multiply(final DerivativeStructure a)"];
  v81  [label="349:  compiler.checkCompatibility(a.compiler)"];
  v82  [label="350:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v83  [label="351:  compiler.multiply(data, 0, a.data, 0, result.data, 0)"];
  v84  [label="352:  return result;"];
  v85  [label="358:  DerivativeStructure divide(final double a)"];
  v86  [label="359:  final DerivativeStructure ds = new DerivativeStructure(this)"];
  v87  [label="360:  for (  int i = 0 ; i < ds.data.length ;   ++i)"];
  v90  [label="endfor"];
  v91  [label="361:  ds.data[i] /= a"];
  v92  [label="363:  return ds;"];
  v93  [label="370:  DerivativeStructure divide(final DerivativeStructure a)"];
  v94  [label="372:  compiler.checkCompatibility(a.compiler)"];
  v95  [label="373:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v96  [label="374:  compiler.divide(data, 0, a.data, 0, result.data, 0)"];
  v97  [label="375:  return result;"];
  v98  [label="379:  DerivativeStructure remainder(final double a)"];
  v99  [label="380:  final DerivativeStructure ds = new DerivativeStructure(this)"];
  v100  [label="381:  ds.data[0] = FastMath.IEEEremainder(ds.data[0], a)"];
  v101  [label="382:  return ds;"];
  v102  [label="390:  DerivativeStructure remainder(final DerivativeStructure a)"];
  v103  [label="392:  compiler.checkCompatibility(a.compiler)"];
  v104  [label="393:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v105  [label="394:  compiler.remainder(data, 0, a.data, 0, result.data, 0)"];
  v106  [label="395:  return result;"];
  v107  [label="399:  DerivativeStructure negate()"];
  v108  [label="400:  final DerivativeStructure ds = new DerivativeStructure(compiler)"];
  v109  [label="401:  for (  int i = 0 ; i < ds.data.length ;   ++i)"];
  v112  [label="endfor"];
  v113  [label="402:  ds.data[i] = -data[i]"];
  v114  [label="404:  return ds;"];
  v115  [label="410:  DerivativeStructure abs()"];
  v116  [label="411:  if (Double.doubleToLongBits(data[0]) < 0)"];
  v117  [label="413:  return negate();"];
  v118  [label="endif"];
  v119  [label="415:  return this;"];
  v120  [label="422:  DerivativeStructure ceil()"];
  v121  [label="423:  return new DerivativeStructure(compiler.getFreeParameters(),  compiler.getOrder(),  FastMath.ceil(data[0]));"];
  v122  [label="431:  DerivativeStructure floor()"];
  v123  [label="432:  return new DerivativeStructure(compiler.getFreeParameters(),  compiler.getOrder(),  FastMath.floor(data[0]));"];
  v124  [label="440:  DerivativeStructure rint()"];
  v125  [label="441:  return new DerivativeStructure(compiler.getFreeParameters(),  compiler.getOrder(),  FastMath.rint(data[0]));"];
  v126  [label="447:  long round()"];
  v127  [label="448:  return FastMath.round(data[0]);"];
  v128  [label="454:  DerivativeStructure signum()"];
  v129  [label="455:  return new DerivativeStructure(compiler.getFreeParameters(),  compiler.getOrder(),  FastMath.signum(data[0]));"];
  v130  [label="463:  DerivativeStructure copySign(final DerivativeStructure sign)"];
  v131  [label="464:  long m = Double.doubleToLongBits(data[0])"];
  v132  [label="465:  long s = Double.doubleToLongBits(sign.data[0])"];
  v133  [label="466:  if ((m >= 0 && s >= 0) || (m < 0 && s < 0))"];
  v134  [label="467:  return this;"];
  v135  [label="endif"];
  v136  [label="469:  return negate();"];
  v137  [label="475:  DerivativeStructure copySign(final double sign)"];
  v138  [label="476:  long m = Double.doubleToLongBits(data[0])"];
  v139  [label="477:  long s = Double.doubleToLongBits(sign)"];
  v140  [label="478:  if ((m >= 0 && s >= 0) || (m < 0 && s < 0))"];
  v141  [label="479:  return this;"];
  v142  [label="endif"];
  v143  [label="481:  return negate();"];
  v144  [label="492:  int getExponent()"];
  v145  [label="493:  return FastMath.getExponent(data[0]);"];
  v146  [label="499:  DerivativeStructure scalb(final int n)"];
  v147  [label="500:  final DerivativeStructure ds = new DerivativeStructure(compiler)"];
  v148  [label="501:  for (  int i = 0 ; i < ds.data.length ;   ++i)"];
  v151  [label="endfor"];
  v152  [label="502:  ds.data[i] = FastMath.scalb(data[i], n)"];
  v153  [label="504:  return ds;"];
  v154  [label="512:  DerivativeStructure hypot(final DerivativeStructure y)"];
  v155  [label="515:  compiler.checkCompatibility(y.compiler)"];
  v156  [label="517:  if (Double.isInfinite(data[0]) || Double.isInfinite(y.data[0]))"];
  v157  [label="518:  return new DerivativeStructure(compiler.getFreeParameters(),  compiler.getFreeParameters(),  Double.POSITIVE_INFINITY);"];
  v158  [label="endif"];
  v159  [label="521:  if (Double.isNaN(data[0]) || Double.isNaN(y.data[0]))"];
  v160  [label="522:  return new DerivativeStructure(compiler.getFreeParameters(),  compiler.getFreeParameters(),  Double.NaN);"];
  v161  [label="endif"];
  v162  [label="527:  final int expX = getExponent()"];
  v163  [label="528:  final int expY = y.getExponent()"];
  v164  [label="529:  if (expX > expY + 27)"];
  v165  [label="531:  return abs();"];
  v166  [label="endif"];
  v167  [label="532:  if (expY > expX + 27)"];
  v168  [label="534:  return y.abs();"];
  v169  [label="endif"];
  v170  [label="538:  final int middleExp = (expX + expY) / 2"];
  v171  [label="541:  final DerivativeStructure scaledX = scalb(-middleExp)"];
  v172  [label="542:  final DerivativeStructure scaledY = y.scalb(-middleExp)"];
  v173  [label="545:  final DerivativeStructure scaledH = scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt()"];
  v174  [label="549:  return scaledH.scalb(middleExp);"];
  v175  [label="573:  DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y)"];
  v176  [label="575:  return x.hypot(y);"];
  v177  [label="586:  DerivativeStructure compose(final double ... f)"];
  v178  [label="588:  if (f.length != getOrder() + 1)"];
  v179  [label="589:  throw new DimensionMismatchException(f.length, getOrder() + 1)"];
  v180  [label="endif"];
  v181  [label="591:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v182  [label="592:  compiler.compose(data, 0, f, result.data, 0)"];
  v183  [label="593:  return result;"];
  v184  [label="597:  DerivativeStructure reciprocal()"];
  v185  [label="598:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v186  [label="599:  compiler.pow(data, 0, -1, result.data, 0)"];
  v187  [label="600:  return result;"];
  v188  [label="606:  DerivativeStructure sqrt()"];
  v189  [label="607:  return rootN(2);"];
  v190  [label="613:  DerivativeStructure cbrt()"];
  v191  [label="614:  return rootN(3);"];
  v192  [label="620:  DerivativeStructure rootN(final int n)"];
  v193  [label="621:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v194  [label="622:  compiler.rootN(data, 0, n, result.data, 0)"];
  v195  [label="623:  return result;"];
  v196  [label="627:  Field<DerivativeStructure> getField()"];
  v197  [label="628:  return new Field<DerivativeStructure>() {  /** {@inheritDoc} */ public DerivativeStructure getZero() { return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0); }  /** {@inheritDoc} */ public DerivativeStructure getOne() { return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0); }  /** {@inheritDoc} */ public Class<? extends FieldElement<DerivativeStructure>> getRuntimeClass() { return DerivativeStructure.class; }  };"];
  v198  [label="654:  DerivativeStructure pow(final double a, final DerivativeStructure x)"];
  v199  [label="655:  final DerivativeStructure result = new DerivativeStructure(x.compiler)"];
  v200  [label="656:  x.compiler.pow(a, x.data, 0, result.data, 0)"];
  v201  [label="657:  return result;"];
  v202  [label="663:  DerivativeStructure pow(final double p)"];
  v203  [label="664:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v204  [label="665:  compiler.pow(data, 0, p, result.data, 0)"];
  v205  [label="666:  return result;"];
  v206  [label="672:  DerivativeStructure pow(final int n)"];
  v207  [label="673:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v208  [label="674:  compiler.pow(data, 0, n, result.data, 0)"];
  v209  [label="675:  return result;"];
  v210  [label="683:  DerivativeStructure pow(final DerivativeStructure e)"];
  v211  [label="685:  compiler.checkCompatibility(e.compiler)"];
  v212  [label="686:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v213  [label="687:  compiler.pow(data, 0, e.data, 0, result.data, 0)"];
  v214  [label="688:  return result;"];
  v215  [label="694:  DerivativeStructure exp()"];
  v216  [label="695:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v217  [label="696:  compiler.exp(data, 0, result.data, 0)"];
  v218  [label="697:  return result;"];
  v219  [label="703:  DerivativeStructure expm1()"];
  v220  [label="704:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v221  [label="705:  compiler.expm1(data, 0, result.data, 0)"];
  v222  [label="706:  return result;"];
  v223  [label="712:  DerivativeStructure log()"];
  v224  [label="713:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v225  [label="714:  compiler.log(data, 0, result.data, 0)"];
  v226  [label="715:  return result;"];
  v227  [label="721:  DerivativeStructure log1p()"];
  v228  [label="722:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v229  [label="723:  compiler.log1p(data, 0, result.data, 0)"];
  v230  [label="724:  return result;"];
  v231  [label="730:  DerivativeStructure log10()"];
  v232  [label="731:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v233  [label="732:  compiler.log10(data, 0, result.data, 0)"];
  v234  [label="733:  return result;"];
  v235  [label="739:  DerivativeStructure cos()"];
  v236  [label="740:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v237  [label="741:  compiler.cos(data, 0, result.data, 0)"];
  v238  [label="742:  return result;"];
  v239  [label="748:  DerivativeStructure sin()"];
  v240  [label="749:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v241  [label="750:  compiler.sin(data, 0, result.data, 0)"];
  v242  [label="751:  return result;"];
  v243  [label="757:  DerivativeStructure tan()"];
  v244  [label="758:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v245  [label="759:  compiler.tan(data, 0, result.data, 0)"];
  v246  [label="760:  return result;"];
  v247  [label="766:  DerivativeStructure acos()"];
  v248  [label="767:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v249  [label="768:  compiler.acos(data, 0, result.data, 0)"];
  v250  [label="769:  return result;"];
  v251  [label="775:  DerivativeStructure asin()"];
  v252  [label="776:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v253  [label="777:  compiler.asin(data, 0, result.data, 0)"];
  v254  [label="778:  return result;"];
  v255  [label="784:  DerivativeStructure atan()"];
  v256  [label="785:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v257  [label="786:  compiler.atan(data, 0, result.data, 0)"];
  v258  [label="787:  return result;"];
  v259  [label="793:  DerivativeStructure atan2(final DerivativeStructure x)"];
  v260  [label="795:  compiler.checkCompatibility(x.compiler)"];
  v261  [label="796:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v262  [label="797:  compiler.atan2(data, 0, x.data, 0, result.data, 0)"];
  v263  [label="798:  return result;"];
  v264  [label="809:  DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x)"];
  v265  [label="811:  return y.atan2(x);"];
  v266  [label="817:  DerivativeStructure cosh()"];
  v267  [label="818:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v268  [label="819:  compiler.cosh(data, 0, result.data, 0)"];
  v269  [label="820:  return result;"];
  v270  [label="826:  DerivativeStructure sinh()"];
  v271  [label="827:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v272  [label="828:  compiler.sinh(data, 0, result.data, 0)"];
  v273  [label="829:  return result;"];
  v274  [label="835:  DerivativeStructure tanh()"];
  v275  [label="836:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v276  [label="837:  compiler.tanh(data, 0, result.data, 0)"];
  v277  [label="838:  return result;"];
  v278  [label="844:  DerivativeStructure acosh()"];
  v279  [label="845:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v280  [label="846:  compiler.acosh(data, 0, result.data, 0)"];
  v281  [label="847:  return result;"];
  v282  [label="853:  DerivativeStructure asinh()"];
  v283  [label="854:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v284  [label="855:  compiler.asinh(data, 0, result.data, 0)"];
  v285  [label="856:  return result;"];
  v286  [label="862:  DerivativeStructure atanh()"];
  v287  [label="863:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v288  [label="864:  compiler.atanh(data, 0, result.data, 0)"];
  v289  [label="865:  return result;"];
  v290  [label="871:  DerivativeStructure toDegrees()"];
  v291  [label="872:  final DerivativeStructure ds = new DerivativeStructure(compiler)"];
  v292  [label="873:  for (  int i = 0 ; i < ds.data.length ;   ++i)"];
  v295  [label="endfor"];
  v296  [label="874:  ds.data[i] = FastMath.toDegrees(data[i])"];
  v297  [label="876:  return ds;"];
  v298  [label="882:  DerivativeStructure toRadians()"];
  v299  [label="883:  final DerivativeStructure ds = new DerivativeStructure(compiler)"];
  v300  [label="884:  for (  int i = 0 ; i < ds.data.length ;   ++i)"];
  v303  [label="endfor"];
  v304  [label="885:  ds.data[i] = FastMath.toRadians(data[i])"];
  v305  [label="887:  return ds;"];
  v306  [label="895:  double taylor(final double ... delta)"];
  v307  [label="896:  return compiler.taylor(data, 0, delta);"];
  v308  [label="904:  DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b)"];
  v309  [label="908:  final double[] aDouble = new double[a.length]"];
  v310  [label="909:  for (  int i = 0 ; i < a.length ;   ++i)"];
  v313  [label="endfor"];
  v314  [label="910:  aDouble[i] = a[i].getValue()"];
  v315  [label="912:  final double[] bDouble = new double[b.length]"];
  v316  [label="913:  for (  int i = 0 ; i < b.length ;   ++i)"];
  v319  [label="endfor"];
  v320  [label="914:  bDouble[i] = b[i].getValue()"];
  v321  [label="916:  final double accurateValue = MathArrays.linearCombination(aDouble, bDouble)"];
  v322  [label="919:  DerivativeStructure simpleValue = a[0].getField().getZero()"];
  v323  [label="920:  for (  int i = 0 ; i < a.length ;   ++i)"];
  v326  [label="endfor"];
  v327  [label="921:  simpleValue = simpleValue.add(a[i].multiply(b[i]))"];
  v328  [label="925:  final double[] all = simpleValue.getAllDerivatives()"];
  v329  [label="926:  all[0] = accurateValue"];
  v330  [label="927:  return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);"];
  v331  [label="936:  DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b)"];
  v332  [label="940:  final double[] bDouble = new double[b.length]"];
  v333  [label="941:  for (  int i = 0 ; i < b.length ;   ++i)"];
  v336  [label="endfor"];
  v337  [label="942:  bDouble[i] = b[i].getValue()"];
  v338  [label="944:  final double accurateValue = MathArrays.linearCombination(a, bDouble)"];
  v339  [label="947:  DerivativeStructure simpleValue = b[0].getField().getZero()"];
  v340  [label="948:  for (  int i = 0 ; i < a.length ;   ++i)"];
  v343  [label="endfor"];
  v344  [label="949:  simpleValue = simpleValue.add(b[i].multiply(a[i]))"];
  v345  [label="953:  final double[] all = simpleValue.getAllDerivatives()"];
  v346  [label="954:  all[0] = accurateValue"];
  v347  [label="955:  return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);"];
  v348  [label="964:  DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,  final DerivativeStructure a2, final DerivativeStructure b2)"];
  v349  [label="969:  final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(), a2.getValue(), b2.getValue())"];
  v350  [label="973:  final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2))"];
  v351  [label="976:  final double[] all = simpleValue.getAllDerivatives()"];
  v352  [label="977:  all[0] = accurateValue"];
  v353  [label="978:  return new DerivativeStructure(getFreeParameters(), getOrder(), all);"];
  v354  [label="987:  DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,  final double a2, final DerivativeStructure b2)"];
  v355  [label="992:  final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(), a2, b2.getValue())"];
  v356  [label="996:  final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2))"];
  v357  [label="999:  final double[] all = simpleValue.getAllDerivatives()"];
  v358  [label="1000:  all[0] = accurateValue"];
  v359  [label="1001:  return new DerivativeStructure(getFreeParameters(), getOrder(), all);"];
  v360  [label="1010:  DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,  final DerivativeStructure a2, final DerivativeStructure b2,  final DerivativeStructure a3, final DerivativeStructure b3)"];
  v361  [label="1016:  final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(), a2.getValue(), b2.getValue(), a3.getValue(), b3.getValue())"];
  v362  [label="1021:  final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3))"];
  v363  [label="1024:  final double[] all = simpleValue.getAllDerivatives()"];
  v364  [label="1025:  all[0] = accurateValue"];
  v365  [label="1026:  return new DerivativeStructure(getFreeParameters(), getOrder(), all);"];
  v366  [label="1035:  DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,  final double a2, final DerivativeStructure b2,  final double a3, final DerivativeStructure b3)"];
  v367  [label="1041:  final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(), a2, b2.getValue(), a3, b3.getValue())"];
  v368  [label="1046:  final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3))"];
  v369  [label="1049:  final double[] all = simpleValue.getAllDerivatives()"];
  v370  [label="1050:  all[0] = accurateValue"];
  v371  [label="1051:  return new DerivativeStructure(getFreeParameters(), getOrder(), all);"];
  v372  [label="1060:  DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,  final DerivativeStructure a2, final DerivativeStructure b2,  final DerivativeStructure a3, final DerivativeStructure b3,  final DerivativeStructure a4, final DerivativeStructure b4)"];
  v373  [label="1067:  final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(), a2.getValue(), b2.getValue(), a3.getValue(), b3.getValue(), a4.getValue(), b4.getValue())"];
  v374  [label="1073:  final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4))"];
  v375  [label="1076:  final double[] all = simpleValue.getAllDerivatives()"];
  v376  [label="1077:  all[0] = accurateValue"];
  v377  [label="1078:  return new DerivativeStructure(getFreeParameters(), getOrder(), all);"];
  v378  [label="1087:  DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,  final double a2, final DerivativeStructure b2,  final double a3, final DerivativeStructure b3,  final double a4, final DerivativeStructure b4)"];
  v379  [label="1094:  final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(), a2, b2.getValue(), a3, b3.getValue(), a4, b4.getValue())"];
  v380  [label="1100:  final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4))"];
  v381  [label="1103:  final double[] all = simpleValue.getAllDerivatives()"];
  v382  [label="1104:  all[0] = accurateValue"];
  v383  [label="1105:  return new DerivativeStructure(getFreeParameters(), getOrder(), all);"];
  v384  [label="1120:  boolean equals(Object other)"];
  v385  [label="1122:  if (this == other)"];
  v386  [label="1123:  return true;"];
  v387  [label="endif"];
  v388  [label="1126:  if (other instanceof DerivativeStructure)"];
  v389  [label="1127:  final DerivativeStructure rhs = (DerivativeStructure)other"];
  v390  [label="1128:  return (getFreeParameters() == rhs.getFreeParameters()) &&  (getOrder() == rhs.getOrder()) &&  MathArrays.equals(data, rhs.data);"];
  v391  [label="endif"];
  v392  [label="1133:  return false;"];
  v393  [label="1143:  int hashCode()"];
  v394  [label="1144:  return 227 + 229 * getFreeParameters() + 233 * getOrder() + 239 * MathUtils.hash(data);"];
  v395  [label="1151:  Object writeReplace()"];
  v396  [label="1152:  return new DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data);"];
  v397  [label="1181:  DataTransferObject (final int variables, final int order, final double[] data)"];
  v398  [label="1182:  this.variables = variables"];
  v399  [label="1183:  this.order = order"];
  v400  [label="1184:  this.data  = data"];
  v401  [label="1190:  Object readResolve()"];
  v402  [label="1191:  return new DerivativeStructure(variables, order, data);"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v6 -> v7;
  v8 -> v9;
  v9 -> v10;
  v10 -> v11  [label="True"];
  v10 -> v12  [label="False"];
  v12 -> v13;
  v13 -> v14  [label="True"];
  v14 -> v15;
  v13 -> v15  [label="False"];
  v16 -> v17;
  v17 -> v18;
  v18 -> v19;
  v20 -> v21;
  v21 -> v22;
  v22 -> v23;
  v23 -> v24;
  v25 -> v26;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v31 -> v32;
  v32 -> v33;
  v33 -> v34  [label="True"];
  v33 -> v35  [label="False"];
  v35 -> v36;
  v37 -> v38;
  v38 -> v39;
  v40 -> v41;
  v42 -> v43;
  v44 -> v45;
  v46 -> v47;
  v48 -> v49;
  v50 -> v51;
  v52 -> v53;
  v54 -> v55;
  v55 -> v56;
  v56 -> v57;
  v58 -> v59;
  v59 -> v60;
  v60 -> v61;
  v61 -> v62;
  v63 -> v64;
  v65 -> v66;
  v66 -> v67;
  v67 -> v68;
  v68 -> v69;
  v70 -> v71;
  v72 -> v73;
  v73 -> v74;
  v74 -> v77  [label="False"];
  v74 -> v78  [label="True"];
  v78 -> v74;
  v77 -> v79;
  v80 -> v81;
  v81 -> v82;
  v82 -> v83;
  v83 -> v84;
  v85 -> v86;
  v86 -> v87;
  v87 -> v90  [label="False"];
  v87 -> v91  [label="True"];
  v91 -> v87;
  v90 -> v92;
  v93 -> v94;
  v94 -> v95;
  v95 -> v96;
  v96 -> v97;
  v98 -> v99;
  v99 -> v100;
  v100 -> v101;
  v102 -> v103;
  v103 -> v104;
  v104 -> v105;
  v105 -> v106;
  v107 -> v108;
  v108 -> v109;
  v109 -> v112  [label="False"];
  v109 -> v113  [label="True"];
  v113 -> v109;
  v112 -> v114;
  v115 -> v116;
  v116 -> v117  [label="True"];
  v116 -> v119  [label="False"];
  v120 -> v121;
  v122 -> v123;
  v124 -> v125;
  v126 -> v127;
  v128 -> v129;
  v130 -> v131;
  v131 -> v132;
  v132 -> v133;
  v133 -> v134  [label="True"];
  v133 -> v135  [label="False"];
  v135 -> v136;
  v137 -> v138;
  v138 -> v139;
  v139 -> v140;
  v140 -> v141  [label="True"];
  v140 -> v142  [label="False"];
  v142 -> v143;
  v144 -> v145;
  v146 -> v147;
  v147 -> v148;
  v148 -> v151  [label="False"];
  v148 -> v152  [label="True"];
  v152 -> v148;
  v151 -> v153;
  v154 -> v155;
  v155 -> v156;
  v156 -> v157  [label="True"];
  v156 -> v159  [label="False"];
  v159 -> v160  [label="True"];
  v159 -> v162  [label="False"];
  v162 -> v163;
  v163 -> v164;
  v164 -> v165  [label="True"];
  v164 -> v167  [label="False"];
  v167 -> v168  [label="True"];
  v167 -> v170  [label="False"];
  v170 -> v171;
  v171 -> v172;
  v172 -> v173;
  v173 -> v174;
  v169 -> v166;
  v166 -> v161;
  v161 -> v158;
  v175 -> v176;
  v177 -> v178;
  v178 -> v179  [label="True"];
  v178 -> v180  [label="False"];
  v180 -> v181;
  v181 -> v182;
  v182 -> v183;
  v184 -> v185;
  v185 -> v186;
  v186 -> v187;
  v188 -> v189;
  v190 -> v191;
  v192 -> v193;
  v193 -> v194;
  v194 -> v195;
  v196 -> v197;
  v198 -> v199;
  v199 -> v200;
  v200 -> v201;
  v202 -> v203;
  v203 -> v204;
  v204 -> v205;
  v206 -> v207;
  v207 -> v208;
  v208 -> v209;
  v210 -> v211;
  v211 -> v212;
  v212 -> v213;
  v213 -> v214;
  v215 -> v216;
  v216 -> v217;
  v217 -> v218;
  v219 -> v220;
  v220 -> v221;
  v221 -> v222;
  v223 -> v224;
  v224 -> v225;
  v225 -> v226;
  v227 -> v228;
  v228 -> v229;
  v229 -> v230;
  v231 -> v232;
  v232 -> v233;
  v233 -> v234;
  v235 -> v236;
  v236 -> v237;
  v237 -> v238;
  v239 -> v240;
  v240 -> v241;
  v241 -> v242;
  v243 -> v244;
  v244 -> v245;
  v245 -> v246;
  v247 -> v248;
  v248 -> v249;
  v249 -> v250;
  v251 -> v252;
  v252 -> v253;
  v253 -> v254;
  v255 -> v256;
  v256 -> v257;
  v257 -> v258;
  v259 -> v260;
  v260 -> v261;
  v261 -> v262;
  v262 -> v263;
  v264 -> v265;
  v266 -> v267;
  v267 -> v268;
  v268 -> v269;
  v270 -> v271;
  v271 -> v272;
  v272 -> v273;
  v274 -> v275;
  v275 -> v276;
  v276 -> v277;
  v278 -> v279;
  v279 -> v280;
  v280 -> v281;
  v282 -> v283;
  v283 -> v284;
  v284 -> v285;
  v286 -> v287;
  v287 -> v288;
  v288 -> v289;
  v290 -> v291;
  v291 -> v292;
  v292 -> v295  [label="False"];
  v292 -> v296  [label="True"];
  v296 -> v292;
  v295 -> v297;
  v298 -> v299;
  v299 -> v300;
  v300 -> v303  [label="False"];
  v300 -> v304  [label="True"];
  v304 -> v300;
  v303 -> v305;
  v306 -> v307;
  v308 -> v309;
  v309 -> v310;
  v310 -> v313  [label="False"];
  v310 -> v314  [label="True"];
  v314 -> v310;
  v313 -> v315;
  v315 -> v316;
  v316 -> v319  [label="False"];
  v316 -> v320  [label="True"];
  v320 -> v316;
  v319 -> v321;
  v321 -> v322;
  v322 -> v323;
  v323 -> v326  [label="False"];
  v323 -> v327  [label="True"];
  v327 -> v323;
  v326 -> v328;
  v328 -> v329;
  v329 -> v330;
  v331 -> v332;
  v332 -> v333;
  v333 -> v336  [label="False"];
  v333 -> v337  [label="True"];
  v337 -> v333;
  v336 -> v338;
  v338 -> v339;
  v339 -> v340;
  v340 -> v343  [label="False"];
  v340 -> v344  [label="True"];
  v344 -> v340;
  v343 -> v345;
  v345 -> v346;
  v346 -> v347;
  v348 -> v349;
  v349 -> v350;
  v350 -> v351;
  v351 -> v352;
  v352 -> v353;
  v354 -> v355;
  v355 -> v356;
  v356 -> v357;
  v357 -> v358;
  v358 -> v359;
  v360 -> v361;
  v361 -> v362;
  v362 -> v363;
  v363 -> v364;
  v364 -> v365;
  v366 -> v367;
  v367 -> v368;
  v368 -> v369;
  v369 -> v370;
  v370 -> v371;
  v372 -> v373;
  v373 -> v374;
  v374 -> v375;
  v375 -> v376;
  v376 -> v377;
  v378 -> v379;
  v379 -> v380;
  v380 -> v381;
  v381 -> v382;
  v382 -> v383;
  v384 -> v385;
  v385 -> v386  [label="True"];
  v385 -> v387  [label="False"];
  v387 -> v388;
  v388 -> v389  [label="True"];
  v389 -> v390;
  v388 -> v391  [label="False"];
  v391 -> v392;
  v393 -> v394;
  v395 -> v396;
  v397 -> v398;
  v398 -> v399;
  v399 -> v400;
  v401 -> v402;
  // end-of-graph
}
