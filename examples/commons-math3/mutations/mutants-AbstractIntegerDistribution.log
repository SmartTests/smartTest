1:EVR:<NEW_CLASS(org.apache.commons.math3.random.RandomDataImpl)>:<DEFAULT>:org.apache.commons.math3.distribution.AbstractIntegerDistribution:48:new RandomDataImpl() |==> null
2:EVR:<IDENTIFIER(org.apache.commons.math3.random.RandomGenerator)>:<DEFAULT>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@<init>(org.apache.commons.math3.random.RandomGenerator):72:rng |==> null
3:ROR:<(int,int):!=(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@cumulativeProbability(int,int):82:x1 < x0 |==> x1 != x0
4:ROR:<(int,int):<=(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@cumulativeProbability(int,int):82:x1 < x0 |==> x1 <= x0
5:ROR:<(int,int):FALSE(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@cumulativeProbability(int,int):82:x1 < x0 |==> false
6:LVR:TRUE:FALSE:org.apache.commons.math3.distribution.AbstractIntegerDistribution@cumulativeProbability(int,int):84:true |==> false
7:AOR:-(double,double):%(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@cumulativeProbability(int,int):86:cumulativeProbability(x1) - cumulativeProbability(x0) |==> cumulativeProbability(x1) % cumulativeProbability(x0)
8:AOR:-(double,double):*(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@cumulativeProbability(int,int):86:cumulativeProbability(x1) - cumulativeProbability(x0) |==> cumulativeProbability(x1) * cumulativeProbability(x0)
9:AOR:-(double,double):+(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@cumulativeProbability(int,int):86:cumulativeProbability(x1) - cumulativeProbability(x0) |==> cumulativeProbability(x1) + cumulativeProbability(x0)
10:AOR:-(double,double):/(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@cumulativeProbability(int,int):86:cumulativeProbability(x1) - cumulativeProbability(x0) |==> cumulativeProbability(x1) / cumulativeProbability(x0)
11:LVR:0:POS:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):101:0.0 |==> 1.0
12:LVR:0:NEG:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):101:0.0 |==> -1.0
13:ROR:<(double,double):!=(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):101:p < 0.0 |==> p != 0.0
14:ROR:<(double,double):<=(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):101:p < 0.0 |==> p <= 0.0
15:ROR:<(double,double):FALSE(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):101:p < 0.0 |==> false
16:LVR:POS:0:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):101:1.0 |==> 0.0
17:LVR:POS:NEG:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):101:1.0 |==> -1.0
18:ROR:>(double,double):!=(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):101:p > 1.0 |==> p != 1.0
19:ROR:>(double,double):>=(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):101:p > 1.0 |==> p >= 1.0
20:ROR:>(double,double):FALSE(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):101:p > 1.0 |==> false
21:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):101:p < 0.0 || p > 1.0 |==> p < 0.0 != p > 1.0
22:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):101:p < 0.0 || p > 1.0 |==> p < 0.0
23:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):101:p < 0.0 || p > 1.0 |==> p > 1.0
24:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):101:p < 0.0 || p > 1.0 |==> true
25:LVR:0:POS:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):102:0 |==> 1
26:LVR:0:NEG:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):102:0 |==> -1
27:LVR:POS:0:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):102:1 |==> 0
28:LVR:POS:NEG:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):102:1 |==> -1
29:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):105:getSupportLowerBound() |==> 0
30:LVR:0:POS:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):106:0.0 |==> 1.0
31:LVR:0:NEG:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):106:0.0 |==> -1.0
32:ROR:==(double,double):<=(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):106:p == 0.0 |==> p <= 0.0
33:ROR:==(double,double):>=(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):106:p == 0.0 |==> p >= 0.0
34:ROR:==(double,double):FALSE(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):106:p == 0.0 |==> false
35:STD:<RETURN>:<NO-OP>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):107:return lower; |==> <NO-OP>
36:ROR:==(int,int):<=(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):109:lower == Integer.MIN_VALUE |==> lower <= Integer.MIN_VALUE
37:ROR:==(int,int):>=(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):109:lower == Integer.MIN_VALUE |==> lower >= Integer.MIN_VALUE
38:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):109:lower == Integer.MIN_VALUE |==> false
39:ROR:>=(double,double):==(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):110:checkedCumulativeProbability(lower) >= p |==> checkedCumulativeProbability(lower) == p
40:ROR:>=(double,double):>(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):110:checkedCumulativeProbability(lower) >= p |==> checkedCumulativeProbability(lower) > p
41:ROR:>=(double,double):TRUE(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):110:checkedCumulativeProbability(lower) >= p |==> true
42:STD:<RETURN>:<NO-OP>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):111:return lower; |==> <NO-OP>
43:LVR:POS:0:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):114:1 |==> 0
44:LVR:POS:NEG:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):114:1 |==> -1
45:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):114:lower -= 1 |==> <NO-OP>
46:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):118:getSupportUpperBound() |==> 0
47:LVR:POS:0:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):119:1.0 |==> 0.0
48:LVR:POS:NEG:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):119:1.0 |==> -1.0
49:ROR:==(double,double):<=(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):119:p == 1.0 |==> p <= 1.0
50:ROR:==(double,double):>=(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):119:p == 1.0 |==> p >= 1.0
51:ROR:==(double,double):FALSE(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):119:p == 1.0 |==> false
52:STD:<RETURN>:<NO-OP>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):120:return upper; |==> <NO-OP>
53:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):125:getNumericalMean() |==> 0.0
54:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):126:FastMath.sqrt(getNumericalVariance()) |==> 0.0
55:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):127:Double.isInfinite(mu) || Double.isNaN(mu) |==> Double.isInfinite(mu) != Double.isNaN(mu)
56:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):127:Double.isInfinite(mu) || Double.isNaN(mu) |==> Double.isInfinite(mu)
57:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):127:Double.isInfinite(mu) || Double.isNaN(mu) |==> Double.isNaN(mu)
58:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):127:Double.isInfinite(mu) || Double.isNaN(mu) |==> true
59:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):127:Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) |==> (Double.isInfinite(mu) || Double.isNaN(mu)) != Double.isInfinite(sigma)
60:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):127:Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) |==> Double.isInfinite(mu) || Double.isNaN(mu)
61:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):128:Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) |==> Double.isInfinite(sigma)
62:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):127:Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) |==> true
63:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):127:Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma) |==> (Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma)) != Double.isNaN(sigma)
64:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):127:Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma) |==> Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma)
65:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):128:Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma) |==> Double.isNaN(sigma)
66:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):128:Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma) |==> true
67:LVR:0:POS:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):128:0.0 |==> 1.0
68:LVR:0:NEG:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):128:0.0 |==> -1.0
69:ROR:==(double,double):<=(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):128:sigma == 0.0 |==> sigma <= 0.0
70:ROR:==(double,double):>=(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):128:sigma == 0.0 |==> sigma >= 0.0
71:ROR:==(double,double):FALSE(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):128:sigma == 0.0 |==> false
72:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):127:Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0 |==> (Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma)) != (sigma == 0.0)
73:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):127:Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0 |==> Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma)
74:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):128:Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0 |==> sigma == 0.0
75:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):128:Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0 |==> true
76:COR:chebyshevApplies:TRUE:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):129:chebyshevApplies |==> false
77:COR:chebyshevApplies:FALSE:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):129:chebyshevApplies |==> true
78:LVR:POS:0:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):130:1.0 |==> 0.0
79:LVR:POS:NEG:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):130:1.0 |==> -1.0
80:AOR:-(double,double):%(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):130:1.0 - p |==> 1.0 % p
81:AOR:-(double,double):*(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):130:1.0 - p |==> 1.0 * p
82:AOR:-(double,double):+(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):130:1.0 - p |==> 1.0 + p
83:AOR:-(double,double):/(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):130:1.0 - p |==> 1.0 / p
84:AOR:/(double,double):%(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):130:(1.0 - p) / p |==> (1.0 - p) % p
85:AOR:/(double,double):*(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):130:(1.0 - p) / p |==> (1.0 - p) * p
86:AOR:/(double,double):+(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):130:(1.0 - p) / p |==> (1.0 - p) + p
87:AOR:/(double,double):-(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):130:(1.0 - p) / p |==> (1.0 - p) - p
88:AOR:*(double,double):%(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):131:k * sigma |==> k % sigma
89:AOR:*(double,double):+(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):131:k * sigma |==> k + sigma
90:AOR:*(double,double):-(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):131:k * sigma |==> k - sigma
91:AOR:*(double,double):/(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):131:k * sigma |==> k / sigma
92:AOR:-(double,double):%(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):131:mu - k * sigma |==> mu % (k * sigma)
93:AOR:-(double,double):*(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):131:mu - k * sigma |==> mu * (k * sigma)
94:AOR:-(double,double):+(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):131:mu - k * sigma |==> mu + k * sigma
95:AOR:-(double,double):/(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):131:mu - k * sigma |==> mu / (k * sigma)
96:ROR:>(double,double):!=(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):132:tmp > lower |==> tmp != lower
97:ROR:>(double,double):>=(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):132:tmp > lower |==> tmp >= lower
98:ROR:>(double,double):FALSE(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):132:tmp > lower |==> false
99:LVR:POS:0:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):133:1 |==> 0
100:LVR:POS:NEG:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):133:1 |==> -1
101:AOR:-(int,int):%(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):133:((int)Math.ceil(tmp)) - 1 |==> ((int)Math.ceil(tmp)) % 1
102:AOR:-(int,int):*(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):133:((int)Math.ceil(tmp)) - 1 |==> ((int)Math.ceil(tmp)) * 1
103:AOR:-(int,int):+(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):133:((int)Math.ceil(tmp)) - 1 |==> ((int)Math.ceil(tmp)) + 1
104:AOR:-(int,int):/(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):133:((int)Math.ceil(tmp)) - 1 |==> ((int)Math.ceil(tmp)) / 1
105:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):133:lower = ((int)Math.ceil(tmp)) - 1 |==> <NO-OP>
106:LVR:POS:0:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):135:1.0 |==> 0.0
107:LVR:POS:NEG:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):135:1.0 |==> -1.0
108:AOR:/(double,double):%(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):135:1.0 / k |==> 1.0 % k
109:AOR:/(double,double):*(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):135:1.0 / k |==> 1.0 * k
110:AOR:/(double,double):+(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):135:1.0 / k |==> 1.0 + k
111:AOR:/(double,double):-(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):135:1.0 / k |==> 1.0 - k
112:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):135:k = 1.0 / k |==> <NO-OP>
113:AOR:*(double,double):%(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):136:k * sigma |==> k % sigma
114:AOR:*(double,double):+(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):136:k * sigma |==> k + sigma
115:AOR:*(double,double):-(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):136:k * sigma |==> k - sigma
116:AOR:*(double,double):/(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):136:k * sigma |==> k / sigma
117:AOR:+(double,double):%(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):136:mu + k * sigma |==> mu % (k * sigma)
118:AOR:+(double,double):*(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):136:mu + k * sigma |==> mu * (k * sigma)
119:AOR:+(double,double):-(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):136:mu + k * sigma |==> mu - k * sigma
120:AOR:+(double,double):/(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):136:mu + k * sigma |==> mu / (k * sigma)
121:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):136:tmp = mu + k * sigma |==> <NO-OP>
122:ROR:<(double,double):!=(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):137:tmp < upper |==> tmp != upper
123:ROR:<(double,double):<=(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):137:tmp < upper |==> tmp <= upper
124:ROR:<(double,double):FALSE(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):137:tmp < upper |==> false
125:LVR:POS:0:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):138:1 |==> 0
126:LVR:POS:NEG:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):138:1 |==> -1
127:AOR:-(int,int):%(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):138:((int)Math.ceil(tmp)) - 1 |==> ((int)Math.ceil(tmp)) % 1
128:AOR:-(int,int):*(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):138:((int)Math.ceil(tmp)) - 1 |==> ((int)Math.ceil(tmp)) * 1
129:AOR:-(int,int):+(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):138:((int)Math.ceil(tmp)) - 1 |==> ((int)Math.ceil(tmp)) + 1
130:AOR:-(int,int):/(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):138:((int)Math.ceil(tmp)) - 1 |==> ((int)Math.ceil(tmp)) / 1
131:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):138:upper = ((int)Math.ceil(tmp)) - 1 |==> <NO-OP>
132:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@inverseCumulativeProbability(double):142:solveInverseCumulativeProbability(p, lower, upper) |==> 0
133:LVR:POS:0:org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):158:1 |==> 0
134:LVR:POS:NEG:org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):158:1 |==> -1
135:AOR:+(int,int):%(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):158:lower + 1 |==> lower % 1
136:AOR:+(int,int):*(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):158:lower + 1 |==> lower * 1
137:AOR:+(int,int):-(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):158:lower + 1 |==> lower - 1
138:AOR:+(int,int):/(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):158:lower + 1 |==> lower / 1
139:ROR:<(int,int):!=(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):158:lower + 1 < upper |==> lower + 1 != upper
140:ROR:<(int,int):<=(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):158:lower + 1 < upper |==> lower + 1 <= upper
141:ROR:<(int,int):FALSE(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):158:lower + 1 < upper |==> false
142:AOR:+(int,int):%(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):159:lower + upper |==> lower % upper
143:AOR:+(int,int):*(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):159:lower + upper |==> lower * upper
144:AOR:+(int,int):-(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):159:lower + upper |==> lower - upper
145:AOR:+(int,int):/(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):159:lower + upper |==> lower / upper
146:LVR:POS:0:org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):159:2 |==> 0
147:LVR:POS:NEG:org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):159:2 |==> -2
148:AOR:/(int,int):%(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):159:(lower + upper) / 2 |==> (lower + upper) % 2
149:AOR:/(int,int):*(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):159:(lower + upper) / 2 |==> (lower + upper) * 2
150:AOR:/(int,int):+(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):159:(lower + upper) / 2 |==> (lower + upper) + 2
151:AOR:/(int,int):-(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):159:(lower + upper) / 2 |==> (lower + upper) - 2
152:ROR:<(int,int):!=(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):160:xm < lower |==> xm != lower
153:ROR:<(int,int):<=(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):160:xm < lower |==> xm <= lower
154:ROR:<(int,int):FALSE(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):160:xm < lower |==> false
155:ROR:>(int,int):!=(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):160:xm > upper |==> xm != upper
156:ROR:>(int,int):>=(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):160:xm > upper |==> xm >= upper
157:ROR:>(int,int):FALSE(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):160:xm > upper |==> false
158:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):160:xm < lower || xm > upper |==> xm < lower != xm > upper
159:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):160:xm < lower || xm > upper |==> xm < lower
160:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):160:xm < lower || xm > upper |==> xm > upper
161:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):160:xm < lower || xm > upper |==> true
162:AOR:-(int,int):%(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):166:upper - lower |==> upper % lower
163:AOR:-(int,int):*(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):166:upper - lower |==> upper * lower
164:AOR:-(int,int):+(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):166:upper - lower |==> upper + lower
165:AOR:-(int,int):/(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):166:upper - lower |==> upper / lower
166:LVR:POS:0:org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):166:2 |==> 0
167:LVR:POS:NEG:org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):166:2 |==> -2
168:AOR:/(int,int):%(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):166:(upper - lower) / 2 |==> (upper - lower) % 2
169:AOR:/(int,int):*(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):166:(upper - lower) / 2 |==> (upper - lower) * 2
170:AOR:/(int,int):+(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):166:(upper - lower) / 2 |==> (upper - lower) + 2
171:AOR:/(int,int):-(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):166:(upper - lower) / 2 |==> (upper - lower) - 2
172:AOR:+(int,int):%(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):166:lower + (upper - lower) / 2 |==> lower % ((upper - lower) / 2)
173:AOR:+(int,int):*(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):166:lower + (upper - lower) / 2 |==> lower * ((upper - lower) / 2)
174:AOR:+(int,int):-(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):166:lower + (upper - lower) / 2 |==> lower - (upper - lower) / 2
175:AOR:+(int,int):/(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):166:lower + (upper - lower) / 2 |==> lower / ((upper - lower) / 2)
176:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):166:xm = lower + (upper - lower) / 2 |==> <NO-OP>
177:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):169:checkedCumulativeProbability(xm) |==> 0.0
178:ROR:>=(double,double):==(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):170:pm >= p |==> pm == p
179:ROR:>=(double,double):>(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):170:pm >= p |==> pm > p
180:ROR:>=(double,double):TRUE(double,double):org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):170:pm >= p |==> true
181:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):171:upper = xm |==> <NO-OP>
182:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):173:lower = xm |==> <NO-OP>
183:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@solveInverseCumulativeProbability(double,int,int):176:upper |==> 0
184:STD:<CALL>:<NO-OP>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@reseedRandomGenerator(long):181:random.setSeed(seed) |==> <NO-OP>
185:STD:<CALL>:<NO-OP>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@reseedRandomGenerator(long):182:randomData.reSeed(seed) |==> <NO-OP>
186:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@sample():193:inverseCumulativeProbability(random.nextDouble()) |==> 0
187:LVR:0:POS:org.apache.commons.math3.distribution.AbstractIntegerDistribution@sample(int):203:0 |==> 1
188:LVR:0:NEG:org.apache.commons.math3.distribution.AbstractIntegerDistribution@sample(int):203:0 |==> -1
189:ROR:<=(int,int):<(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@sample(int):203:sampleSize <= 0 |==> sampleSize < 0
190:ROR:<=(int,int):==(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@sample(int):203:sampleSize <= 0 |==> sampleSize == 0
191:ROR:<=(int,int):TRUE(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@sample(int):203:sampleSize <= 0 |==> true
192:EVR:<NEW_ARRAY(int[])>:<DEFAULT>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@sample(int):207:new int[sampleSize] |==> null
193:LVR:0:POS:org.apache.commons.math3.distribution.AbstractIntegerDistribution@sample(int):208:0 |==> 1
194:LVR:0:NEG:org.apache.commons.math3.distribution.AbstractIntegerDistribution@sample(int):208:0 |==> -1
195:ROR:<(int,int):!=(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@sample(int):208:i < sampleSize |==> i != sampleSize
196:ROR:<(int,int):<=(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@sample(int):208:i < sampleSize |==> i <= sampleSize
197:ROR:<(int,int):FALSE(int,int):org.apache.commons.math3.distribution.AbstractIntegerDistribution@sample(int):208:i < sampleSize |==> false
198:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@sample(int):209:out[i] = sample() |==> <NO-OP>
199:EVR:<IDENTIFIER(int[])>:<DEFAULT>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@sample(int):211:out |==> null
200:EVR:<MEMBER_SELECT(double)>:<DEFAULT>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@checkedCumulativeProbability(int):227:Double.NaN |==> 0.0
201:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@checkedCumulativeProbability(int):228:result = cumulativeProbability(argument) |==> <NO-OP>
202:COR:Double.isNaN(result):TRUE:org.apache.commons.math3.distribution.AbstractIntegerDistribution@checkedCumulativeProbability(int):229:Double.isNaN(result) |==> false
203:COR:Double.isNaN(result):FALSE:org.apache.commons.math3.distribution.AbstractIntegerDistribution@checkedCumulativeProbability(int):229:Double.isNaN(result) |==> true
204:EVR:<IDENTIFIER(double)>:<DEFAULT>:org.apache.commons.math3.distribution.AbstractIntegerDistribution@checkedCumulativeProbability(int):233:result |==> 0.0
