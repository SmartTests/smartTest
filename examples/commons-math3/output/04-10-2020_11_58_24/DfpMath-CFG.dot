digraph DfpMath_CFG {
  // graph-vertices
  v1  [label="33:  DfpMath ()"];
  v2  [label="45:  Dfp[] split(final DfpField field, final String a)"];
  v3  [label="46:  Dfp result[] = new Dfp[0]"];
  v4  [label="47:  char[] buf"];
  v5  [label="48:  boolean leading = true"];
  v6  [label="49:  int sp = 0"];
  v7  [label="50:  int sig = 0"];
  v8  [label="52:  buf = new char[a.length()]"];
  v9  [label="54:  for (  int i = 0 ; i < buf.length ;   i++)"];
  v12  [label="endfor"];
  v13  [label="55:  buf[i] = a.charAt(i)"];
  v14  [label="57:  if (buf[i] >= '1' && buf[i] <= '9')"];
  v15  [label="58:  leading = false"];
  v16  [label="endif"];
  v17  [label="61:  if (buf[i] == '.')"];
  v18  [label="62:  sig += (400 - sig) % 4"];
  v19  [label="63:  leading = false"];
  v20  [label="endif"];
  v21  [label="66:  if (sig == (field.getRadixDigits() / 2) * 4)"];
  v22  [label="67:  sp = i"];
  v23  [label="68:  break;"];
  v24  [label="endif"];
  v25  [label="71:  if (buf[i] >= '0' && buf[i] <= '9' && !leading)"];
  v26  [label="72:  sig ++"];
  v27  [label="endif"];
  v28  [label="76:  result[0] = field.newDfp(new String(buf, 0, sp))"];
  v29  [label="78:  for (  int i = 0 ; i < buf.length ;   i++)"];
  v32  [label="endfor"];
  v33  [label="79:  buf[i] = a.charAt(i)"];
  v34  [label="80:  if (buf[i] >= '0' && buf[i] <= '9' && i < sp)"];
  v35  [label="81:  buf[i] = '0'"];
  v36  [label="endif"];
  v37  [label="85:  result[1] = field.newDfp(new String(buf))"];
  v38  [label="87:  return result;"];
  v39  [label="94:  Dfp[] split(final Dfp a)"];
  v40  [label="95:  final Dfp[] result = new Dfp[2]"];
  v41  [label="96:  final Dfp shift = a.multiply(a.power10K(a.getRadixDigits() / 2))"];
  v42  [label="97:  result[0] = a.add(shift).subtract(shift)"];
  v43  [label="98:  result[1] = a.subtract(result[0])"];
  v44  [label="99:  return result;"];
  v45  [label="110:  Dfp[] splitMult(final Dfp[] a, final Dfp[] b)"];
  v46  [label="111:  final Dfp[] result = new Dfp[2]"];
  v47  [label="113:  result[1] = a[0].getZero()"];
  v48  [label="114:  result[0] = a[0].multiply(b[0])"];
  v49  [label="120:  if (result[0].classify() == Dfp.INFINITE || result[0].equals(result[1]))"];
  v50  [label="121:  return result;"];
  v51  [label="endif"];
  v52  [label="124:  result[1] = a[0].multiply(b[1]).add(a[1].multiply(b[0])).add(a[1].multiply(b[1]))"];
  v53  [label="126:  return result;"];
  v54  [label="136:  Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)"];
  v55  [label="137:  final Dfp[] result"];
  v56  [label="139:  result = new Dfp[2]"];
  v57  [label="141:  result[0] = a[0].divide(b[0])"];
  v58  [label="142:  result[1] = a[1].multiply(b[0]).subtract(a[0].multiply(b[1]))"];
  v59  [label="143:  result[1] = result[1].divide(b[0].multiply(b[0]).add(b[0].multiply(b[1])))"];
  v60  [label="145:  return result;"];
  v61  [label="153:  Dfp splitPow(final Dfp[] base, int a)"];
  v62  [label="154:  boolean invert = false"];
  v63  [label="156:  Dfp[] r = new Dfp[2]"];
  v64  [label="158:  Dfp[] result = new Dfp[2]"];
  v65  [label="159:  result[0] = base[0].getOne()"];
  v66  [label="160:  result[1] = base[0].getZero()"];
  v67  [label="162:  if (a == 0)"];
  v68  [label="164:  return result[0].add(result[1]);"];
  v69  [label="endif"];
  v70  [label="167:  if (a < 0)"];
  v71  [label="169:  invert = true"];
  v72  [label="170:  a = -a"];
  v73  [label="endif"];
  v74  [label="174:  do"];
  v75  [label="194:  while (a >= 1)"];
  v76  [label="end-do-while"];
  v77  [label="175:  r[0] = new Dfp(base[0])"];
  v78  [label="176:  r[1] = new Dfp(base[1])"];
  v79  [label="177:  int trial = 1"];
  v80  [label="179:  int prevtrial"];
  v81  [label="180:  while (true)"];
  v82  [label="endwhile"];
  v83  [label="181:  prevtrial = trial"];
  v84  [label="182:  trial = trial * 2"];
  v85  [label="183:  if (trial > a)"];
  v86  [label="184:  break;"];
  v87  [label="endif"];
  v88  [label="186:  r = splitMult(r, r)"];
  v89  [label="189:  trial = prevtrial"];
  v90  [label="191:  a -= trial"];
  v91  [label="192:  result = splitMult(result, r)"];
  v92  [label="196:  result[0] = result[0].add(result[1])"];
  v93  [label="198:  if (invert)"];
  v94  [label="199:  result[0] = base[0].getOne().divide(result[0])"];
  v95  [label="endif"];
  v96  [label="202:  return result[0];"];
  v97  [label="211:  Dfp pow(Dfp base, int a)"];
  v98  [label="213:  boolean invert = false"];
  v99  [label="215:  Dfp result = base.getOne()"];
  v100  [label="217:  if (a == 0)"];
  v101  [label="219:  return result;"];
  v102  [label="endif"];
  v103  [label="222:  if (a < 0)"];
  v104  [label="223:  invert = true"];
  v105  [label="224:  a = -a"];
  v106  [label="endif"];
  v107  [label="228:  do"];
  v108  [label="247:  while (a >= 1)"];
  v109  [label="end-do-while"];
  v110  [label="229:  Dfp r = new Dfp(base)"];
  v111  [label="230:  Dfp prevr"];
  v112  [label="231:  int trial = 1"];
  v113  [label="232:  int prevtrial"];
  v114  [label="234:  do"];
  v115  [label="239:  while (a>trial)"];
  v116  [label="end-do-while"];
  v117  [label="235:  prevr = new Dfp(r)"];
  v118  [label="236:  prevtrial = trial"];
  v119  [label="237:  r = r.multiply(r)"];
  v120  [label="238:  trial = trial * 2"];
  v121  [label="241:  r = prevr"];
  v122  [label="242:  trial = prevtrial"];
  v123  [label="244:  a = a - trial"];
  v124  [label="245:  result = result.multiply(r)"];
  v125  [label="249:  if (invert)"];
  v126  [label="250:  result = base.getOne().divide(result)"];
  v127  [label="endif"];
  v128  [label="253:  return base.newInstance(result);"];
  v129  [label="264:  Dfp exp(final Dfp a)"];
  v130  [label="266:  final Dfp inta = a.rint()"];
  v131  [label="267:  final Dfp fraca = a.subtract(inta)"];
  v132  [label="269:  final int ia = inta.intValue()"];
  v133  [label="270:  if (ia > 2147483646)"];
  v134  [label="272:  return a.newInstance((byte)1, Dfp.INFINITE);"];
  v135  [label="endif"];
  v136  [label="275:  if (ia < -2147483646)"];
  v137  [label="277:  return a.newInstance();"];
  v138  [label="endif"];
  v139  [label="280:  final Dfp einta = splitPow(a.getField().getESplit(), ia)"];
  v140  [label="281:  final Dfp efraca = expInternal(fraca)"];
  v141  [label="283:  return einta.multiply(efraca);"];
  v142  [label="291:  Dfp expInternal(final Dfp a)"];
  v143  [label="292:  Dfp y = a.getOne()"];
  v144  [label="293:  Dfp x = a.getOne()"];
  v145  [label="294:  Dfp fact = a.getOne()"];
  v146  [label="295:  Dfp py = new Dfp(y)"];
  v147  [label="297:  for (  int i = 1 ; i < 90 ;   i++)"];
  v150  [label="endfor"];
  v151  [label="298:  x = x.multiply(a)"];
  v152  [label="299:  fact = fact.divide(i)"];
  v153  [label="300:  y = y.add(x.multiply(fact))"];
  v154  [label="301:  if (y.equals(py))"];
  v155  [label="302:  break;"];
  v156  [label="endif"];
  v157  [label="304:  py = new Dfp(y)"];
  v158  [label="307:  return y;"];
  v159  [label="317:  Dfp log(Dfp a)"];
  v160  [label="318:  int lr"];
  v161  [label="319:  Dfp x"];
  v162  [label="320:  int ix"];
  v163  [label="321:  int p2 = 0"];
  v164  [label="324:  if (a.equals(a.getZero()) || a.lessThan(a.getZero()) || a.isNaN())"];
  v165  [label="326:  a.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID)"];
  v166  [label="327:  return a.dotrap(DfpField.FLAG_INVALID, 'ln', a, a.newInstance((byte)1, Dfp.QNAN));"];
  v167  [label="endif"];
  v168  [label="330:  if (a.classify() == Dfp.INFINITE)"];
  v169  [label="331:  return a;"];
  v170  [label="endif"];
  v171  [label="334:  x = new Dfp(a)"];
  v172  [label="335:  lr = x.log10K()"];
  v173  [label="337:  x = x.divide(pow(a.newInstance(10000), lr))"];
  v174  [label="338:  ix = x.floor().intValue()"];
  v175  [label="340:  while (ix > 2)"];
  v176  [label="endwhile"];
  v177  [label="341:  ix >>= 1"];
  v178  [label="342:  p2++"];
  v179  [label="346:  Dfp[] spx = split(x)"];
  v180  [label="347:  Dfp[] spy = new Dfp[2]"];
  v181  [label="348:  spy[0] = pow(a.getTwo(), p2)"];
  v182  [label="349:  spx[0] = spx[0].divide(spy[0])"];
  v183  [label="350:  spx[1] = spx[1].divide(spy[0])"];
  v184  [label="352:  spy[0] = a.newInstance('1.33333')"];
  v185  [label="353:  while (spx[0].add(spx[1]).greaterThan(spy[0]))"];
  v186  [label="endwhile"];
  v187  [label="354:  spx[0] = spx[0].divide(2)"];
  v188  [label="355:  spx[1] = spx[1].divide(2)"];
  v189  [label="356:  p2++"];
  v190  [label="360:  Dfp[] spz = logInternal(spx)"];
  v191  [label="362:  spx[0] = a.newInstance(new StringBuilder().append(p2+4*lr).toString())"];
  v192  [label="363:  spx[1] = a.getZero()"];
  v193  [label="364:  spy = splitMult(a.getField().getLn2Split(), spx)"];
  v194  [label="366:  spz[0] = spz[0].add(spy[0])"];
  v195  [label="367:  spz[1] = spz[1].add(spy[1])"];
  v196  [label="369:  spx[0] = a.newInstance(new StringBuilder().append(4*lr).toString())"];
  v197  [label="370:  spx[1] = a.getZero()"];
  v198  [label="371:  spy = splitMult(a.getField().getLn5Split(), spx)"];
  v199  [label="373:  spz[0] = spz[0].add(spy[0])"];
  v200  [label="374:  spz[1] = spz[1].add(spy[1])"];
  v201  [label="376:  return a.newInstance(spz[0].add(spz[1]));"];
  v202  [label="435:  Dfp[] logInternal(final Dfp a[])"];
  v203  [label="440:  Dfp t = a[0].divide(4).add(a[1].divide(4))"];
  v204  [label="441:  Dfp x = t.add(a[0].newInstance('-0.25')).divide(t.add(a[0].newInstance('0.25')))"];
  v205  [label="443:  Dfp y = new Dfp(x)"];
  v206  [label="444:  Dfp num = new Dfp(x)"];
  v207  [label="445:  Dfp py = new Dfp(y)"];
  v208  [label="446:  int den = 1"];
  v209  [label="447:  for (  int i = 0 ; i < 10000 ;   i++)"];
  v212  [label="endfor"];
  v213  [label="448:  num = num.multiply(x)"];
  v214  [label="449:  num = num.multiply(x)"];
  v215  [label="450:  den = den + 2"];
  v216  [label="451:  t = num.divide(den)"];
  v217  [label="452:  y = y.add(t)"];
  v218  [label="453:  if (y.equals(py))"];
  v219  [label="454:  break;"];
  v220  [label="endif"];
  v221  [label="456:  py = new Dfp(y)"];
  v222  [label="459:  y = y.multiply(a[0].getTwo())"];
  v223  [label="461:  return split(y);"];
  v224  [label="505:  Dfp pow(Dfp x, final Dfp y)"];
  v225  [label="508:  if (x.getField().getRadixDigits() != y.getField().getRadixDigits())"];
  v226  [label="509:  x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID)"];
  v227  [label="510:  final Dfp result = x.newInstance(x.getZero())"];
  v228  [label="511:  result.nans = Dfp.QNAN"];
  v229  [label="512:  return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, result);"];
  v230  [label="endif"];
  v231  [label="515:  final Dfp zero = x.getZero()"];
  v232  [label="516:  final Dfp one  = x.getOne()"];
  v233  [label="517:  final Dfp two  = x.getTwo()"];
  v234  [label="518:  boolean invert = false"];
  v235  [label="519:  int ui"];
  v236  [label="522:  if (y.equals(zero))"];
  v237  [label="523:  return x.newInstance(one);"];
  v238  [label="endif"];
  v239  [label="526:  if (y.equals(one))"];
  v240  [label="527:  if (x.isNaN())"];
  v241  [label="529:  x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID)"];
  v242  [label="530:  return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x);"];
  v243  [label="endif"];
  v244  [label="532:  return x;"];
  v245  [label="endif"];
  v246  [label="535:  if (x.isNaN() || y.isNaN())"];
  v247  [label="537:  x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID)"];
  v248  [label="538:  return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, Dfp.QNAN));"];
  v249  [label="endif"];
  v254  [label="endif"];
  v256  [label="endif"];
  v257  [label="552:  if (y.classify() == Dfp.FINITE && y.rint().equals(y) && !y.remainder(two).equals(zero))"];
  v258  [label="554:  if (y.greaterThan(zero))"];
  v259  [label="555:  return x.newInstance(zero.negate());"];
  v260  [label="endif"];
  v261  [label="557:  return x.newInstance(x.newInstance((byte)-1, Dfp.INFINITE));"];
  v262  [label="endif"];
  v263  [label="561:  if (y.greaterThan(zero))"];
  v264  [label="562:  return x.newInstance(zero);"];
  v265  [label="endif"];
  v266  [label="564:  return x.newInstance(x.newInstance((byte)1, Dfp.INFINITE));"];
  v267  [label="endif"];
  v268  [label="570:  if (x.lessThan(zero))"];
  v269  [label="572:  x = x.negate()"];
  v270  [label="573:  invert = true"];
  v271  [label="endif"];
  v272  [label="576:  if (x.greaterThan(one) && y.classify() == Dfp.INFINITE)"];
  v273  [label="577:  if (y.greaterThan(zero))"];
  v274  [label="578:  return y;"];
  v275  [label="endif"];
  v276  [label="580:  return x.newInstance(zero);"];
  v277  [label="endif"];
  v278  [label="584:  if (x.lessThan(one) && y.classify() == Dfp.INFINITE)"];
  v279  [label="585:  if (y.greaterThan(zero))"];
  v280  [label="586:  return x.newInstance(zero);"];
  v281  [label="endif"];
  v282  [label="588:  return x.newInstance(Dfp.copysign(y, one));"];
  v283  [label="endif"];
  v284  [label="592:  if (x.equals(one) && y.classify() == Dfp.INFINITE)"];
  v285  [label="593:  x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID)"];
  v286  [label="594:  return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, Dfp.QNAN));"];
  v287  [label="endif"];
  v288  [label="597:  if (x.classify() == Dfp.INFINITE)"];
  v289  [label="599:  if (invert)"];
  v290  [label="601:  if (y.classify() == Dfp.FINITE && y.rint().equals(y) && !y.remainder(two).equals(zero))"];
  v291  [label="603:  if (y.greaterThan(zero))"];
  v292  [label="604:  return x.newInstance(x.newInstance((byte)-1, Dfp.INFINITE));"];
  v293  [label="endif"];
  v294  [label="606:  return x.newInstance(zero.negate());"];
  v295  [label="endif"];
  v296  [label="610:  if (y.greaterThan(zero))"];
  v297  [label="611:  return x.newInstance(x.newInstance((byte)1, Dfp.INFINITE));"];
  v298  [label="endif"];
  v299  [label="613:  return x.newInstance(zero);"];
  v300  [label="endif"];
  v301  [label="618:  if (y.greaterThan(zero))"];
  v302  [label="619:  return x;"];
  v303  [label="endif"];
  v304  [label="621:  return x.newInstance(zero);"];
  v305  [label="endif"];
  v306  [label="626:  if (invert && !y.rint().equals(y))"];
  v307  [label="627:  x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID)"];
  v308  [label="628:  return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, Dfp.QNAN));"];
  v309  [label="endif"];
  v310  [label="633:  Dfp r"];
  v311  [label="634:  if (y.lessThan(x.newInstance(100000000)) && y.greaterThan(x.newInstance(-100000000)))"];
  v312  [label="635:  final Dfp u = y.rint()"];
  v313  [label="636:  ui = u.intValue()"];
  v314  [label="638:  final Dfp v = y.subtract(u)"];
  v315  [label="640:  if (v.unequal(zero))"];
  v316  [label="641:  final Dfp a = v.multiply(log(x))"];
  v317  [label="642:  final Dfp b = a.divide(x.getField().getLn2()).rint()"];
  v318  [label="644:  final Dfp c = a.subtract(b.multiply(x.getField().getLn2()))"];
  v319  [label="645:  r = splitPow(split(x), ui)"];
  v320  [label="646:  r = r.multiply(pow(two, b.intValue()))"];
  v321  [label="647:  r = r.multiply(exp(c))"];
  v322  [label="endif"];
  v323  [label="649:  r = splitPow(split(x), ui)"];
  v324  [label="endif"];
  v325  [label="653:  r = exp(log(x).multiply(y))"];
  v326  [label="656:  if (invert && y.rint().equals(y) && !y.remainder(two).equals(zero))"];
  v327  [label="658:  r = r.negate()"];
  v328  [label="endif"];
  v329  [label="661:  return x.newInstance(r);"];
  v330  [label="670:  Dfp sinInternal(Dfp a[])"];
  v331  [label="672:  Dfp c = a[0].add(a[1])"];
  v332  [label="673:  Dfp y = c"];
  v333  [label="674:  c = c.multiply(c)"];
  v334  [label="675:  Dfp x = y"];
  v335  [label="676:  Dfp fact = a[0].getOne()"];
  v336  [label="677:  Dfp py = new Dfp(y)"];
  v337  [label="679:  for (  int i = 3 ; i < 90 ;   i += 2)"];
  v340  [label="endfor"];
  v341  [label="680:  x = x.multiply(c)"];
  v342  [label="681:  x = x.negate()"];
  v343  [label="683:  fact = fact.divide((i-1)*i)"];
  v344  [label="684:  y = y.add(x.multiply(fact))"];
  v345  [label="685:  if (y.equals(py))"];
  v346  [label="686:  break;"];
  v347  [label="endif"];
  v348  [label="688:  py = new Dfp(y)"];
  v349  [label="691:  return y;"];
  v350  [label="700:  Dfp cosInternal(Dfp a[])"];
  v351  [label="701:  final Dfp one = a[0].getOne()"];
  v352  [label="704:  Dfp x = one"];
  v353  [label="705:  Dfp y = one"];
  v354  [label="706:  Dfp c = a[0].add(a[1])"];
  v355  [label="707:  c = c.multiply(c)"];
  v356  [label="709:  Dfp fact = one"];
  v357  [label="710:  Dfp py = new Dfp(y)"];
  v358  [label="712:  for (  int i = 2 ; i < 90 ;   i += 2)"];
  v361  [label="endfor"];
  v362  [label="713:  x = x.multiply(c)"];
  v363  [label="714:  x = x.negate()"];
  v364  [label="716:  fact = fact.divide((i - 1) * i)"];
  v365  [label="718:  y = y.add(x.multiply(fact))"];
  v366  [label="719:  if (y.equals(py))"];
  v367  [label="720:  break;"];
  v368  [label="endif"];
  v369  [label="722:  py = new Dfp(y)"];
  v370  [label="725:  return y;"];
  v371  [label="733:  Dfp sin(final Dfp a)"];
  v372  [label="734:  final Dfp pi = a.getField().getPi()"];
  v373  [label="735:  final Dfp zero = a.getField().getZero()"];
  v374  [label="736:  boolean neg = false"];
  v375  [label="739:  Dfp x = a.remainder(pi.multiply(2))"];
  v376  [label="743:  if (x.lessThan(zero))"];
  v377  [label="744:  x = x.negate()"];
  v378  [label="745:  neg = true"];
  v379  [label="endif"];
  v380  [label="752:  if (x.greaterThan(pi.divide(2)))"];
  v381  [label="753:  x = pi.subtract(x)"];
  v382  [label="endif"];
  v383  [label="756:  Dfp y"];
  v384  [label="757:  if (x.lessThan(pi.divide(4)))"];
  v385  [label="758:  Dfp c[] = new Dfp[2]"];
  v386  [label="759:  c[0] = x"];
  v387  [label="760:  c[1] = zero"];
  v388  [label="763:  y = sinInternal(split(x))"];
  v389  [label="endif"];
  v390  [label="765:  final Dfp c[] = new Dfp[2]"];
  v391  [label="766:  final Dfp[] piSplit = a.getField().getPiSplit()"];
  v392  [label="767:  c[0] = piSplit[0].divide(2).subtract(x)"];
  v393  [label="768:  c[1] = piSplit[1].divide(2)"];
  v394  [label="769:  y = cosInternal(c)"];
  v395  [label="772:  if (neg)"];
  v396  [label="773:  y = y.negate()"];
  v397  [label="endif"];
  v398  [label="776:  return a.newInstance(y);"];
  v403  [label="790:  Dfp x = a.remainder(pi.multiply(2))"];
  v404  [label="794:  if (x.lessThan(zero))"];
  v405  [label="795:  x = x.negate()"];
  v406  [label="endif"];
  v407  [label="802:  if (x.greaterThan(pi.divide(2)))"];
  v408  [label="803:  x = pi.subtract(x)"];
  v409  [label="804:  neg = true"];
  v410  [label="endif"];
  v411  [label="807:  Dfp y"];
  v412  [label="808:  if (x.lessThan(pi.divide(4)))"];
  v413  [label="809:  Dfp c[] = new Dfp[2]"];
  v414  [label="810:  c[0] = x"];
  v415  [label="811:  c[1] = zero"];
  v416  [label="813:  y = cosInternal(c)"];
  v417  [label="endif"];
  v418  [label="815:  final Dfp c[] = new Dfp[2]"];
  v419  [label="816:  final Dfp[] piSplit = a.getField().getPiSplit()"];
  v420  [label="817:  c[0] = piSplit[0].divide(2).subtract(x)"];
  v421  [label="818:  c[1] = piSplit[1].divide(2)"];
  v422  [label="819:  y = sinInternal(c)"];
  v423  [label="822:  if (neg)"];
  v424  [label="823:  y = y.negate()"];
  v425  [label="endif"];
  v426  [label="826:  return a.newInstance(y);"];
  v427  [label="834:  Dfp tan(final Dfp a)"];
  v428  [label="835:  return sin(a).divide(cos(a));"];
  v429  [label="842:  Dfp atanInternal(final Dfp a)"];
  v430  [label="844:  Dfp y = new Dfp(a)"];
  v431  [label="845:  Dfp x = new Dfp(y)"];
  v432  [label="846:  Dfp py = new Dfp(y)"];
  v433  [label="848:  for (  int i = 3 ; i < 90 ;   i += 2)"];
  v436  [label="endfor"];
  v437  [label="849:  x = x.multiply(a)"];
  v438  [label="850:  x = x.multiply(a)"];
  v439  [label="851:  x = x.negate()"];
  v440  [label="852:  y = y.add(x.divide(i))"];
  v441  [label="853:  if (y.equals(py))"];
  v442  [label="854:  break;"];
  v443  [label="endif"];
  v444  [label="856:  py = new Dfp(y)"];
  v445  [label="859:  return y;"];
  v446  [label="876:  Dfp atan(final Dfp a)"];
  v447  [label="877:  final Dfp zero  = a.getField().getZero()"];
  v448  [label="878:  final Dfp one = a.getField().getOne()"];
  v449  [label="879:  final Dfp[] sqr2Split = a.getField().getSqr2Split()"];
  v450  [label="880:  final Dfp[] piSplit = a.getField().getPiSplit()"];
  v451  [label="881:  boolean recp = false"];
  v452  [label="882:  boolean neg = false"];
  v453  [label="883:  boolean sub = false"];
  v454  [label="885:  final Dfp ty = sqr2Split[0].subtract(one).add(sqr2Split[1])"];
  v455  [label="887:  Dfp x = new Dfp(a)"];
  v456  [label="888:  if (x.lessThan(zero))"];
  v457  [label="889:  neg = true"];
  v458  [label="890:  x = x.negate()"];
  v459  [label="endif"];
  v460  [label="893:  if (x.greaterThan(one))"];
  v461  [label="894:  recp = true"];
  v462  [label="895:  x = one.divide(x)"];
  v463  [label="endif"];
  v464  [label="898:  if (x.greaterThan(ty))"];
  v465  [label="899:  Dfp sty[] = new Dfp[2]"];
  v466  [label="900:  sub = true"];
  v467  [label="902:  sty[0] = sqr2Split[0].subtract(one)"];
  v468  [label="903:  sty[1] = sqr2Split[1]"];
  v469  [label="905:  Dfp[] xs = split(x)"];
  v470  [label="907:  Dfp[] ds = splitMult(xs, sty)"];
  v471  [label="908:  ds[0] = ds[0].add(one)"];
  v472  [label="910:  xs[0] = xs[0].subtract(sty[0])"];
  v473  [label="911:  xs[1] = xs[1].subtract(sty[1])"];
  v474  [label="913:  xs = splitDiv(xs, ds)"];
  v475  [label="914:  x = xs[0].add(xs[1])"];
  v476  [label="endif"];
  v477  [label="919:  Dfp y = atanInternal(x)"];
  v478  [label="921:  if (sub)"];
  v479  [label="922:  y = y.add(piSplit[0].divide(8)).add(piSplit[1].divide(8))"];
  v480  [label="endif"];
  v481  [label="925:  if (recp)"];
  v482  [label="926:  y = piSplit[0].divide(2).subtract(y).add(piSplit[1].divide(2))"];
  v483  [label="endif"];
  v484  [label="929:  if (neg)"];
  v485  [label="930:  y = y.negate()"];
  v486  [label="endif"];
  v487  [label="933:  return a.newInstance(y);"];
  v488  [label="941:  Dfp asin(final Dfp a)"];
  v489  [label="942:  return atan(a.divide(a.getOne().subtract(a.multiply(a)).sqrt()));"];
  v490  [label="949:  Dfp acos(Dfp a)"];
  v491  [label="950:  Dfp result"];
  v492  [label="951:  boolean negative = false"];
  v493  [label="953:  if (a.lessThan(a.getZero()))"];
  v494  [label="954:  negative = true"];
  v495  [label="endif"];
  v496  [label="957:  a = Dfp.copysign(a, a.getOne())"];
  v497  [label="959:  result = atan(a.getOne().subtract(a.multiply(a)).sqrt().divide(a))"];
  v498  [label="961:  if (negative)"];
  v499  [label="962:  result = a.getField().getPi().subtract(result)"];
  v500  [label="endif"];
  v501  [label="965:  return a.newInstance(result);"];
  // graph-edges
  v2 -> v3;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8;
  v8 -> v9;
  v9 -> v12  [label="False"];
  v9 -> v13  [label="True"];
  v13 -> v14;
  v14 -> v15  [label="True"];
  v15 -> v16;
  v14 -> v16  [label="False"];
  v16 -> v17;
  v17 -> v18  [label="True"];
  v18 -> v19;
  v19 -> v20;
  v17 -> v20  [label="False"];
  v20 -> v21;
  v21 -> v22  [label="True"];
  v22 -> v23;
  v23 -> v12;
  v21 -> v24  [label="False"];
  v24 -> v25;
  v25 -> v26  [label="True"];
  v26 -> v27;
  v25 -> v27  [label="False"];
  v27 -> v9;
  v12 -> v28;
  v28 -> v29;
  v29 -> v32  [label="False"];
  v29 -> v33  [label="True"];
  v33 -> v34;
  v34 -> v35  [label="True"];
  v35 -> v36;
  v34 -> v36  [label="False"];
  v36 -> v29;
  v32 -> v37;
  v37 -> v38;
  v39 -> v40;
  v40 -> v41;
  v41 -> v42;
  v42 -> v43;
  v43 -> v44;
  v45 -> v46;
  v46 -> v47;
  v47 -> v48;
  v48 -> v49;
  v49 -> v50  [label="True"];
  v49 -> v51  [label="False"];
  v51 -> v52;
  v52 -> v53;
  v54 -> v55;
  v55 -> v56;
  v56 -> v57;
  v57 -> v58;
  v58 -> v59;
  v59 -> v60;
  v61 -> v62;
  v62 -> v63;
  v63 -> v64;
  v64 -> v65;
  v65 -> v66;
  v66 -> v67;
  v67 -> v68  [label="True"];
  v67 -> v69  [label="False"];
  v69 -> v70;
  v70 -> v71  [label="True"];
  v71 -> v72;
  v72 -> v73;
  v70 -> v73  [label="False"];
  v73 -> v74;
  v74 -> v77;
  v77 -> v78;
  v78 -> v79;
  v79 -> v80;
  v80 -> v81;
  v81 -> v82  [label="False"];
  v81 -> v83  [label="True"];
  v83 -> v84;
  v84 -> v85;
  v85 -> v86  [label="True"];
  v86 -> v82;
  v85 -> v87  [label="False"];
  v87 -> v88;
  v88 -> v81;
  v82 -> v89;
  v89 -> v90;
  v90 -> v91;
  v91 -> v75;
  v75 -> v74  [label="True"];
  v75 -> v76  [label="False"];
  v76 -> v92;
  v92 -> v93;
  v93 -> v94  [label="True"];
  v94 -> v95;
  v93 -> v95  [label="False"];
  v95 -> v96;
  v97 -> v98;
  v98 -> v99;
  v99 -> v90;
  v90 -> v91  [label="True"];
  v90 -> v92  [label="False"];
  v93 -> v96  [label="False"];
  v96 -> v97;
  v97 -> v90;
  v91 -> v92;
  v93 -> v94;
  v94 -> v97;
  v99 -> v120;
  v120 -> v95;
  v95 -> v94  [label="True"];
  v95 -> v96  [label="False"];
  v96 -> v121;
  v121 -> v122;
  v122 -> v123;
  v123 -> v124;
  v124 -> v98;
  v98 -> v97  [label="True"];
  v98 -> v99  [label="False"];
  v99 -> v125;
  v125 -> v126  [label="True"];
  v126 -> v127;
  v125 -> v127  [label="False"];
  v127 -> v128;
  v129 -> v130;
  v130 -> v131;
  v131 -> v132;
  v132 -> v133;
  v133 -> v134  [label="True"];
  v133 -> v135  [label="False"];
  v135 -> v136;
  v136 -> v137  [label="True"];
  v136 -> v138  [label="False"];
  v138 -> v139;
  v139 -> v140;
  v140 -> v141;
  v142 -> v143;
  v143 -> v144;
  v144 -> v145;
  v145 -> v146;
  v146 -> v147;
  v147 -> v150  [label="False"];
  v147 -> v151  [label="True"];
  v151 -> v152;
  v152 -> v153;
  v153 -> v154;
  v154 -> v155  [label="True"];
  v155 -> v150;
  v154 -> v156  [label="False"];
  v156 -> v157;
  v157 -> v147;
  v150 -> v158;
  v159 -> v160;
  v160 -> v161;
  v161 -> v162;
  v162 -> v163;
  v163 -> v164;
  v164 -> v165  [label="True"];
  v165 -> v166;
  v164 -> v167  [label="False"];
  v167 -> v168;
  v168 -> v169  [label="True"];
  v168 -> v170  [label="False"];
  v170 -> v171;
  v171 -> v172;
  v172 -> v173;
  v173 -> v174;
  v174 -> v175;
  v175 -> v176  [label="False"];
  v175 -> v177  [label="True"];
  v177 -> v178;
  v178 -> v175;
  v176 -> v179;
  v179 -> v180;
  v180 -> v181;
  v181 -> v182;
  v182 -> v183;
  v183 -> v184;
  v184 -> v185;
  v185 -> v186  [label="False"];
  v185 -> v187  [label="True"];
  v187 -> v188;
  v188 -> v189;
  v189 -> v185;
  v186 -> v190;
  v190 -> v191;
  v191 -> v192;
  v192 -> v193;
  v193 -> v194;
  v194 -> v195;
  v195 -> v196;
  v196 -> v197;
  v197 -> v198;
  v198 -> v199;
  v199 -> v200;
  v200 -> v201;
  v202 -> v203;
  v203 -> v204;
  v204 -> v205;
  v205 -> v206;
  v206 -> v207;
  v207 -> v208;
  v208 -> v209;
  v209 -> v212  [label="False"];
  v209 -> v213  [label="True"];
  v213 -> v214;
  v214 -> v215;
  v215 -> v216;
  v216 -> v217;
  v217 -> v218;
  v218 -> v219  [label="True"];
  v219 -> v212;
  v218 -> v220  [label="False"];
  v220 -> v221;
  v221 -> v209;
  v212 -> v222;
  v222 -> v223;
  v224 -> v225;
  v225 -> v226  [label="True"];
  v226 -> v227;
  v227 -> v228;
  v228 -> v229;
  v225 -> v230  [label="False"];
  v230 -> v231;
  v231 -> v232;
  v232 -> v233;
  v233 -> v234;
  v234 -> v235;
  v235 -> v236;
  v236 -> v237  [label="True"];
  v236 -> v238  [label="False"];
  v238 -> v239;
  v239 -> v240  [label="True"];
  v240 -> v241  [label="True"];
  v241 -> v242;
  v240 -> v243  [label="False"];
  v243 -> v244;
  v239 -> v245  [label="False"];
  v245 -> v246;
  v246 -> v247  [label="True"];
  v247 -> v248;
  v246 -> v249  [label="False"];
  v249 -> v250;
  v250 -> v251  [label="True"];
  v251 -> v252  [label="True"];
  v252 -> v253  [label="True"];
  v252 -> v255  [label="False"];
  v254 -> v256;
  v251 -> v257  [label="False"];
  v257 -> v258  [label="True"];
  v258 -> v259  [label="True"];
  v258 -> v261  [label="False"];
  v260 -> v262;
  v257 -> v263  [label="False"];
  v263 -> v264  [label="True"];
  v263 -> v266  [label="False"];
  v265 -> v262;
  v262 -> v256;
  v256 -> v267;
  v250 -> v267  [label="False"];
  v267 -> v268;
  v268 -> v269  [label="True"];
  v269 -> v270;
  v270 -> v271;
  v268 -> v271  [label="False"];
  v271 -> v272;
  v272 -> v273  [label="True"];
  v273 -> v274  [label="True"];
  v273 -> v276  [label="False"];
  v275 -> v277;
  v272 -> v277  [label="False"];
  v277 -> v278;
  v278 -> v279  [label="True"];
  v279 -> v280  [label="True"];
  v279 -> v282  [label="False"];
  v281 -> v283;
  v278 -> v283  [label="False"];
  v283 -> v284;
  v284 -> v285  [label="True"];
  v285 -> v286;
  v284 -> v287  [label="False"];
  v287 -> v288;
  v288 -> v289  [label="True"];
  v289 -> v290  [label="True"];
  v290 -> v291  [label="True"];
  v291 -> v292  [label="True"];
  v291 -> v294  [label="False"];
  v293 -> v295;
  v290 -> v296  [label="False"];
  v296 -> v297  [label="True"];
  v296 -> v299  [label="False"];
  v298 -> v295;
  v295 -> v290;
  v289 -> v291  [label="False"];
  v293 -> v290;
  v290 -> v295;
  v288 -> v295  [label="False"];
  v295 -> v296;
  v297 -> v298;
  v299 -> v290;
  v290 -> v291;
  v292 -> v293;
  v293 -> v294;
  v294 -> v295;
  v295 -> v296  [label="True"];
  v296 -> v297;
  v298 -> v299;
  v299 -> v320;
  v320 -> v321;
  v321 -> v322;
  v295 -> v323  [label="False"];
  v323 -> v322;
  v322 -> v324;
  v291 -> v325  [label="False"];
  v325 -> v324;
  v324 -> v326;
  v326 -> v327  [label="True"];
  v327 -> v328;
  v326 -> v328  [label="False"];
  v328 -> v329;
  v330 -> v331;
  v331 -> v332;
  v332 -> v333;
  v333 -> v334;
  v334 -> v335;
  v335 -> v336;
  v336 -> v337;
  v337 -> v340  [label="False"];
  v337 -> v341  [label="True"];
  v341 -> v342;
  v342 -> v343;
  v343 -> v344;
  v344 -> v345;
  v345 -> v346  [label="True"];
  v346 -> v340;
  v345 -> v347  [label="False"];
  v347 -> v348;
  v348 -> v337;
  v340 -> v349;
  v350 -> v351;
  v351 -> v352;
  v352 -> v353;
  v353 -> v354;
  v354 -> v355;
  v355 -> v356;
  v356 -> v357;
  v357 -> v358;
  v358 -> v361  [label="False"];
  v358 -> v362  [label="True"];
  v362 -> v363;
  v363 -> v364;
  v364 -> v365;
  v365 -> v366;
  v366 -> v367  [label="True"];
  v367 -> v361;
  v366 -> v368  [label="False"];
  v368 -> v369;
  v369 -> v358;
  v361 -> v370;
  v371 -> v372;
  v372 -> v373;
  v373 -> v374;
  v374 -> v375;
  v375 -> v376;
  v376 -> v377  [label="True"];
  v377 -> v378;
  v378 -> v379;
  v376 -> v379  [label="False"];
  v379 -> v380;
  v380 -> v381  [label="True"];
  v381 -> v382;
  v380 -> v382  [label="False"];
  v382 -> v383;
  v383 -> v384;
  v384 -> v385  [label="True"];
  v385 -> v386;
  v386 -> v387;
  v387 -> v388;
  v388 -> v389;
  v384 -> v390  [label="False"];
  v390 -> v391;
  v391 -> v392;
  v392 -> v393;
  v393 -> v394;
  v394 -> v389;
  v389 -> v395;
  v395 -> v396  [label="True"];
  v396 -> v397;
  v395 -> v397  [label="False"];
  v397 -> v398;
  v399 -> v400;
  v400 -> v401;
  v401 -> v402;
  v402 -> v403;
  v403 -> v404;
  v404 -> v405  [label="True"];
  v405 -> v406;
  v404 -> v406  [label="False"];
  v406 -> v407;
  v407 -> v408  [label="True"];
  v408 -> v409;
  v409 -> v410;
  v407 -> v410  [label="False"];
  v410 -> v411;
  v411 -> v412;
  v412 -> v413  [label="True"];
  v413 -> v414;
  v414 -> v415;
  v415 -> v416;
  v416 -> v417;
  v412 -> v418  [label="False"];
  v418 -> v419;
  v419 -> v420;
  v420 -> v421;
  v421 -> v422;
  v422 -> v417;
  v417 -> v423;
  v423 -> v424  [label="True"];
  v424 -> v425;
  v423 -> v425  [label="False"];
  v425 -> v426;
  v427 -> v428;
  v429 -> v430;
  v430 -> v431;
  v431 -> v432;
  v432 -> v433;
  v433 -> v436  [label="False"];
  v433 -> v437  [label="True"];
  v437 -> v438;
  v438 -> v439;
  v439 -> v440;
  v440 -> v441;
  v441 -> v442  [label="True"];
  v442 -> v436;
  v441 -> v443  [label="False"];
  v443 -> v444;
  v444 -> v433;
  v436 -> v445;
  v446 -> v447;
  v447 -> v448;
  v448 -> v449;
  v449 -> v450;
  v450 -> v451;
  v451 -> v452;
  v452 -> v453;
  v453 -> v454;
  v454 -> v455;
  v455 -> v456;
  v456 -> v457  [label="True"];
  v457 -> v458;
  v458 -> v459;
  v456 -> v459  [label="False"];
  v459 -> v460;
  v460 -> v461  [label="True"];
  v461 -> v462;
  v462 -> v463;
  v460 -> v463  [label="False"];
  v463 -> v464;
  v464 -> v465  [label="True"];
  v465 -> v466;
  v466 -> v467;
  v467 -> v468;
  v468 -> v469;
  v469 -> v470;
  v470 -> v471;
  v471 -> v472;
  v472 -> v473;
  v473 -> v474;
  v474 -> v475;
  v475 -> v476;
  v464 -> v476  [label="False"];
  v476 -> v477;
  v477 -> v478;
  v478 -> v479  [label="True"];
  v479 -> v480;
  v478 -> v480  [label="False"];
  v480 -> v481;
  v481 -> v482  [label="True"];
  v482 -> v483;
  v481 -> v483  [label="False"];
  v483 -> v484;
  v484 -> v485  [label="True"];
  v485 -> v486;
  v484 -> v486  [label="False"];
  v486 -> v487;
  v488 -> v489;
  v490 -> v491;
  v491 -> v492;
  v492 -> v493;
  v493 -> v494  [label="True"];
  v494 -> v495;
  v493 -> v495  [label="False"];
  v495 -> v496;
  v496 -> v497;
  v497 -> v498;
  v498 -> v499  [label="True"];
  v499 -> v500;
  v498 -> v500  [label="False"];
  v500 -> v501;
  // end-of-graph
}
