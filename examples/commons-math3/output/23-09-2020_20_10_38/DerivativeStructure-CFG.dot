digraph DerivativeStructure_CFG {
  // graph-vertices
  v1  [label="76:  DerivativeStructure (final DSCompiler compiler)"];
  v2  [label="77:  this.compiler = compiler"];
  v3  [label="78:  this.data = new double[compiler.getSize()]"];
  v4  [label="86:  DerivativeStructure (final int parameters, final int order)"];
  v5  [label="88:  this(DSCompiler.getCompiler(parameters, order))"];
  v6  [label="98:  DerivativeStructure (final int parameters, final int order, final double value)"];
  v7  [label="100:  this(parameters, order)"];
  v8  [label="101:  this.data[0] = value"];
  v9  [label="116:  DerivativeStructure (final int parameters, final int order,  final int index, final double value)"];
  v10  [label="119:  this(parameters, order, value)"];
  v11  [label="121:  if (index >= parameters)"];
  v12  [label="122:  throw new NumberIsTooLargeException(index, parameters, false)"];
  v13  [label="endif"];
  v14  [label="125:  if (order > 0)"];
  v15  [label="127:  data[DSCompiler.getCompiler(index, order).getSize()] = 1.0"];
  v16  [label="endif"];
  v17  [label="140:  DerivativeStructure (final double a1, final DerivativeStructure ds1,  final double a2, final DerivativeStructure ds2)"];
  v18  [label="143:  this(ds1.compiler)"];
  v19  [label="144:  compiler.checkCompatibility(ds2.compiler)"];
  v20  [label="145:  compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0)"];
  v21  [label="158:  DerivativeStructure (final double a1, final DerivativeStructure ds1,  final double a2, final DerivativeStructure ds2,  final double a3, final DerivativeStructure ds3)"];
  v22  [label="162:  this(ds1.compiler)"];
  v23  [label="163:  compiler.checkCompatibility(ds2.compiler)"];
  v24  [label="164:  compiler.checkCompatibility(ds3.compiler)"];
  v25  [label="165:  compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0)"];
  v26  [label="180:  DerivativeStructure (final double a1, final DerivativeStructure ds1,  final double a2, final DerivativeStructure ds2,  final double a3, final DerivativeStructure ds3,  final double a4, final DerivativeStructure ds4)"];
  v27  [label="185:  this(ds1.compiler)"];
  v28  [label="186:  compiler.checkCompatibility(ds2.compiler)"];
  v29  [label="187:  compiler.checkCompatibility(ds3.compiler)"];
  v30  [label="188:  compiler.checkCompatibility(ds4.compiler)"];
  v31  [label="189:  compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0,  a3, ds3.data, 0, a4, ds4.data, 0,  data, 0)"];
  v32  [label="204:  DerivativeStructure (final int parameters, final int order, final double ... derivatives)"];
  v33  [label="206:  this(parameters, order)"];
  v34  [label="207:  if (derivatives.length != data.length)"];
  v35  [label="208:  throw new DimensionMismatchException(derivatives.length, data.length)"];
  v36  [label="endif"];
  v37  [label="210:  System.arraycopy(derivatives, 0, data, 0, data.length)"];
  v38  [label="216:  DerivativeStructure (final DerivativeStructure ds)"];
  v39  [label="217:  this.compiler = ds.compiler"];
  v40  [label="218:  this.data = ds.data.clone()"];
  v41  [label="224:  int getFreeParameters()"];
  v42  [label="225:  return compiler.getFreeParameters();"];
  v43  [label="231:  int getOrder()"];
  v44  [label="232:  return compiler.getOrder();"];
  v45  [label="245:  DerivativeStructure createConstant(final double c)"];
  v46  [label="246:  return new DerivativeStructure(getFreeParameters(), getOrder(), c);"];
  v47  [label="252:  double getReal()"];
  v48  [label="253:  return data[0];"];
  v49  [label="260:  double getValue()"];
  v50  [label="261:  return data[0];"];
  v51  [label="274:  double getPartialDerivative(final int ... orders)"];
  v52  [label="276:  return data[compiler.getPartialDerivativeIndex(orders)];"];
  v53  [label="283:  double[] getAllDerivatives()"];
  v54  [label="284:  return data.clone();"];
  v55  [label="290:  DerivativeStructure add(final double a)"];
  v56  [label="291:  final DerivativeStructure ds = new DerivativeStructure(this)"];
  v57  [label="292:  ds.data[0] += a"];
  v58  [label="293:  return ds;"];
  v59  [label="300:  DerivativeStructure add(final DerivativeStructure a)"];
  v60  [label="302:  compiler.checkCompatibility(a.compiler)"];
  v61  [label="303:  final DerivativeStructure ds = new DerivativeStructure(this)"];
  v62  [label="304:  compiler.add(data, 0, a.data, 0, ds.data, 0)"];
  v63  [label="305:  return ds;"];
  v64  [label="311:  DerivativeStructure subtract(final double a)"];
  v65  [label="312:  return add(-a);"];
  v66  [label="319:  DerivativeStructure subtract(final DerivativeStructure a)"];
  v67  [label="321:  compiler.checkCompatibility(a.compiler)"];
  v68  [label="322:  final DerivativeStructure ds = new DerivativeStructure(this)"];
  v69  [label="323:  compiler.subtract(data, 0, a.data, 0, ds.data, 0)"];
  v70  [label="324:  return ds;"];
  v71  [label="328:  DerivativeStructure multiply(final int n)"];
  v72  [label="329:  return multiply((double) n);"];
  v73  [label="335:  DerivativeStructure multiply(final double a)"];
  v74  [label="336:  final DerivativeStructure ds = new DerivativeStructure(this)"];
  v75  [label="337:  for (  int i = 0 ; i < ds.data.length ;   ++i)"];
  v78  [label="endfor"];
  v79  [label="338:  ds.data[i] *= a"];
  v80  [label="340:  return ds;"];
  v81  [label="347:  DerivativeStructure multiply(final DerivativeStructure a)"];
  v82  [label="349:  compiler.checkCompatibility(a.compiler)"];
  v83  [label="350:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v84  [label="351:  compiler.multiply(data, 0, a.data, 0, result.data, 0)"];
  v85  [label="352:  return result;"];
  v86  [label="358:  DerivativeStructure divide(final double a)"];
  v87  [label="359:  final DerivativeStructure ds = new DerivativeStructure(this)"];
  v88  [label="360:  for (  int i = 0 ; i < ds.data.length ;   ++i)"];
  v91  [label="endfor"];
  v92  [label="361:  ds.data[i] /= a"];
  v93  [label="363:  return ds;"];
  v94  [label="370:  DerivativeStructure divide(final DerivativeStructure a)"];
  v95  [label="372:  compiler.checkCompatibility(a.compiler)"];
  v96  [label="373:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v97  [label="374:  compiler.divide(data, 0, a.data, 0, result.data, 0)"];
  v98  [label="375:  return result;"];
  v99  [label="379:  DerivativeStructure remainder(final double a)"];
  v100  [label="380:  final DerivativeStructure ds = new DerivativeStructure(this)"];
  v101  [label="381:  ds.data[0] = FastMath.IEEEremainder(ds.data[0], a)"];
  v102  [label="382:  return ds;"];
  v103  [label="390:  DerivativeStructure remainder(final DerivativeStructure a)"];
  v104  [label="392:  compiler.checkCompatibility(a.compiler)"];
  v105  [label="393:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v106  [label="394:  compiler.remainder(data, 0, a.data, 0, result.data, 0)"];
  v107  [label="395:  return result;"];
  v108  [label="399:  DerivativeStructure negate()"];
  v109  [label="400:  final DerivativeStructure ds = new DerivativeStructure(compiler)"];
  v110  [label="401:  for (  int i = 0 ; i < ds.data.length ;   ++i)"];
  v113  [label="endfor"];
  v114  [label="402:  ds.data[i] = -data[i]"];
  v115  [label="404:  return ds;"];
  v116  [label="410:  DerivativeStructure abs()"];
  v117  [label="411:  if (Double.doubleToLongBits(data[0]) < 0)"];
  v118  [label="413:  return negate();"];
  v119  [label="endif"];
  v120  [label="415:  return this;"];
  v121  [label="422:  DerivativeStructure ceil()"];
  v122  [label="423:  return new DerivativeStructure(compiler.getFreeParameters(),  compiler.getOrder(),  FastMath.ceil(data[0]));"];
  v123  [label="431:  DerivativeStructure floor()"];
  v124  [label="432:  return new DerivativeStructure(compiler.getFreeParameters(),  compiler.getOrder(),  FastMath.floor(data[0]));"];
  v125  [label="440:  DerivativeStructure rint()"];
  v126  [label="441:  return new DerivativeStructure(compiler.getFreeParameters(),  compiler.getOrder(),  FastMath.rint(data[0]));"];
  v127  [label="447:  long round()"];
  v128  [label="448:  return FastMath.round(data[0]);"];
  v129  [label="454:  DerivativeStructure signum()"];
  v130  [label="455:  return new DerivativeStructure(compiler.getFreeParameters(),  compiler.getOrder(),  FastMath.signum(data[0]));"];
  v131  [label="463:  DerivativeStructure copySign(final DerivativeStructure sign)"];
  v132  [label="464:  long m = Double.doubleToLongBits(data[0])"];
  v133  [label="465:  long s = Double.doubleToLongBits(sign.data[0])"];
  v134  [label="466:  if ((m >= 0 && s >= 0) || (m < 0 && s < 0))"];
  v135  [label="467:  return this;"];
  v136  [label="endif"];
  v137  [label="469:  return negate();"];
  v138  [label="475:  DerivativeStructure copySign(final double sign)"];
  v139  [label="476:  long m = Double.doubleToLongBits(data[0])"];
  v140  [label="477:  long s = Double.doubleToLongBits(sign)"];
  v141  [label="478:  if ((m >= 0 && s >= 0) || (m < 0 && s < 0))"];
  v142  [label="479:  return this;"];
  v143  [label="endif"];
  v144  [label="481:  return negate();"];
  v145  [label="492:  int getExponent()"];
  v146  [label="493:  return FastMath.getExponent(data[0]);"];
  v147  [label="499:  DerivativeStructure scalb(final int n)"];
  v148  [label="500:  final DerivativeStructure ds = new DerivativeStructure(compiler)"];
  v149  [label="501:  for (  int i = 0 ; i < ds.data.length ;   ++i)"];
  v152  [label="endfor"];
  v153  [label="502:  ds.data[i] = FastMath.scalb(data[i], n)"];
  v154  [label="504:  return ds;"];
  v155  [label="512:  DerivativeStructure hypot(final DerivativeStructure y)"];
  v156  [label="515:  compiler.checkCompatibility(y.compiler)"];
  v157  [label="517:  if (Double.isInfinite(data[0]) || Double.isInfinite(y.data[0]))"];
  v158  [label="518:  return new DerivativeStructure(compiler.getFreeParameters(),  compiler.getFreeParameters(),  Double.POSITIVE_INFINITY);"];
  v159  [label="endif"];
  v160  [label="521:  if (Double.isNaN(data[0]) || Double.isNaN(y.data[0]))"];
  v161  [label="522:  return new DerivativeStructure(compiler.getFreeParameters(),  compiler.getFreeParameters(),  Double.NaN);"];
  v162  [label="endif"];
  v163  [label="527:  final int expX = getExponent()"];
  v164  [label="528:  final int expY = y.getExponent()"];
  v165  [label="529:  if (expX > expY + 27)"];
  v166  [label="531:  return abs();"];
  v167  [label="endif"];
  v168  [label="532:  if (expY > expX + 27)"];
  v169  [label="534:  return y.abs();"];
  v170  [label="endif"];
  v171  [label="538:  final int middleExp = (expX + expY) / 2"];
  v172  [label="541:  final DerivativeStructure scaledX = scalb(-middleExp)"];
  v173  [label="542:  final DerivativeStructure scaledY = y.scalb(-middleExp)"];
  v174  [label="545:  final DerivativeStructure scaledH = scaledX.multiply(scaledX).add(scaledY.multiply(scaledY)).sqrt()"];
  v175  [label="549:  return scaledH.scalb(middleExp);"];
  v176  [label="573:  DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y)"];
  v177  [label="575:  return x.hypot(y);"];
  v178  [label="586:  DerivativeStructure compose(final double ... f)"];
  v179  [label="588:  if (f.length != getOrder() + 1)"];
  v180  [label="589:  throw new DimensionMismatchException(f.length, getOrder() + 1)"];
  v181  [label="endif"];
  v182  [label="591:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v183  [label="592:  compiler.compose(data, 0, f, result.data, 0)"];
  v184  [label="593:  return result;"];
  v185  [label="597:  DerivativeStructure reciprocal()"];
  v186  [label="598:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v187  [label="599:  compiler.pow(data, 0, -1, result.data, 0)"];
  v188  [label="600:  return result;"];
  v189  [label="606:  DerivativeStructure sqrt()"];
  v190  [label="607:  return rootN(2);"];
  v191  [label="613:  DerivativeStructure cbrt()"];
  v192  [label="614:  return rootN(3);"];
  v193  [label="620:  DerivativeStructure rootN(final int n)"];
  v194  [label="621:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v195  [label="622:  compiler.rootN(data, 0, n, result.data, 0)"];
  v196  [label="623:  return result;"];
  v197  [label="627:  Field<DerivativeStructure> getField()"];
  v198  [label="628:  return new Field<DerivativeStructure>() {  /** {@inheritDoc} */ public DerivativeStructure getZero() { return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0); }  /** {@inheritDoc} */ public DerivativeStructure getOne() { return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0); }  /** {@inheritDoc} */ public Class<? extends FieldElement<DerivativeStructure>> getRuntimeClass() { return DerivativeStructure.class; }  };"];
  v199  [label="654:  DerivativeStructure pow(final double a, final DerivativeStructure x)"];
  v200  [label="655:  final DerivativeStructure result = new DerivativeStructure(x.compiler)"];
  v201  [label="656:  x.compiler.pow(a, x.data, 0, result.data, 0)"];
  v202  [label="657:  return result;"];
  v203  [label="663:  DerivativeStructure pow(final double p)"];
  v204  [label="664:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v205  [label="665:  compiler.pow(data, 0, p, result.data, 0)"];
  v206  [label="666:  return result;"];
  v207  [label="672:  DerivativeStructure pow(final int n)"];
  v208  [label="673:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v209  [label="674:  compiler.pow(data, 0, n, result.data, 0)"];
  v210  [label="675:  return result;"];
  v211  [label="683:  DerivativeStructure pow(final DerivativeStructure e)"];
  v212  [label="685:  compiler.checkCompatibility(e.compiler)"];
  v213  [label="686:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v214  [label="687:  compiler.pow(data, 0, e.data, 0, result.data, 0)"];
  v215  [label="688:  return result;"];
  v216  [label="694:  DerivativeStructure exp()"];
  v217  [label="695:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v218  [label="696:  compiler.exp(data, 0, result.data, 0)"];
  v219  [label="697:  return result;"];
  v220  [label="703:  DerivativeStructure expm1()"];
  v221  [label="704:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v222  [label="705:  compiler.expm1(data, 0, result.data, 0)"];
  v223  [label="706:  return result;"];
  v224  [label="712:  DerivativeStructure log()"];
  v225  [label="713:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v226  [label="714:  compiler.log(data, 0, result.data, 0)"];
  v227  [label="715:  return result;"];
  v228  [label="721:  DerivativeStructure log1p()"];
  v229  [label="722:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v230  [label="723:  compiler.log1p(data, 0, result.data, 0)"];
  v231  [label="724:  return result;"];
  v232  [label="730:  DerivativeStructure log10()"];
  v233  [label="731:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v234  [label="732:  compiler.log10(data, 0, result.data, 0)"];
  v235  [label="733:  return result;"];
  v236  [label="739:  DerivativeStructure cos()"];
  v237  [label="740:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v238  [label="741:  compiler.cos(data, 0, result.data, 0)"];
  v239  [label="742:  return result;"];
  v240  [label="748:  DerivativeStructure sin()"];
  v241  [label="749:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v242  [label="750:  compiler.sin(data, 0, result.data, 0)"];
  v243  [label="751:  return result;"];
  v244  [label="757:  DerivativeStructure tan()"];
  v245  [label="758:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v246  [label="759:  compiler.tan(data, 0, result.data, 0)"];
  v247  [label="760:  return result;"];
  v248  [label="766:  DerivativeStructure acos()"];
  v249  [label="767:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v250  [label="768:  compiler.acos(data, 0, result.data, 0)"];
  v251  [label="769:  return result;"];
  v252  [label="775:  DerivativeStructure asin()"];
  v253  [label="776:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v254  [label="777:  compiler.asin(data, 0, result.data, 0)"];
  v255  [label="778:  return result;"];
  v256  [label="784:  DerivativeStructure atan()"];
  v257  [label="785:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v258  [label="786:  compiler.atan(data, 0, result.data, 0)"];
  v259  [label="787:  return result;"];
  v260  [label="793:  DerivativeStructure atan2(final DerivativeStructure x)"];
  v261  [label="795:  compiler.checkCompatibility(x.compiler)"];
  v262  [label="796:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v263  [label="797:  compiler.atan2(data, 0, x.data, 0, result.data, 0)"];
  v264  [label="798:  return result;"];
  v265  [label="809:  DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x)"];
  v266  [label="811:  return y.atan2(x);"];
  v267  [label="817:  DerivativeStructure cosh()"];
  v268  [label="818:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v269  [label="819:  compiler.cosh(data, 0, result.data, 0)"];
  v270  [label="820:  return result;"];
  v271  [label="826:  DerivativeStructure sinh()"];
  v272  [label="827:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v273  [label="828:  compiler.sinh(data, 0, result.data, 0)"];
  v274  [label="829:  return result;"];
  v275  [label="835:  DerivativeStructure tanh()"];
  v276  [label="836:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v277  [label="837:  compiler.tanh(data, 0, result.data, 0)"];
  v278  [label="838:  return result;"];
  v279  [label="844:  DerivativeStructure acosh()"];
  v280  [label="845:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v281  [label="846:  compiler.acosh(data, 0, result.data, 0)"];
  v282  [label="847:  return result;"];
  v283  [label="853:  DerivativeStructure asinh()"];
  v284  [label="854:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v285  [label="855:  compiler.asinh(data, 0, result.data, 0)"];
  v286  [label="856:  return result;"];
  v287  [label="862:  DerivativeStructure atanh()"];
  v288  [label="863:  final DerivativeStructure result = new DerivativeStructure(compiler)"];
  v289  [label="864:  compiler.atanh(data, 0, result.data, 0)"];
  v290  [label="865:  return result;"];
  v291  [label="871:  DerivativeStructure toDegrees()"];
  v292  [label="872:  final DerivativeStructure ds = new DerivativeStructure(compiler)"];
  v293  [label="873:  for (  int i = 0 ; i < ds.data.length ;   ++i)"];
  v296  [label="endfor"];
  v297  [label="874:  ds.data[i] = FastMath.toDegrees(data[i])"];
  v298  [label="876:  return ds;"];
  v299  [label="882:  DerivativeStructure toRadians()"];
  v300  [label="883:  final DerivativeStructure ds = new DerivativeStructure(compiler)"];
  v301  [label="884:  for (  int i = 0 ; i < ds.data.length ;   ++i)"];
  v304  [label="endfor"];
  v305  [label="885:  ds.data[i] = FastMath.toRadians(data[i])"];
  v306  [label="887:  return ds;"];
  v307  [label="895:  double taylor(final double ... delta)"];
  v308  [label="896:  return compiler.taylor(data, 0, delta);"];
  v309  [label="904:  DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b)"];
  v310  [label="908:  final double[] aDouble = new double[a.length]"];
  v311  [label="909:  for (  int i = 0 ; i < a.length ;   ++i)"];
  v314  [label="endfor"];
  v315  [label="910:  aDouble[i] = a[i].getValue()"];
  v316  [label="912:  final double[] bDouble = new double[b.length]"];
  v317  [label="913:  for (  int i = 0 ; i < b.length ;   ++i)"];
  v320  [label="endfor"];
  v321  [label="914:  bDouble[i] = b[i].getValue()"];
  v322  [label="916:  final double accurateValue = MathArrays.linearCombination(aDouble, bDouble)"];
  v323  [label="919:  DerivativeStructure simpleValue = a[0].getField().getZero()"];
  v324  [label="920:  for (  int i = 0 ; i < a.length ;   ++i)"];
  v327  [label="endfor"];
  v328  [label="921:  simpleValue = simpleValue.add(a[i].multiply(b[i]))"];
  v329  [label="925:  final double[] all = simpleValue.getAllDerivatives()"];
  v330  [label="926:  all[0] = accurateValue"];
  v331  [label="927:  return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);"];
  v332  [label="936:  DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b)"];
  v333  [label="940:  final double[] bDouble = new double[b.length]"];
  v334  [label="941:  for (  int i = 0 ; i < b.length ;   ++i)"];
  v337  [label="endfor"];
  v338  [label="942:  bDouble[i] = b[i].getValue()"];
  v339  [label="944:  final double accurateValue = MathArrays.linearCombination(a, bDouble)"];
  v340  [label="947:  DerivativeStructure simpleValue = b[0].getField().getZero()"];
  v341  [label="948:  for (  int i = 0 ; i < a.length ;   ++i)"];
  v344  [label="endfor"];
  v345  [label="949:  simpleValue = simpleValue.add(b[i].multiply(a[i]))"];
  v346  [label="953:  final double[] all = simpleValue.getAllDerivatives()"];
  v347  [label="954:  all[0] = accurateValue"];
  v348  [label="955:  return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), all);"];
  v349  [label="964:  DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,  final DerivativeStructure a2, final DerivativeStructure b2)"];
  v350  [label="969:  final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(), a2.getValue(), b2.getValue())"];
  v351  [label="973:  final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2))"];
  v352  [label="976:  final double[] all = simpleValue.getAllDerivatives()"];
  v353  [label="977:  all[0] = accurateValue"];
  v354  [label="978:  return new DerivativeStructure(getFreeParameters(), getOrder(), all);"];
  v355  [label="987:  DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,  final double a2, final DerivativeStructure b2)"];
  v356  [label="992:  final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(), a2, b2.getValue())"];
  v357  [label="996:  final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2))"];
  v358  [label="999:  final double[] all = simpleValue.getAllDerivatives()"];
  v359  [label="1000:  all[0] = accurateValue"];
  v360  [label="1001:  return new DerivativeStructure(getFreeParameters(), getOrder(), all);"];
  v361  [label="1010:  DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,  final DerivativeStructure a2, final DerivativeStructure b2,  final DerivativeStructure a3, final DerivativeStructure b3)"];
  v362  [label="1016:  final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(), a2.getValue(), b2.getValue(), a3.getValue(), b3.getValue())"];
  v363  [label="1021:  final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3))"];
  v364  [label="1024:  final double[] all = simpleValue.getAllDerivatives()"];
  v365  [label="1025:  all[0] = accurateValue"];
  v366  [label="1026:  return new DerivativeStructure(getFreeParameters(), getOrder(), all);"];
  v367  [label="1035:  DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,  final double a2, final DerivativeStructure b2,  final double a3, final DerivativeStructure b3)"];
  v368  [label="1041:  final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(), a2, b2.getValue(), a3, b3.getValue())"];
  v369  [label="1046:  final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3))"];
  v370  [label="1049:  final double[] all = simpleValue.getAllDerivatives()"];
  v371  [label="1050:  all[0] = accurateValue"];
  v372  [label="1051:  return new DerivativeStructure(getFreeParameters(), getOrder(), all);"];
  v373  [label="1060:  DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,  final DerivativeStructure a2, final DerivativeStructure b2,  final DerivativeStructure a3, final DerivativeStructure b3,  final DerivativeStructure a4, final DerivativeStructure b4)"];
  v374  [label="1067:  final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(), a2.getValue(), b2.getValue(), a3.getValue(), b3.getValue(), a4.getValue(), b4.getValue())"];
  v375  [label="1073:  final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4))"];
  v376  [label="1076:  final double[] all = simpleValue.getAllDerivatives()"];
  v377  [label="1077:  all[0] = accurateValue"];
  v378  [label="1078:  return new DerivativeStructure(getFreeParameters(), getOrder(), all);"];
  v379  [label="1087:  DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,  final double a2, final DerivativeStructure b2,  final double a3, final DerivativeStructure b3,  final double a4, final DerivativeStructure b4)"];
  v380  [label="1094:  final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(), a2, b2.getValue(), a3, b3.getValue(), a4, b4.getValue())"];
  v381  [label="1100:  final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4))"];
  v382  [label="1103:  final double[] all = simpleValue.getAllDerivatives()"];
  v383  [label="1104:  all[0] = accurateValue"];
  v384  [label="1105:  return new DerivativeStructure(getFreeParameters(), getOrder(), all);"];
  v385  [label="1120:  boolean equals(Object other)"];
  v386  [label="1122:  if (this == other)"];
  v387  [label="1123:  return true;"];
  v388  [label="endif"];
  v389  [label="1126:  if (other instanceof DerivativeStructure)"];
  v390  [label="1127:  final DerivativeStructure rhs = (DerivativeStructure)other"];
  v391  [label="1128:  return (getFreeParameters() == rhs.getFreeParameters()) &&  (getOrder() == rhs.getOrder()) &&  MathArrays.equals(data, rhs.data);"];
  v392  [label="endif"];
  v393  [label="1133:  return false;"];
  v394  [label="1143:  int hashCode()"];
  v395  [label="1144:  return 227 + 229 * getFreeParameters() + 233 * getOrder() + 239 * MathUtils.hash(data);"];
  v396  [label="1151:  Object writeReplace()"];
  v397  [label="1152:  return new DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data);"];
  v398  [label="1181:  DataTransferObject (final int variables, final int order, final double[] data)"];
  v399  [label="1182:  this.variables = variables"];
  v400  [label="1183:  this.order = order"];
  v401  [label="1184:  this.data  = data"];
  v402  [label="1190:  Object readResolve()"];
  v403  [label="1191:  return new DerivativeStructure(variables, order, data);"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v4 -> v5;
  v6 -> v7;
  v7 -> v8;
  v9 -> v10;
  v10 -> v11;
  v11 -> v12  [label="True"];
  v11 -> v13  [label="False"];
  v13 -> v14;
  v14 -> v15  [label="True"];
  v15 -> v16;
  v14 -> v16  [label="False"];
  v17 -> v18;
  v18 -> v19;
  v19 -> v20;
  v21 -> v22;
  v22 -> v23;
  v23 -> v24;
  v24 -> v25;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v31;
  v32 -> v33;
  v33 -> v34;
  v34 -> v35  [label="True"];
  v34 -> v36  [label="False"];
  v36 -> v37;
  v38 -> v39;
  v39 -> v40;
  v41 -> v42;
  v43 -> v44;
  v45 -> v46;
  v47 -> v48;
  v49 -> v50;
  v51 -> v52;
  v53 -> v54;
  v55 -> v56;
  v56 -> v57;
  v57 -> v58;
  v59 -> v60;
  v60 -> v61;
  v61 -> v62;
  v62 -> v63;
  v64 -> v65;
  v66 -> v67;
  v67 -> v68;
  v68 -> v69;
  v69 -> v70;
  v71 -> v72;
  v73 -> v74;
  v74 -> v75;
  v75 -> v78  [label="False"];
  v75 -> v79  [label="True"];
  v79 -> v75;
  v78 -> v80;
  v81 -> v82;
  v82 -> v83;
  v83 -> v84;
  v84 -> v85;
  v86 -> v87;
  v87 -> v88;
  v88 -> v91  [label="False"];
  v88 -> v92  [label="True"];
  v92 -> v88;
  v91 -> v93;
  v94 -> v95;
  v95 -> v96;
  v96 -> v97;
  v97 -> v98;
  v99 -> v100;
  v100 -> v101;
  v101 -> v102;
  v103 -> v104;
  v104 -> v105;
  v105 -> v106;
  v106 -> v107;
  v108 -> v109;
  v109 -> v110;
  v110 -> v113  [label="False"];
  v110 -> v114  [label="True"];
  v114 -> v110;
  v113 -> v115;
  v116 -> v117;
  v117 -> v118  [label="True"];
  v117 -> v120  [label="False"];
  v121 -> v122;
  v123 -> v124;
  v125 -> v126;
  v127 -> v128;
  v129 -> v130;
  v131 -> v132;
  v132 -> v133;
  v133 -> v134;
  v134 -> v135  [label="True"];
  v134 -> v136  [label="False"];
  v136 -> v137;
  v138 -> v139;
  v139 -> v140;
  v140 -> v141;
  v141 -> v142  [label="True"];
  v141 -> v143  [label="False"];
  v143 -> v144;
  v145 -> v146;
  v147 -> v148;
  v148 -> v149;
  v149 -> v152  [label="False"];
  v149 -> v153  [label="True"];
  v153 -> v149;
  v152 -> v154;
  v155 -> v156;
  v156 -> v157;
  v157 -> v158  [label="True"];
  v157 -> v160  [label="False"];
  v160 -> v161  [label="True"];
  v160 -> v163  [label="False"];
  v163 -> v164;
  v164 -> v165;
  v165 -> v166  [label="True"];
  v165 -> v168  [label="False"];
  v168 -> v169  [label="True"];
  v168 -> v171  [label="False"];
  v171 -> v172;
  v172 -> v173;
  v173 -> v174;
  v174 -> v175;
  v170 -> v167;
  v167 -> v162;
  v162 -> v159;
  v176 -> v177;
  v178 -> v179;
  v179 -> v180  [label="True"];
  v179 -> v181  [label="False"];
  v181 -> v182;
  v182 -> v183;
  v183 -> v184;
  v185 -> v186;
  v186 -> v187;
  v187 -> v188;
  v189 -> v190;
  v191 -> v192;
  v193 -> v194;
  v194 -> v195;
  v195 -> v196;
  v197 -> v198;
  v199 -> v200;
  v200 -> v201;
  v201 -> v202;
  v203 -> v204;
  v204 -> v205;
  v205 -> v206;
  v207 -> v208;
  v208 -> v209;
  v209 -> v210;
  v211 -> v212;
  v212 -> v213;
  v213 -> v214;
  v214 -> v215;
  v216 -> v217;
  v217 -> v218;
  v218 -> v219;
  v220 -> v221;
  v221 -> v222;
  v222 -> v223;
  v224 -> v225;
  v225 -> v226;
  v226 -> v227;
  v228 -> v229;
  v229 -> v230;
  v230 -> v231;
  v232 -> v233;
  v233 -> v234;
  v234 -> v235;
  v236 -> v237;
  v237 -> v238;
  v238 -> v239;
  v240 -> v241;
  v241 -> v242;
  v242 -> v243;
  v244 -> v245;
  v245 -> v246;
  v246 -> v247;
  v248 -> v249;
  v249 -> v250;
  v250 -> v251;
  v252 -> v253;
  v253 -> v254;
  v254 -> v255;
  v256 -> v257;
  v257 -> v258;
  v258 -> v259;
  v260 -> v261;
  v261 -> v262;
  v262 -> v263;
  v263 -> v264;
  v265 -> v266;
  v267 -> v268;
  v268 -> v269;
  v269 -> v270;
  v271 -> v272;
  v272 -> v273;
  v273 -> v274;
  v275 -> v276;
  v276 -> v277;
  v277 -> v278;
  v279 -> v280;
  v280 -> v281;
  v281 -> v282;
  v283 -> v284;
  v284 -> v285;
  v285 -> v286;
  v287 -> v288;
  v288 -> v289;
  v289 -> v290;
  v291 -> v292;
  v292 -> v293;
  v293 -> v296  [label="False"];
  v293 -> v297  [label="True"];
  v297 -> v293;
  v296 -> v298;
  v299 -> v300;
  v300 -> v301;
  v301 -> v304  [label="False"];
  v301 -> v305  [label="True"];
  v305 -> v301;
  v304 -> v306;
  v307 -> v308;
  v309 -> v310;
  v310 -> v311;
  v311 -> v314  [label="False"];
  v311 -> v315  [label="True"];
  v315 -> v311;
  v314 -> v316;
  v316 -> v317;
  v317 -> v320  [label="False"];
  v317 -> v321  [label="True"];
  v321 -> v317;
  v320 -> v322;
  v322 -> v323;
  v323 -> v324;
  v324 -> v327  [label="False"];
  v324 -> v328  [label="True"];
  v328 -> v324;
  v327 -> v329;
  v329 -> v330;
  v330 -> v331;
  v332 -> v333;
  v333 -> v334;
  v334 -> v337  [label="False"];
  v334 -> v338  [label="True"];
  v338 -> v334;
  v337 -> v339;
  v339 -> v340;
  v340 -> v341;
  v341 -> v344  [label="False"];
  v341 -> v345  [label="True"];
  v345 -> v341;
  v344 -> v346;
  v346 -> v347;
  v347 -> v348;
  v349 -> v350;
  v350 -> v351;
  v351 -> v352;
  v352 -> v353;
  v353 -> v354;
  v355 -> v356;
  v356 -> v357;
  v357 -> v358;
  v358 -> v359;
  v359 -> v360;
  v361 -> v362;
  v362 -> v363;
  v363 -> v364;
  v364 -> v365;
  v365 -> v366;
  v367 -> v368;
  v368 -> v369;
  v369 -> v370;
  v370 -> v371;
  v371 -> v372;
  v373 -> v374;
  v374 -> v375;
  v375 -> v376;
  v376 -> v377;
  v377 -> v378;
  v379 -> v380;
  v380 -> v381;
  v381 -> v382;
  v382 -> v383;
  v383 -> v384;
  v385 -> v386;
  v386 -> v387  [label="True"];
  v386 -> v388  [label="False"];
  v388 -> v389;
  v389 -> v390  [label="True"];
  v390 -> v391;
  v389 -> v392  [label="False"];
  v392 -> v393;
  v394 -> v395;
  v396 -> v397;
  v398 -> v399;
  v399 -> v400;
  v400 -> v401;
  v402 -> v403;
  // end-of-graph
}
