digraph FiniteDifferencesDifferentiator_CFG {
  // graph-vertices
  v1  [label="107:  FiniteDifferencesDifferentiator (final int nbPoints, final double stepSize)"];
  v2  [label="109:  this(nbPoints, stepSize, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY)"];
  v3  [label="141:  FiniteDifferencesDifferentiator (final int nbPoints, final double stepSize,  final double tLower, final double tUpper)"];
  v4  [label="145:  if (nbPoints <= 1)"];
  v5  [label="146:  throw new NumberIsTooSmallException(stepSize, 1, false)"];
  v6  [label="endif"];
  v7  [label="148:  this.nbPoints = nbPoints"];
  v8  [label="150:  if (stepSize <= 0)"];
  v9  [label="151:  throw new NotPositiveException(stepSize)"];
  v10  [label="endif"];
  v11  [label="153:  this.stepSize = stepSize"];
  v12  [label="155:  halfSampleSpan = 0.5 * stepSize * (nbPoints - 1)"];
  v13  [label="156:  if (2 * halfSampleSpan >= tUpper - tLower)"];
  v14  [label="157:  throw new NumberIsTooLargeException(2 * halfSampleSpan, tUpper - tLower, false)"];
  v15  [label="endif"];
  v16  [label="159:  final double safety = FastMath.ulp(halfSampleSpan)"];
  v17  [label="160:  this.tMin = tLower + halfSampleSpan + safety"];
  v18  [label="161:  this.tMax = tUpper - halfSampleSpan - safety"];
  v19  [label="169:  int getNbPoints()"];
  v20  [label="170:  return nbPoints;"];
  v21  [label="177:  double getStepSize()"];
  v22  [label="178:  return stepSize;"];
  v23  [label="193:  DerivativeStructure evaluate(final DerivativeStructure t, final double t0,  final double[] y)"];
  v24  [label="198:  final double[] top  = new double[nbPoints]"];
  v25  [label="199:  final double[] bottom = new double[nbPoints]"];
  v26  [label="201:  for (  int i = 0 ; i < nbPoints ;   ++i)"];
  v29  [label="endfor"];
  v30  [label="204:  bottom[i] = y[i]"];
  v31  [label="205:  for (  int j = 1 ; j <= i ;   ++j)"];
  v34  [label="endfor"];
  v35  [label="206:  bottom[i - j] = (bottom[i - j + 1] - bottom[i - j]) / (j * stepSize)"];
  v36  [label="210:  top[i] = bottom[0]"];
  v37  [label="215:  final int order  = t.getOrder()"];
  v38  [label="216:  final int parameters = t.getFreeParameters()"];
  v39  [label="217:  final double[] derivatives = t.getAllDerivatives()"];
  v40  [label="218:  final double dt0 = t.getValue() - t0"];
  v41  [label="219:  DerivativeStructure interpolation = new DerivativeStructure(parameters, order, 0.0)"];
  v42  [label="220:  DerivativeStructure monomial = null"];
  v43  [label="221:  for (  int i = 0 ; i < nbPoints ;   ++i)"];
  v46  [label="endfor"];
  v47  [label="222:  if (i == 0)"];
  v48  [label="224:  monomial = new DerivativeStructure(parameters, order, 1.0)"];
  v49  [label="endif"];
  v50  [label="227:  derivatives[0] = dt0 - (i - 1) * stepSize"];
  v51  [label="228:  final DerivativeStructure deltaX = new DerivativeStructure(parameters, order, derivatives)"];
  v52  [label="229:  monomial = monomial.multiply(deltaX)"];
  v53  [label="231:  interpolation = interpolation.add(monomial.multiply(top[i]))"];
  v54  [label="234:  return interpolation;"];
  v55  [label="244:  UnivariateDifferentiableFunction differentiate(final UnivariateFunction function)"];
  v56  [label="245:  return new UnivariateDifferentiableFunction() {  /** {@inheritDoc} */ public double value(final double x) throws MathIllegalArgumentException { return function.value(x); }  /** {@inheritDoc} */ public DerivativeStructure value(final DerivativeStructure t) throws MathIllegalArgumentException {  // check we can achieve the requested derivation order with the sample if (t.getOrder() >= nbPoints) { throw new NumberIsTooLargeException(t.getOrder(), nbPoints, false); }  // compute sample position, trying to be centered if possible final double t0 = FastMath.max(FastMath.min(t.getValue(), tMax), tMin) - halfSampleSpan;  // compute sample points final double[] y = new double[nbPoints]; for (int i = 0; i < nbPoints; ++i) { y[i] = function.value(t0 + i * stepSize); }  // evaluate derivatives return evaluate(t, t0, y);  }  };"];
  v57  [label="284:  UnivariateDifferentiableVectorFunction differentiate(final UnivariateVectorFunction function)"];
  v58  [label="285:  return new UnivariateDifferentiableVectorFunction() {  /** {@inheritDoc} */ public double[]value(final double x) throws MathIllegalArgumentException { return function.value(x); }  /** {@inheritDoc} */ public DerivativeStructure[] value(final DerivativeStructure t) throws MathIllegalArgumentException {  // check we can achieve the requested derivation order with the sample if (t.getOrder() >= nbPoints) { throw new NumberIsTooLargeException(t.getOrder(), nbPoints, false); }  // compute sample position, trying to be centered if possible final double t0 = FastMath.max(FastMath.min(t.getValue(), tMax), tMin) - halfSampleSpan;  // compute sample points double[][] y = null; for (int i = 0; i < nbPoints; ++i) { final double[] v = function.value(t0 + i * stepSize); if (i == 0) { y = new double[v.length][nbPoints]; } for (int j = 0; j < v.length; ++j) { y[j][i] = v[j]; } }  // evaluate derivatives final DerivativeStructure[] value = new DerivativeStructure[y.length]; for (int j = 0; j < value.length; ++j) { value[j] = evaluate(t, t0, y[j]); }  return value;  }  };"];
  v59  [label="335:  UnivariateDifferentiableMatrixFunction differentiate(final UnivariateMatrixFunction function)"];
  v60  [label="336:  return new UnivariateDifferentiableMatrixFunction() {  /** {@inheritDoc} */ public double[][]  value(final double x) throws MathIllegalArgumentException { return function.value(x); }  /** {@inheritDoc} */ public DerivativeStructure[][]  value(final DerivativeStructure t) throws MathIllegalArgumentException {  // check we can achieve the requested derivation order with the sample if (t.getOrder() >= nbPoints) { throw new NumberIsTooLargeException(t.getOrder(), nbPoints, false); }  // compute sample position, trying to be centered if possible final double t0 = FastMath.max(FastMath.min(t.getValue(), tMax), tMin) - halfSampleSpan;  // compute sample points double[][][] y = null; for (int i = 0; i < nbPoints; ++i) { final double[][] v = function.value(t0 + i * stepSize); if (i == 0) { y = new double[v.length][v[0].length][nbPoints]; } for (int j = 0; j < v.length; ++j) { for (int k = 0; k < v[j].length; ++k) { y[j][k][i] = v[j][k]; } } }  // evaluate derivatives final DerivativeStructure[][] value = new DerivativeStructure[y.length][y[0].length]; for (int j = 0; j < value.length; ++j) { for (int k = 0; k < y[j].length; ++k) { value[j][k] = evaluate(t, t0, y[j][k]); } }  return value;  }  };"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5  [label="True"];
  v4 -> v6  [label="False"];
  v6 -> v7;
  v7 -> v8;
  v8 -> v9  [label="True"];
  v8 -> v10  [label="False"];
  v10 -> v11;
  v11 -> v12;
  v12 -> v13;
  v13 -> v14  [label="True"];
  v13 -> v15  [label="False"];
  v15 -> v16;
  v16 -> v17;
  v17 -> v18;
  v19 -> v20;
  v21 -> v22;
  v23 -> v24;
  v24 -> v25;
  v25 -> v26;
  v26 -> v29  [label="False"];
  v26 -> v30  [label="True"];
  v30 -> v31;
  v31 -> v34  [label="False"];
  v31 -> v35  [label="True"];
  v35 -> v31;
  v34 -> v36;
  v36 -> v26;
  v29 -> v37;
  v37 -> v38;
  v38 -> v39;
  v39 -> v40;
  v40 -> v41;
  v41 -> v42;
  v42 -> v43;
  v43 -> v46  [label="False"];
  v43 -> v47  [label="True"];
  v47 -> v48  [label="True"];
  v48 -> v49;
  v47 -> v50  [label="False"];
  v50 -> v51;
  v51 -> v52;
  v52 -> v49;
  v49 -> v53;
  v53 -> v43;
  v46 -> v54;
  v55 -> v56;
  v57 -> v58;
  v59 -> v60;
  // end-of-graph
}
