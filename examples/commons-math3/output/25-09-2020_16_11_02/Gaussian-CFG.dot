digraph Gaussian_CFG {
  // graph-vertices
  v1  [label="59:  Gaussian (double norm, double mean, double sigma)"];
  v2  [label="63:  if (sigma <= 0)"];
  v3  [label="64:  throw new NotStrictlyPositiveException(sigma)"];
  v4  [label="endif"];
  v5  [label="67:  this.norm = norm"];
  v6  [label="68:  this.mean = mean"];
  v7  [label="69:  this.is = 1 / sigma"];
  v8  [label="70:  this.i2s2 = 0.5 * is * is"];
  v9  [label="80:  Gaussian (double mean, double sigma)"];
  v10  [label="83:  this(1 / (sigma * FastMath.sqrt(2 * Math.PI)), mean, sigma)"];
  v11  [label="89:  Gaussian ()"];
  v12  [label="90:  this(0, 1)"];
  v13  [label="94:  double value(double x)"];
  v14  [label="95:  return value(x - mean, norm, i2s2);"];
  v15  [label="102:  UnivariateFunction derivative()"];
  v16  [label="103:  return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();"];
  v17  [label="127:  double value(double x, double ... param)"];
  v18  [label="131:  validateParameters(param)"];
  v19  [label="133:  final double diff = x - param[1]"];
  v20  [label="134:  final double i2s2 = 1 / (2 * param[2] * param[2])"];
  v21  [label="135:  return Gaussian.value(diff, param[0], i2s2);"];
  v22  [label="152:  double[] gradient(double x, double ... param)"];
  v23  [label="156:  validateParameters(param)"];
  v24  [label="158:  final double norm = param[0]"];
  v25  [label="159:  final double diff = x - param[1]"];
  v26  [label="160:  final double sigma = param[2]"];
  v27  [label="161:  final double i2s2 = 1 / (2 * sigma * sigma)"];
  v28  [label="163:  final double n = Gaussian.value(diff, 1, i2s2)"];
  v29  [label="164:  final double m = norm * n * 2 * i2s2 * diff"];
  v30  [label="165:  final double s = m * diff / sigma"];
  v31  [label="167:  return new double[] { n, m, s };"];
  v32  [label="181:  void validateParameters(double[] param)"];
  v33  [label="185:  if (param == null)"];
  v34  [label="186:  throw new NullArgumentException()"];
  v35  [label="endif"];
  v36  [label="188:  if (param.length != 3)"];
  v37  [label="189:  throw new DimensionMismatchException(param.length, 3)"];
  v38  [label="endif"];
  v39  [label="191:  if (param[2] <= 0)"];
  v40  [label="192:  throw new NotStrictlyPositiveException(param[2])"];
  v41  [label="endif"];
  v42  [label="203:  double value(double xMinusMean, double norm, double i2s2)"];
  v43  [label="206:  return norm * FastMath.exp(-xMinusMean * xMinusMean * i2s2);"];
  v44  [label="212:  DerivativeStructure value(final DerivativeStructure t)"];
  v45  [label="215:  final double u = is * (t.getValue() - mean)"];
  v46  [label="216:  double[] f = new double[t.getOrder() + 1]"];
  v47  [label="225:  final double[] p = new double[f.length]"];
  v48  [label="226:  p[0] = 1"];
  v49  [label="227:  final double u2 = u * u"];
  v50  [label="228:  double coeff = norm * FastMath.exp(-0.5 * u2)"];
  v51  [label="229:  if (coeff <= Precision.SAFE_MIN)"];
  v52  [label="230:  Arrays.fill(f, 0.0)"];
  v53  [label="endif"];
  v54  [label="232:  f[0] = coeff"];
  v55  [label="233:  for (  int n = 1 ; n < f.length ;   ++n)"];
  v58  [label="endfor"];
  v59  [label="236:  double v = 0"];
  v60  [label="237:  p[n] = -p[n - 1]"];
  v61  [label="238:  for (  int k = n ; k >= 0 ;   k -= 2)"];
  v64  [label="endfor"];
  v65  [label="239:  v = v * u2 + p[k]"];
  v66  [label="240:  if (k > 2)"];
  v67  [label="241:  p[k - 2] = (k - 1) * p[k - 1] - p[k - 3]"];
  v68  [label="endif"];
  v69  [label="242:  if (k == 2)"];
  v70  [label="243:  p[0] = p[1]"];
  v71  [label="endif"];
  v72  [label="246:  if ((n & 0x1) == 1)"];
  v73  [label="247:  v *= u"];
  v74  [label="endif"];
  v75  [label="250:  coeff *= is"];
  v76  [label="251:  f[n] = coeff * v"];
  v77  [label="256:  return t.compose(f);"];
  // graph-edges
  v1 -> v2;
  v2 -> v3  [label="True"];
  v2 -> v4  [label="False"];
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8;
  v9 -> v10;
  v11 -> v12;
  v13 -> v14;
  v15 -> v16;
  v17 -> v18;
  v18 -> v19;
  v19 -> v20;
  v20 -> v21;
  v22 -> v23;
  v23 -> v24;
  v24 -> v25;
  v25 -> v26;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v31;
  v32 -> v33;
  v33 -> v34  [label="True"];
  v33 -> v35  [label="False"];
  v35 -> v36;
  v36 -> v37  [label="True"];
  v36 -> v38  [label="False"];
  v38 -> v39;
  v39 -> v40  [label="True"];
  v39 -> v41  [label="False"];
  v42 -> v43;
  v44 -> v45;
  v45 -> v46;
  v46 -> v47;
  v47 -> v48;
  v48 -> v49;
  v49 -> v50;
  v50 -> v51;
  v51 -> v52  [label="True"];
  v52 -> v53;
  v51 -> v54  [label="False"];
  v54 -> v55;
  v55 -> v58  [label="False"];
  v55 -> v59  [label="True"];
  v59 -> v60;
  v60 -> v61;
  v61 -> v64  [label="False"];
  v61 -> v65  [label="True"];
  v65 -> v66;
  v66 -> v67  [label="True"];
  v67 -> v68;
  v66 -> v69  [label="False"];
  v69 -> v70  [label="True"];
  v70 -> v71;
  v69 -> v71  [label="False"];
  v71 -> v68;
  v68 -> v61;
  v64 -> v72;
  v72 -> v73  [label="True"];
  v73 -> v74;
  v72 -> v74  [label="False"];
  v74 -> v75;
  v75 -> v76;
  v76 -> v55;
  v58 -> v53;
  v53 -> v77;
  // end-of-graph
}
