digraph HarmonicOscillator_CFG {
  // graph-vertices
  v1  [label="52:  HarmonicOscillator (double amplitude, double omega, double phase)"];
  v2  [label="55:  this.amplitude = amplitude"];
  v3  [label="56:  this.omega = omega"];
  v4  [label="57:  this.phase = phase"];
  v5  [label="61:  double value(double x)"];
  v6  [label="62:  return value(omega * x + phase, amplitude);"];
  v7  [label="69:  UnivariateFunction derivative()"];
  v8  [label="70:  return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();"];
  v9  [label="93:  double value(double x, double ... param)"];
  v10  [label="96:  validateParameters(param)"];
  v11  [label="97:  return HarmonicOscillator.value(x * param[1] + param[2], param[0]);"];
  v12  [label="113:  double[] gradient(double x, double ... param)"];
  v13  [label="116:  validateParameters(param)"];
  v14  [label="118:  final double amplitude = param[0]"];
  v15  [label="119:  final double omega = param[1]"];
  v16  [label="120:  final double phase = param[2]"];
  v17  [label="122:  final double xTimesOmegaPlusPhase = omega * x + phase"];
  v18  [label="123:  final double a = HarmonicOscillator.value(xTimesOmegaPlusPhase, 1)"];
  v19  [label="124:  final double p = -amplitude * FastMath.sin(xTimesOmegaPlusPhase)"];
  v20  [label="125:  final double w = p * x"];
  v21  [label="127:  return new double[] { a, w, p };"];
  v22  [label="140:  void validateParameters(double[] param)"];
  v23  [label="143:  if (param == null)"];
  v24  [label="144:  throw new NullArgumentException()"];
  v25  [label="endif"];
  v26  [label="146:  if (param.length != 3)"];
  v27  [label="147:  throw new DimensionMismatchException(param.length, 3)"];
  v28  [label="endif"];
  v29  [label="157:  double value(double xTimesOmegaPlusPhase, double amplitude)"];
  v30  [label="159:  return amplitude * FastMath.cos(xTimesOmegaPlusPhase);"];
  v31  [label="165:  DerivativeStructure value(final DerivativeStructure t)"];
  v32  [label="167:  final double x = t.getValue()"];
  v33  [label="168:  double[] f = new double[t.getOrder() + 1]"];
  v34  [label="170:  final double alpha = omega * x + phase"];
  v35  [label="171:  f[0] = amplitude * FastMath.cos(alpha)"];
  v36  [label="172:  if (f.length > 1)"];
  v37  [label="173:  f[1] = -amplitude * omega * FastMath.sin(alpha)"];
  v38  [label="174:  final double mo2 = - omega * omega"];
  v39  [label="175:  for (  int i = 2 ; i < f.length ;   ++i)"];
  v42  [label="endfor"];
  v43  [label="176:  f[i] = mo2 * f[i - 2]"];
  v44  [label="endif"];
  v45  [label="180:  return t.compose(f);"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4;
  v5 -> v6;
  v7 -> v8;
  v9 -> v10;
  v10 -> v11;
  v12 -> v13;
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v17;
  v17 -> v18;
  v18 -> v19;
  v19 -> v20;
  v20 -> v21;
  v22 -> v23;
  v23 -> v24  [label="True"];
  v23 -> v25  [label="False"];
  v25 -> v26;
  v26 -> v27  [label="True"];
  v26 -> v28  [label="False"];
  v29 -> v30;
  v31 -> v32;
  v32 -> v33;
  v33 -> v34;
  v34 -> v35;
  v35 -> v36;
  v36 -> v37  [label="True"];
  v37 -> v38;
  v38 -> v39;
  v39 -> v42  [label="False"];
  v39 -> v43  [label="True"];
  v43 -> v39;
  v42 -> v44;
  v36 -> v44  [label="False"];
  v44 -> v45;
  // end-of-graph
}
