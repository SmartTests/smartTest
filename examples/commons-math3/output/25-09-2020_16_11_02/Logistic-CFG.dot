digraph Logistic_CFG {
  // graph-vertices
  v1  [label="65:  Logistic (double k, double m, double b, double q, double a, double n)"];
  v2  [label="72:  if (n <= 0)"];
  v3  [label="73:  throw new NotStrictlyPositiveException(n)"];
  v4  [label="endif"];
  v5  [label="76:  this.k = k"];
  v6  [label="77:  this.m = m"];
  v7  [label="78:  this.b = b"];
  v8  [label="79:  this.q = q"];
  v9  [label="80:  this.a = a"];
  v10  [label="81:  oneOverN = 1 / n"];
  v11  [label="85:  double value(double x)"];
  v12  [label="86:  return value(m - x, k, b, q, a, oneOverN);"];
  v13  [label="93:  UnivariateFunction derivative()"];
  v14  [label="94:  return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();"];
  v15  [label="123:  double value(double x, double ... param)"];
  v16  [label="127:  validateParameters(param)"];
  v17  [label="128:  return Logistic.value(param[1] - x, param[0], param[2], param[3], param[4], 1 / param[5]);"];
  v18  [label="148:  double[] gradient(double x, double ... param)"];
  v19  [label="152:  validateParameters(param)"];
  v20  [label="154:  final double b = param[2]"];
  v21  [label="155:  final double q = param[3]"];
  v22  [label="157:  final double mMinusX = param[1] - x"];
  v23  [label="158:  final double oneOverN = 1 / param[5]"];
  v24  [label="159:  final double exp = FastMath.exp(b * mMinusX)"];
  v25  [label="160:  final double qExp = q * exp"];
  v26  [label="161:  final double qExp1 = qExp + 1"];
  v27  [label="162:  final double factor1 = (param[0] - param[4]) * oneOverN / FastMath.pow(qExp1, oneOverN)"];
  v28  [label="163:  final double factor2 = -factor1 / qExp1"];
  v29  [label="166:  final double gk = Logistic.value(mMinusX, 1, b, q, 0, oneOverN)"];
  v30  [label="167:  final double gm = factor2 * b * qExp"];
  v31  [label="168:  final double gb = factor2 * mMinusX * qExp"];
  v32  [label="169:  final double gq = factor2 * exp"];
  v33  [label="170:  final double ga = Logistic.value(mMinusX, 0, b, q, 1, oneOverN)"];
  v34  [label="171:  final double gn = factor1 * Math.log(qExp1) * oneOverN"];
  v35  [label="173:  return new double[] { gk, gm, gb, gq, ga, gn };"];
  v36  [label="188:  void validateParameters(double[] param)"];
  v37  [label="192:  if (param == null)"];
  v38  [label="193:  throw new NullArgumentException()"];
  v39  [label="endif"];
  v40  [label="195:  if (param.length != 6)"];
  v41  [label="196:  throw new DimensionMismatchException(param.length, 6)"];
  v42  [label="endif"];
  v43  [label="198:  if (param[5] <= 0)"];
  v44  [label="199:  throw new NotStrictlyPositiveException(param[5])"];
  v45  [label="endif"];
  v46  [label="213:  double value(double mMinusX, double k, double b, double q, double a, double oneOverN)"];
  v47  [label="219:  return a + (k - a) / FastMath.pow(1 + q * FastMath.exp(b * mMinusX), oneOverN);"];
  v48  [label="225:  DerivativeStructure value(final DerivativeStructure t)"];
  v49  [label="226:  return t.negate().add(m).multiply(b).exp().multiply(q).add(1).pow(oneOverN).reciprocal().multiply(k - a).add(a);"];
  // graph-edges
  v1 -> v2;
  v2 -> v3  [label="True"];
  v2 -> v4  [label="False"];
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8;
  v8 -> v9;
  v9 -> v10;
  v11 -> v12;
  v13 -> v14;
  v15 -> v16;
  v16 -> v17;
  v18 -> v19;
  v19 -> v20;
  v20 -> v21;
  v21 -> v22;
  v22 -> v23;
  v23 -> v24;
  v24 -> v25;
  v25 -> v26;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v31;
  v31 -> v32;
  v32 -> v33;
  v33 -> v34;
  v34 -> v35;
  v36 -> v37;
  v37 -> v38  [label="True"];
  v37 -> v39  [label="False"];
  v39 -> v40;
  v40 -> v41  [label="True"];
  v40 -> v42  [label="False"];
  v42 -> v43;
  v43 -> v44  [label="True"];
  v43 -> v45  [label="False"];
  v46 -> v47;
  v48 -> v49;
  // end-of-graph
}
