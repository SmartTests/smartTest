digraph Logit_CFG {
  // graph-vertices
  v1  [label="49:  Logit ()"];
  v2  [label="50:  this(0, 1)"];
  v3  [label="59:  Logit (double lo,  double hi)"];
  v4  [label="61:  this.lo = lo"];
  v5  [label="62:  this.hi = hi"];
  v6  [label="66:  double value(double x)"];
  v7  [label="68:  return value(x, lo, hi);"];
  v8  [label="75:  UnivariateFunction derivative()"];
  v9  [label="76:  return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();"];
  v10  [label="98:  double value(double x, double ... param)"];
  v11  [label="101:  validateParameters(param)"];
  v12  [label="102:  return Logit.value(x, param[0], param[1]);"];
  v13  [label="118:  double[] gradient(double x, double ... param)"];
  v14  [label="121:  validateParameters(param)"];
  v15  [label="123:  final double lo = param[0]"];
  v16  [label="124:  final double hi = param[1]"];
  v17  [label="126:  return new double[] { 1 / (lo - x), 1 / (hi - x) };"];
  v18  [label="139:  void validateParameters(double[] param)"];
  v19  [label="142:  if (param == null)"];
  v20  [label="143:  throw new NullArgumentException()"];
  v21  [label="endif"];
  v22  [label="145:  if (param.length != 2)"];
  v23  [label="146:  throw new DimensionMismatchException(param.length, 2)"];
  v24  [label="endif"];
  v25  [label="158:  double value(double x, double lo, double hi)"];
  v26  [label="162:  if (x < lo || x > hi)"];
  v27  [label="163:  throw new OutOfRangeException(x, lo, hi)"];
  v28  [label="endif"];
  v29  [label="165:  return FastMath.log((x - lo) / (hi - x));"];
  v30  [label="172:  DerivativeStructure value(final DerivativeStructure t)"];
  v31  [label="174:  final double x = t.getValue()"];
  v32  [label="175:  if (x < lo || x > hi)"];
  v33  [label="176:  throw new OutOfRangeException(x, lo, hi)"];
  v34  [label="endif"];
  v35  [label="178:  double[] f = new double[t.getOrder() + 1]"];
  v36  [label="181:  f[0] = FastMath.log((x - lo) / (hi - x))"];
  v37  [label="183:  if (Double.isInfinite(f[0]))"];
  v38  [label="185:  if (f.length > 1)"];
  v39  [label="186:  f[1] = Double.POSITIVE_INFINITY"];
  v40  [label="endif"];
  v41  [label="193:  for (  int i = 2 ; i < f.length ;   ++i)"];
  v44  [label="endfor"];
  v45  [label="194:  f[i] = f[i - 2]"];
  v46  [label="endif"];
  v47  [label="200:  final double invL = 1.0 / (x - lo)"];
  v48  [label="201:  double xL = invL"];
  v49  [label="202:  final double invH = 1.0 / (hi - x)"];
  v50  [label="203:  double xH = invH"];
  v51  [label="204:  for (  int i = 1 ; i < f.length ;   ++i)"];
  v54  [label="endfor"];
  v55  [label="205:  f[i] = xL + xH"];
  v56  [label="206:  xL  *= -i * invL"];
  v57  [label="207:  xH  *=  i * invH"];
  v58  [label="211:  return t.compose(f);"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v6 -> v7;
  v8 -> v9;
  v10 -> v11;
  v11 -> v12;
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v17;
  v18 -> v19;
  v19 -> v20  [label="True"];
  v19 -> v21  [label="False"];
  v21 -> v22;
  v22 -> v23  [label="True"];
  v22 -> v24  [label="False"];
  v25 -> v26;
  v26 -> v27  [label="True"];
  v26 -> v28  [label="False"];
  v28 -> v29;
  v30 -> v31;
  v31 -> v32;
  v32 -> v33  [label="True"];
  v32 -> v34  [label="False"];
  v34 -> v35;
  v35 -> v36;
  v36 -> v37;
  v37 -> v38  [label="True"];
  v38 -> v39  [label="True"];
  v39 -> v40;
  v38 -> v40  [label="False"];
  v40 -> v41;
  v41 -> v44  [label="False"];
  v41 -> v45  [label="True"];
  v45 -> v41;
  v44 -> v46;
  v37 -> v47  [label="False"];
  v47 -> v48;
  v48 -> v49;
  v49 -> v50;
  v50 -> v51;
  v51 -> v54  [label="False"];
  v51 -> v55  [label="True"];
  v55 -> v56;
  v56 -> v57;
  v57 -> v51;
  v54 -> v46;
  v46 -> v58;
  // end-of-graph
}
