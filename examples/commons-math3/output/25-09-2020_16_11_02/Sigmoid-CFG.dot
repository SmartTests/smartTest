digraph Sigmoid_CFG {
  // graph-vertices
  v1  [label="52:  Sigmoid ()"];
  v2  [label="53:  this(0, 1)"];
  v3  [label="62:  Sigmoid (double lo,  double hi)"];
  v4  [label="64:  this.lo = lo"];
  v5  [label="65:  this.hi = hi"];
  v6  [label="72:  UnivariateFunction derivative()"];
  v7  [label="73:  return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();"];
  v8  [label="77:  double value(double x)"];
  v9  [label="78:  return value(x, lo, hi);"];
  v10  [label="101:  double value(double x, double ... param)"];
  v11  [label="104:  validateParameters(param)"];
  v12  [label="105:  return Sigmoid.value(x, param[0], param[1]);"];
  v13  [label="121:  double[] gradient(double x, double ... param)"];
  v14  [label="124:  validateParameters(param)"];
  v15  [label="126:  final double invExp1 = 1 / (1 + FastMath.exp(-x))"];
  v16  [label="128:  return new double[] { 1 - invExp1, invExp1 };"];
  v17  [label="141:  void validateParameters(double[] param)"];
  v18  [label="144:  if (param == null)"];
  v19  [label="145:  throw new NullArgumentException()"];
  v20  [label="endif"];
  v21  [label="147:  if (param.length != 2)"];
  v22  [label="148:  throw new DimensionMismatchException(param.length, 2)"];
  v23  [label="endif"];
  v24  [label="159:  double value(double x, double lo, double hi)"];
  v25  [label="162:  return lo + (hi - lo) / (1 + FastMath.exp(-x));"];
  v26  [label="168:  DerivativeStructure value(final DerivativeStructure t)"];
  v27  [label="171:  double[] f = new double[t.getOrder() + 1]"];
  v28  [label="172:  final double exp = FastMath.exp(-t.getValue())"];
  v29  [label="173:  if (Double.isInfinite(exp))"];
  v30  [label="176:  f[0] = lo"];
  v31  [label="177:  Arrays.fill(f, 1, f.length, 0.0)"];
  v32  [label="endif"];
  v33  [label="187:  final double[] p = new double[f.length]"];
  v34  [label="189:  final double inv = 1 / (1 + exp)"];
  v35  [label="190:  double coeff = hi - lo"];
  v36  [label="191:  for (  int n = 0 ; n < f.length ;   ++n)"];
  v39  [label="endfor"];
  v40  [label="194:  double v = 0"];
  v41  [label="195:  p[n] = 1"];
  v42  [label="196:  for (  int k = n ; k >= 0 ;   --k)"];
  v45  [label="endfor"];
  v46  [label="197:  v = v * exp + p[k]"];
  v47  [label="198:  if (k > 1)"];
  v48  [label="199:  p[k - 1] = (n - k + 2) * p[k - 2] - (k - 1) * p[k - 1]"];
  v49  [label="endif"];
  v50  [label="201:  p[0] = 0"];
  v51  [label="205:  coeff *= inv"];
  v52  [label="206:  f[n] = coeff * v"];
  v53  [label="211:  f[0] += lo"];
  v54  [label="215:  return t.compose(f);"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v6 -> v7;
  v8 -> v9;
  v10 -> v11;
  v11 -> v12;
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v17 -> v18;
  v18 -> v19  [label="True"];
  v18 -> v20  [label="False"];
  v20 -> v21;
  v21 -> v22  [label="True"];
  v21 -> v23  [label="False"];
  v24 -> v25;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30  [label="True"];
  v30 -> v31;
  v31 -> v32;
  v29 -> v33  [label="False"];
  v33 -> v34;
  v34 -> v35;
  v35 -> v36;
  v36 -> v39  [label="False"];
  v36 -> v40  [label="True"];
  v40 -> v41;
  v41 -> v42;
  v42 -> v45  [label="False"];
  v42 -> v46  [label="True"];
  v46 -> v47;
  v47 -> v48  [label="True"];
  v48 -> v49;
  v47 -> v50  [label="False"];
  v50 -> v49;
  v49 -> v42;
  v45 -> v51;
  v51 -> v52;
  v52 -> v36;
  v39 -> v53;
  v53 -> v32;
  v32 -> v54;
  // end-of-graph
}
