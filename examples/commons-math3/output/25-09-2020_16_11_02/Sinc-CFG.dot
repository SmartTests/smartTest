digraph Sinc_CFG {
  // graph-vertices
  v1  [label="71:  Sinc ()"];
  v2  [label="72:  this(false)"];
  v3  [label="81:  Sinc (boolean normalized)"];
  v4  [label="82:  this.normalized = normalized"];
  v5  [label="86:  double value(final double x)"];
  v6  [label="87:  final double scaledX = normalized ? FastMath.PI * x : x"];
  v7  [label="88:  if (FastMath.abs(scaledX) <= SHORTCUT)"];
  v8  [label="90:  final double scaledX2 = scaledX * scaledX"];
  v9  [label="91:  return ((scaledX2 - 20) * scaledX2 + 120) / 120;"];
  v10  [label="endif"];
  v11  [label="94:  return FastMath.sin(scaledX) / scaledX;"];
  v12  [label="102:  UnivariateFunction derivative()"];
  v13  [label="103:  return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();"];
  v14  [label="109:  DerivativeStructure value(final DerivativeStructure t)"];
  v15  [label="112:  final double scaledX  = (normalized ? FastMath.PI : 1) * t.getValue()"];
  v16  [label="113:  final double scaledX2 = scaledX * scaledX"];
  v17  [label="115:  double[] f = new double[t.getOrder() + 1]"];
  v18  [label="117:  if (FastMath.abs(scaledX) <= SHORTCUT)"];
  v19  [label="119:  for (  int i = 0 ; i < f.length ;   ++i)"];
  v22  [label="endfor"];
  v23  [label="120:  final int k = i / 2"];
  v24  [label="121:  if ((i & 0x1) == 0)"];
  v25  [label="123:  f[i] = (((k & 0x1) == 0) ? 1 : -1) *  (1.0 / (i + 1) - scaledX2 * (1.0 / (2 * i + 6) - scaledX2 / (24 * i + 120)))"];
  v26  [label="endif"];
  v27  [label="127:  f[i] = (((k & 0x1) == 0) ? -scaledX : scaledX) *  (1.0 / (i + 2) - scaledX2 * (1.0 / (6 * i + 24) - scaledX2 / (120 * i + 720)))"];
  v28  [label="endif"];
  v29  [label="134:  final double inv = 1 / scaledX"];
  v30  [label="135:  final double cos = FastMath.cos(scaledX)"];
  v31  [label="136:  final double sin = FastMath.sin(scaledX)"];
  v32  [label="138:  f[0] = inv * sin"];
  v33  [label="150:  final double[] sc = new double[f.length]"];
  v34  [label="151:  sc[0] = 1"];
  v35  [label="153:  double coeff = inv"];
  v36  [label="154:  for (  int n = 1 ; n < f.length ;   ++n)"];
  v39  [label="endfor"];
  v40  [label="156:  double s = 0"];
  v41  [label="157:  double c = 0"];
  v42  [label="160:  final int kStart"];
  v43  [label="161:  if ((n & 0x1) == 0)"];
  v44  [label="163:  sc[n] = 0"];
  v45  [label="164:  kStart = n"];
  v46  [label="endif"];
  v47  [label="167:  sc[n] = sc[n - 1]"];
  v48  [label="168:  c = sc[n]"];
  v49  [label="169:  kStart = n - 1"];
  v50  [label="173:  for (  int k = kStart ; k > 1 ;   k -= 2)"];
  v53  [label="endfor"];
  v54  [label="176:  sc[k] = (k - n) * sc[k] - sc[k - 1]"];
  v55  [label="177:  s = s * scaledX2 + sc[k]"];
  v56  [label="180:  sc[k - 1] = (k - 1 - n) * sc[k - 1] + sc[k -2]"];
  v57  [label="181:  c = c * scaledX2 + sc[k - 1]"];
  v58  [label="184:  sc[0] *= -n"];
  v59  [label="185:  s  = s * scaledX2 + sc[0]"];
  v60  [label="187:  coeff *= inv"];
  v61  [label="188:  f[n] = coeff * (s * sin + c * scaledX * cos)"];
  v62  [label="194:  if (normalized)"];
  v63  [label="195:  double scale = FastMath.PI"];
  v64  [label="196:  for (  int i = 1 ; i < f.length ;   ++i)"];
  v67  [label="endfor"];
  v68  [label="197:  f[i]  *= scale"];
  v69  [label="198:  scale *= FastMath.PI"];
  v70  [label="endif"];
  v71  [label="202:  return t.compose(f);"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8  [label="True"];
  v8 -> v9;
  v7 -> v11  [label="False"];
  v12 -> v13;
  v14 -> v15;
  v15 -> v16;
  v16 -> v17;
  v17 -> v18;
  v18 -> v19  [label="True"];
  v19 -> v22  [label="False"];
  v19 -> v23  [label="True"];
  v23 -> v24;
  v24 -> v25  [label="True"];
  v25 -> v26;
  v24 -> v27  [label="False"];
  v27 -> v26;
  v26 -> v19;
  v22 -> v28;
  v18 -> v29  [label="False"];
  v29 -> v30;
  v30 -> v31;
  v31 -> v32;
  v32 -> v33;
  v33 -> v34;
  v34 -> v35;
  v35 -> v36;
  v36 -> v39  [label="False"];
  v36 -> v40  [label="True"];
  v40 -> v41;
  v41 -> v42;
  v42 -> v43;
  v43 -> v44  [label="True"];
  v44 -> v45;
  v45 -> v46;
  v43 -> v47  [label="False"];
  v47 -> v48;
  v48 -> v49;
  v49 -> v46;
  v46 -> v50;
  v50 -> v53  [label="False"];
  v50 -> v54  [label="True"];
  v54 -> v55;
  v55 -> v56;
  v56 -> v57;
  v57 -> v50;
  v53 -> v58;
  v58 -> v59;
  v59 -> v60;
  v60 -> v61;
  v61 -> v36;
  v39 -> v28;
  v28 -> v62;
  v62 -> v63  [label="True"];
  v63 -> v64;
  v64 -> v67  [label="False"];
  v64 -> v68  [label="True"];
  v68 -> v69;
  v69 -> v64;
  v67 -> v70;
  v62 -> v70  [label="False"];
  v70 -> v71;
  // end-of-graph
}
