digraph RombergIntegrator_CFG {
  // graph-vertices
  v1  [label="58:  RombergIntegrator (final double relativeAccuracy,  final double absoluteAccuracy,  final int minimalIterationCount,  final int maximalIterationCount)"];
  v2  [label="63:  super(relativeAccuracy, absoluteAccuracy, minimalIterationCount, maximalIterationCount)"];
  v3  [label="64:  if (maximalIterationCount > ROMBERG_MAX_ITERATIONS_COUNT)"];
  v4  [label="65:  throw new NumberIsTooLargeException(maximalIterationCount, ROMBERG_MAX_ITERATIONS_COUNT, false)"];
  v5  [label="endif"];
  v6  [label="82:  RombergIntegrator (final int minimalIterationCount,  final int maximalIterationCount)"];
  v7  [label="85:  super(minimalIterationCount, maximalIterationCount)"];
  v8  [label="86:  if (maximalIterationCount > ROMBERG_MAX_ITERATIONS_COUNT)"];
  v9  [label="87:  throw new NumberIsTooLargeException(maximalIterationCount, ROMBERG_MAX_ITERATIONS_COUNT, false)"];
  v10  [label="endif"];
  v11  [label="96:  RombergIntegrator ()"];
  v12  [label="97:  super(DEFAULT_MIN_ITERATIONS_COUNT, ROMBERG_MAX_ITERATIONS_COUNT)"];
  v13  [label="102:  double doIntegrate()"];
  v14  [label="105:  final int m = iterations.getMaximalCount() + 1"];
  v15  [label="106:  double previousRow[] = new double[m]"];
  v16  [label="107:  double currentRow[]  = new double[m]"];
  v17  [label="109:  TrapezoidIntegrator qtrap = new TrapezoidIntegrator()"];
  v18  [label="110:  currentRow[0] = qtrap.stage(this, 0)"];
  v19  [label="111:  iterations.incrementCount()"];
  v20  [label="112:  double olds = currentRow[0]"];
  v21  [label="113:  while (true)"];
  v22  [label="endwhile"];
  v23  [label="115:  final int i = iterations.getCount()"];
  v24  [label="118:  final double[] tmpRow = previousRow"];
  v25  [label="119:  previousRow = currentRow"];
  v26  [label="120:  currentRow = tmpRow"];
  v27  [label="122:  currentRow[0] = qtrap.stage(this, i)"];
  v28  [label="123:  iterations.incrementCount()"];
  v29  [label="124:  for (  int j = 1 ; j <= i ;   j++)"];
  v32  [label="endfor"];
  v33  [label="126:  final double r = (1L << (2 * j)) - 1"];
  v34  [label="127:  final double tIJm1 = currentRow[j - 1]"];
  v35  [label="128:  currentRow[j] = tIJm1 + (tIJm1 - previousRow[j - 1]) / r"];
  v36  [label="130:  final double s = currentRow[i]"];
  v37  [label="131:  if (i >= getMinimalIterationCount())"];
  v38  [label="132:  final double delta  = FastMath.abs(s - olds)"];
  v39  [label="133:  final double rLimit = getRelativeAccuracy() * (FastMath.abs(olds) + FastMath.abs(s)) * 0.5"];
  v40  [label="134:  if ((delta <= rLimit) || (delta <= getAbsoluteAccuracy()))"];
  v41  [label="135:  return s;"];
  v42  [label="endif"];
  v43  [label="endif"];
  v44  [label="138:  olds = s"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4  [label="True"];
  v3 -> v5  [label="False"];
  v6 -> v7;
  v7 -> v8;
  v8 -> v9  [label="True"];
  v8 -> v10  [label="False"];
  v11 -> v12;
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v17;
  v17 -> v18;
  v18 -> v19;
  v19 -> v20;
  v20 -> v21;
  v21 -> v22  [label="False"];
  v21 -> v23  [label="True"];
  v23 -> v24;
  v24 -> v25;
  v25 -> v26;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v32  [label="False"];
  v29 -> v33  [label="True"];
  v33 -> v34;
  v34 -> v35;
  v35 -> v29;
  v32 -> v36;
  v36 -> v37;
  v37 -> v38  [label="True"];
  v38 -> v39;
  v39 -> v40;
  v40 -> v41  [label="True"];
  v40 -> v42  [label="False"];
  v42 -> v43;
  v37 -> v43  [label="False"];
  v43 -> v44;
  v44 -> v21;
  // end-of-graph
}
