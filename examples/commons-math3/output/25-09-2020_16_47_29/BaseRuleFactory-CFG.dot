digraph BaseRuleFactory_CFG {
  // graph-vertices
  v1  [label="55:  Pair<double[],double[]> getRule(int numberOfPoints)"];
  v2  [label="58:  if (numberOfPoints <= 0)"];
  v3  [label="59:  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_POINTS,  numberOfPoints)"];
  v4  [label="endif"];
  v5  [label="64:  Pair<double[], double[]> cached = pointsAndWeightsDouble.get(numberOfPoints)"];
  v6  [label="66:  if (cached == null)"];
  v7  [label="70:  final Pair<T[], T[]> rule = getRuleInternal(numberOfPoints)"];
  v8  [label="71:  cached = convertToDouble(rule)"];
  v9  [label="74:  pointsAndWeightsDouble.put(numberOfPoints, cached)"];
  v10  [label="endif"];
  v11  [label="78:  return new Pair<double[], double[]>(cached.getFirst().clone(), cached.getSecond().clone());"];
  v12  [label="93:  Pair<T[],T[]> getRuleInternal(int numberOfPoints)"];
  v13  [label="95:  final Pair<T[], T[]> rule = pointsAndWeights.get(numberOfPoints)"];
  v14  [label="96:  if (rule == null)"];
  v15  [label="97:  addRule(computeRule(numberOfPoints))"];
  v16  [label="99:  return getRuleInternal(numberOfPoints);"];
  v17  [label="endif"];
  v18  [label="101:  return rule;"];
  v19  [label="111:  void addRule(Pair<T[], T[]> rule)"];
  v20  [label="112:  if (rule.getFirst().length != rule.getSecond().length)"];
  v21  [label="113:  throw new DimensionMismatchException(rule.getFirst().length,  rule.getSecond().length)"];
  v22  [label="endif"];
  v23  [label="117:  pointsAndWeights.put(rule.getFirst().length, rule)"];
  v24  [label="128:  Pair<T[],T[]> computeRule(int numberOfPoints)"];
  v25  [label="139:  Pair<double[],double[]> convertToDouble(Pair<T[], T[]> rule)"];
  v26  [label="140:  final T[] pT = rule.getFirst()"];
  v27  [label="141:  final T[] wT = rule.getSecond()"];
  v28  [label="143:  final int len = pT.length"];
  v29  [label="144:  final double[] pD = new double[len]"];
  v30  [label="145:  final double[] wD = new double[len]"];
  v31  [label="147:  for (  int i = 0 ; i < len ;   i++)"];
  v34  [label="endfor"];
  v35  [label="148:  pD[i] = pT[i].doubleValue()"];
  v36  [label="149:  wD[i] = wT[i].doubleValue()"];
  v37  [label="152:  return new Pair<double[], double[]>(pD, wD);"];
  // graph-edges
  v1 -> v2;
  v2 -> v3  [label="True"];
  v2 -> v4  [label="False"];
  v4 -> v5;
  v5 -> v6;
  v6 -> v7  [label="True"];
  v7 -> v8;
  v8 -> v9;
  v9 -> v10;
  v6 -> v10  [label="False"];
  v10 -> v11;
  v12 -> v13;
  v13 -> v14;
  v14 -> v15  [label="True"];
  v15 -> v16;
  v14 -> v17  [label="False"];
  v17 -> v18;
  v19 -> v20;
  v20 -> v21  [label="True"];
  v20 -> v22  [label="False"];
  v22 -> v23;
  v25 -> v26;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v31;
  v31 -> v34  [label="False"];
  v31 -> v35  [label="True"];
  v35 -> v36;
  v36 -> v31;
  v34 -> v37;
  // end-of-graph
}
