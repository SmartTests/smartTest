digraph HermiteInterpolator_CFG {
  // graph-vertices
  v1  [label="62:  HermiteInterpolator ()"];
  v2  [label="63:  this.abscissae  = new ArrayList<Double>()"];
  v3  [label="64:  this.topDiagonal  = new ArrayList<double[]>()"];
  v4  [label="65:  this.bottomDiagonal = new ArrayList<double[]>()"];
  v5  [label="87:  void addSamplePoint(final double x, final double[] ... value)"];
  v6  [label="90:  for (  int i = 0 ; i < value.length ;   ++i)"];
  v9  [label="endfor"];
  v10  [label="92:  final double[] y = value[i].clone()"];
  v11  [label="93:  if (i > 1)"];
  v12  [label="94:  double inv = 1.0 / CombinatoricsUtils.factorial(i)"];
  v13  [label="95:  for (  int j = 0 ; j < y.length ;   ++j)"];
  v16  [label="endfor"];
  v17  [label="96:  y[j] *= inv"];
  v18  [label="endif"];
  v19  [label="101:  final int n = abscissae.size()"];
  v20  [label="102:  bottomDiagonal.add(n - i, y)"];
  v21  [label="103:  double[] bottom0 = y"];
  v22  [label="104:  for (  int j = i ; j < n ;   ++j)"];
  v25  [label="endfor"];
  v26  [label="105:  final double[] bottom1 = bottomDiagonal.get(n - (j + 1))"];
  v27  [label="106:  final double inv = 1.0 / (x - abscissae.get(n - (j + 1)))"];
  v28  [label="107:  if (Double.isInfinite(inv))"];
  v29  [label="108:  throw new ZeroException(LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x)"];
  v30  [label="endif"];
  v31  [label="110:  for (  int k = 0 ; k < y.length ;   ++k)"];
  v34  [label="endfor"];
  v35  [label="111:  bottom1[k] = inv * (bottom0[k] - bottom1[k])"];
  v36  [label="113:  bottom0 = bottom1"];
  v37  [label="117:  topDiagonal.add(bottom0.clone())"];
  v38  [label="120:  abscissae.add(x)"];
  v39  [label="130:  PolynomialFunction[] getPolynomials()"];
  v40  [label="134:  checkInterpolation()"];
  v41  [label="137:  final PolynomialFunction zero = polynomial(0)"];
  v42  [label="138:  PolynomialFunction[] polynomials = new PolynomialFunction[topDiagonal.get(0).length]"];
  v43  [label="139:  for (  int i = 0 ; i < polynomials.length ;   ++i)"];
  v46  [label="endfor"];
  v47  [label="140:  polynomials[i] = zero"];
  v48  [label="142:  PolynomialFunction coeff = polynomial(1)"];
  v49  [label="145:  for (  int i = 0 ; i < topDiagonal.size(  int i = 0 ;  ;   ++i) ;   ++i)"];
  v52  [label="endfor"];
  v53  [label="146:  double[] tdi = topDiagonal.get(i)"];
  v54  [label="147:  for (  int k = 0 ; k < polynomials.length ;   ++k)"];
  v57  [label="endfor"];
  v58  [label="148:  polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k])))"];
  v59  [label="150:  coeff = coeff.multiply(polynomial(-abscissae.get(i), 1.0))"];
  v60  [label="153:  return polynomials;"];
  v61  [label="168:  double[] value(double x)"];
  v62  [label="172:  checkInterpolation()"];
  v63  [label="174:  final double[] value = new double[topDiagonal.get(0).length]"];
  v64  [label="175:  double valueCoeff = 1"];
  v65  [label="176:  for (  int i = 0 ; i < topDiagonal.size(  int i = 0 ;  ;   ++i) ;   ++i)"];
  v68  [label="endfor"];
  v69  [label="177:  double[] dividedDifference = topDiagonal.get(i)"];
  v70  [label="178:  for (  int k = 0 ; k < value.length ;   ++k)"];
  v73  [label="endfor"];
  v74  [label="179:  value[k] += dividedDifference[k] * valueCoeff"];
  v75  [label="181:  final double deltaX = x - abscissae.get(i)"];
  v76  [label="182:  valueCoeff *= deltaX"];
  v77  [label="185:  return value;"];
  v78  [label="200:  DerivativeStructure[] value(final DerivativeStructure x)"];
  v79  [label="204:  checkInterpolation()"];
  v80  [label="206:  final DerivativeStructure[] value = new DerivativeStructure[topDiagonal.get(0).length]"];
  v81  [label="207:  Arrays.fill(value, x.getField().getZero())"];
  v82  [label="208:  DerivativeStructure valueCoeff = x.getField().getOne()"];
  v83  [label="209:  for (  int i = 0 ; i < topDiagonal.size(  int i = 0 ;  ;   ++i) ;   ++i)"];
  v86  [label="endfor"];
  v87  [label="210:  double[] dividedDifference = topDiagonal.get(i)"];
  v88  [label="211:  for (  int k = 0 ; k < value.length ;   ++k)"];
  v91  [label="endfor"];
  v92  [label="212:  value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]))"];
  v93  [label="214:  final DerivativeStructure deltaX = x.subtract(abscissae.get(i))"];
  v94  [label="215:  valueCoeff = valueCoeff.multiply(deltaX)"];
  v95  [label="218:  return value;"];
  v96  [label="226:  void checkInterpolation()"];
  v97  [label="227:  if (abscissae.isEmpty())"];
  v98  [label="228:  throw new NoDataException(LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE)"];
  v99  [label="endif"];
  v100  [label="236:  PolynomialFunction polynomial(double ... c)"];
  v101  [label="237:  return new PolynomialFunction(c);"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4;
  v5 -> v6;
  v6 -> v9  [label="False"];
  v6 -> v10  [label="True"];
  v10 -> v11;
  v11 -> v12  [label="True"];
  v12 -> v13;
  v13 -> v16  [label="False"];
  v13 -> v17  [label="True"];
  v17 -> v13;
  v16 -> v18;
  v11 -> v18  [label="False"];
  v18 -> v19;
  v19 -> v20;
  v20 -> v21;
  v21 -> v22;
  v22 -> v25  [label="False"];
  v22 -> v26  [label="True"];
  v26 -> v27;
  v27 -> v28;
  v28 -> v29  [label="True"];
  v28 -> v30  [label="False"];
  v30 -> v31;
  v31 -> v34  [label="False"];
  v31 -> v35  [label="True"];
  v35 -> v31;
  v34 -> v36;
  v36 -> v22;
  v25 -> v37;
  v37 -> v38;
  v38 -> v6;
  v39 -> v40;
  v40 -> v41;
  v41 -> v42;
  v42 -> v43;
  v43 -> v46  [label="False"];
  v43 -> v47  [label="True"];
  v47 -> v43;
  v46 -> v48;
  v48 -> v49;
  v49 -> v52  [label="False"];
  v49 -> v53  [label="True"];
  v53 -> v54;
  v54 -> v57  [label="False"];
  v54 -> v58  [label="True"];
  v58 -> v54;
  v57 -> v59;
  v59 -> v49;
  v52 -> v60;
  v61 -> v62;
  v62 -> v63;
  v63 -> v64;
  v64 -> v65;
  v65 -> v68  [label="False"];
  v65 -> v69  [label="True"];
  v69 -> v60;
  v60 -> v61;
  v61 -> v63  [label="False"];
  v61 -> v64  [label="True"];
  v64 -> v62;
  v62 -> v61;
  v63 -> v65;
  v68 -> v65;
  v68 -> v69;
  v64 -> v65  [label="False"];
  v64 -> v65  [label="True"];
  v65 -> v68;
  v69 -> v91  [label="False"];
  v69 -> v92  [label="True"];
  v92 -> v88;
  v88 -> v69;
  v91 -> v93;
  v93 -> v94;
  v94 -> v65;
  v65 -> v64;
  v65 -> v95;
  v96 -> v97;
  v97 -> v98  [label="True"];
  v97 -> v99  [label="False"];
  v100 -> v101;
  // end-of-graph
}
