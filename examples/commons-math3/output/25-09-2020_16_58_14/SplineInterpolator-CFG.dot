digraph SplineInterpolator_CFG {
  // graph-vertices
  v1  [label="66:  PolynomialSplineFunction interpolate(double x[], double y[])"];
  v2  [label="70:  if (x.length != y.length)"];
  v3  [label="71:  throw new DimensionMismatchException(x.length, y.length)"];
  v4  [label="endif"];
  v5  [label="74:  if (x.length < 3)"];
  v6  [label="75:  throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS, x.length, 3, true)"];
  v7  [label="endif"];
  v8  [label="80:  final int n = x.length - 1"];
  v9  [label="82:  MathArrays.checkOrder(x)"];
  v10  [label="85:  final double h[] = new double[n]"];
  v11  [label="86:  for (  int i = 0 ; i < n ;   i++)"];
  v14  [label="endfor"];
  v15  [label="87:  h[i] = x[i + 1] - x[i]"];
  v16  [label="90:  final double mu[] = new double[n]"];
  v17  [label="91:  final double z[] = new double[n + 1]"];
  v18  [label="92:  mu[0] = 0d"];
  v19  [label="93:  z[0] = 0d"];
  v20  [label="94:  double g = 0"];
  v21  [label="95:  for (  int i = 1 ; i < n ;   i++)"];
  v24  [label="endfor"];
  v25  [label="96:  g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1]"];
  v26  [label="97:  mu[i] = h[i] / g"];
  v27  [label="98:  z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) / (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g"];
  v28  [label="103:  final double b[] = new double[n]"];
  v29  [label="104:  final double c[] = new double[n + 1]"];
  v30  [label="105:  final double d[] = new double[n]"];
  v31  [label="107:  z[n] = 0d"];
  v32  [label="108:  c[n] = 0d"];
  v33  [label="110:  for (  int j = n -1 ; j >=0 ;   j--)"];
  v36  [label="endfor"];
  v37  [label="111:  c[j] = z[j] - mu[j] * c[j + 1]"];
  v38  [label="112:  b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] + 2d * c[j]) / 3d"];
  v39  [label="113:  d[j] = (c[j + 1] - c[j]) / (3d * h[j])"];
  v40  [label="116:  final PolynomialFunction polynomials[] = new PolynomialFunction[n]"];
  v41  [label="117:  final double coefficients[] = new double[4]"];
  v42  [label="118:  for (  int i = 0 ; i < n ;   i++)"];
  v45  [label="endfor"];
  v46  [label="119:  coefficients[0] = y[i]"];
  v47  [label="120:  coefficients[1] = b[i]"];
  v48  [label="121:  coefficients[2] = c[i]"];
  v49  [label="122:  coefficients[3] = d[i]"];
  v50  [label="123:  polynomials[i] = new PolynomialFunction(coefficients)"];
  v51  [label="126:  return new PolynomialSplineFunction(x, polynomials);"];
  // graph-edges
  v1 -> v2;
  v2 -> v3  [label="True"];
  v2 -> v4  [label="False"];
  v4 -> v5;
  v5 -> v6  [label="True"];
  v5 -> v7  [label="False"];
  v7 -> v8;
  v8 -> v9;
  v9 -> v10;
  v10 -> v11;
  v11 -> v14  [label="False"];
  v11 -> v15  [label="True"];
  v15 -> v11;
  v14 -> v16;
  v16 -> v17;
  v17 -> v18;
  v18 -> v19;
  v19 -> v20;
  v20 -> v21;
  v21 -> v24  [label="False"];
  v21 -> v25  [label="True"];
  v25 -> v26;
  v26 -> v27;
  v27 -> v21;
  v24 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v31;
  v31 -> v32;
  v32 -> v33;
  v33 -> v36  [label="False"];
  v33 -> v37  [label="True"];
  v37 -> v38;
  v38 -> v39;
  v39 -> v33;
  v36 -> v40;
  v40 -> v41;
  v41 -> v42;
  v42 -> v45  [label="False"];
  v42 -> v46  [label="True"];
  v46 -> v47;
  v47 -> v48;
  v48 -> v49;
  v49 -> v50;
  v50 -> v42;
  v45 -> v51;
  // end-of-graph
}
