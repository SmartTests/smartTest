digraph TricubicSplineInterpolatingFunction_CFG {
  // graph-vertices
  v1  [label="137:  TricubicSplineInterpolatingFunction (double[] x,  double[] y,  double[] z,  double[][][] f,  double[][][] dFdX,  double[][][] dFdY,  double[][][] dFdZ,  double[][][] d2FdXdY,  double[][][] d2FdXdZ,  double[][][] d2FdYdZ,  double[][][] d3FdXdYdZ)"];
  v2  [label="151:  final int xLen = x.length"];
  v3  [label="152:  final int yLen = y.length"];
  v4  [label="153:  final int zLen = z.length"];
  v5  [label="155:  if (xLen == 0 || yLen == 0 || z.length == 0 || f.length == 0 || f[0].length == 0)"];
  v6  [label="156:  throw new NoDataException()"];
  v7  [label="endif"];
  v8  [label="158:  if (xLen != f.length)"];
  v9  [label="159:  throw new DimensionMismatchException(xLen, f.length)"];
  v10  [label="endif"];
  v11  [label="161:  if (xLen != dFdX.length)"];
  v12  [label="162:  throw new DimensionMismatchException(xLen, dFdX.length)"];
  v13  [label="endif"];
  v14  [label="164:  if (xLen != dFdY.length)"];
  v15  [label="165:  throw new DimensionMismatchException(xLen, dFdY.length)"];
  v16  [label="endif"];
  v17  [label="167:  if (xLen != dFdZ.length)"];
  v18  [label="168:  throw new DimensionMismatchException(xLen, dFdZ.length)"];
  v19  [label="endif"];
  v20  [label="170:  if (xLen != d2FdXdY.length)"];
  v21  [label="171:  throw new DimensionMismatchException(xLen, d2FdXdY.length)"];
  v22  [label="endif"];
  v23  [label="173:  if (xLen != d2FdXdZ.length)"];
  v24  [label="174:  throw new DimensionMismatchException(xLen, d2FdXdZ.length)"];
  v25  [label="endif"];
  v26  [label="176:  if (xLen != d2FdYdZ.length)"];
  v27  [label="177:  throw new DimensionMismatchException(xLen, d2FdYdZ.length)"];
  v28  [label="endif"];
  v29  [label="179:  if (xLen != d3FdXdYdZ.length)"];
  v30  [label="180:  throw new DimensionMismatchException(xLen, d3FdXdYdZ.length)"];
  v31  [label="endif"];
  v32  [label="183:  MathArrays.checkOrder(x)"];
  v33  [label="184:  MathArrays.checkOrder(y)"];
  v34  [label="185:  MathArrays.checkOrder(z)"];
  v35  [label="187:  xval = x.clone()"];
  v36  [label="188:  yval = y.clone()"];
  v37  [label="189:  zval = z.clone()"];
  v38  [label="191:  final int lastI = xLen - 1"];
  v39  [label="192:  final int lastJ = yLen - 1"];
  v40  [label="193:  final int lastK = zLen - 1"];
  v41  [label="194:  splines = new TricubicSplineFunction[lastI][lastJ][lastK]"];
  v42  [label="196:  for (  int i = 0 ; i < lastI ;   i++)"];
  v45  [label="endfor"];
  v46  [label="197:  if (f[i].length != yLen)"];
  v47  [label="198:  throw new DimensionMismatchException(f[i].length, yLen)"];
  v48  [label="endif"];
  v49  [label="200:  if (dFdX[i].length != yLen)"];
  v50  [label="201:  throw new DimensionMismatchException(dFdX[i].length, yLen)"];
  v51  [label="endif"];
  v52  [label="203:  if (dFdY[i].length != yLen)"];
  v53  [label="204:  throw new DimensionMismatchException(dFdY[i].length, yLen)"];
  v54  [label="endif"];
  v55  [label="206:  if (dFdZ[i].length != yLen)"];
  v56  [label="207:  throw new DimensionMismatchException(dFdZ[i].length, yLen)"];
  v57  [label="endif"];
  v58  [label="209:  if (d2FdXdY[i].length != yLen)"];
  v59  [label="210:  throw new DimensionMismatchException(d2FdXdY[i].length, yLen)"];
  v60  [label="endif"];
  v61  [label="212:  if (d2FdXdZ[i].length != yLen)"];
  v62  [label="213:  throw new DimensionMismatchException(d2FdXdZ[i].length, yLen)"];
  v63  [label="endif"];
  v64  [label="215:  if (d2FdYdZ[i].length != yLen)"];
  v65  [label="216:  throw new DimensionMismatchException(d2FdYdZ[i].length, yLen)"];
  v66  [label="endif"];
  v67  [label="218:  if (d3FdXdYdZ[i].length != yLen)"];
  v68  [label="219:  throw new DimensionMismatchException(d3FdXdYdZ[i].length, yLen)"];
  v69  [label="endif"];
  v70  [label="222:  final int ip1 = i + 1"];
  v71  [label="223:  for (  int j = 0 ; j < lastJ ;   j++)"];
  v74  [label="endfor"];
  v75  [label="224:  if (f[i][j].length != zLen)"];
  v76  [label="225:  throw new DimensionMismatchException(f[i][j].length, zLen)"];
  v77  [label="endif"];
  v78  [label="227:  if (dFdX[i][j].length != zLen)"];
  v79  [label="228:  throw new DimensionMismatchException(dFdX[i][j].length, zLen)"];
  v80  [label="endif"];
  v81  [label="230:  if (dFdY[i][j].length != zLen)"];
  v82  [label="231:  throw new DimensionMismatchException(dFdY[i][j].length, zLen)"];
  v83  [label="endif"];
  v84  [label="233:  if (dFdZ[i][j].length != zLen)"];
  v85  [label="234:  throw new DimensionMismatchException(dFdZ[i][j].length, zLen)"];
  v86  [label="endif"];
  v87  [label="236:  if (d2FdXdY[i][j].length != zLen)"];
  v88  [label="237:  throw new DimensionMismatchException(d2FdXdY[i][j].length, zLen)"];
  v89  [label="endif"];
  v90  [label="239:  if (d2FdXdZ[i][j].length != zLen)"];
  v91  [label="240:  throw new DimensionMismatchException(d2FdXdZ[i][j].length, zLen)"];
  v92  [label="endif"];
  v93  [label="242:  if (d2FdYdZ[i][j].length != zLen)"];
  v94  [label="243:  throw new DimensionMismatchException(d2FdYdZ[i][j].length, zLen)"];
  v95  [label="endif"];
  v96  [label="245:  if (d3FdXdYdZ[i][j].length != zLen)"];
  v97  [label="246:  throw new DimensionMismatchException(d3FdXdYdZ[i][j].length, zLen)"];
  v98  [label="endif"];
  v99  [label="249:  final int jp1 = j + 1"];
  v100  [label="250:  for (  int k = 0 ; k < lastK ;   k++)"];
  v103  [label="endfor"];
  v104  [label="251:  final int kp1 = k + 1"];
  v105  [label="253:  final double[] beta = new double[] { f[i][j][k], f[ip1][j][k], f[i][jp1][k], f[ip1][jp1][k], f[i][j][kp1], f[ip1][j][kp1], f[i][jp1][kp1], f[ip1][jp1][kp1],  dFdX[i][j][k], dFdX[ip1][j][k], dFdX[i][jp1][k], dFdX[ip1][jp1][k], dFdX[i][j][kp1], dFdX[ip1][j][kp1], dFdX[i][jp1][kp1], dFdX[ip1][jp1][kp1],  dFdY[i][j][k], dFdY[ip1][j][k], dFdY[i][jp1][k], dFdY[ip1][jp1][k], dFdY[i][j][kp1], dFdY[ip1][j][kp1], dFdY[i][jp1][kp1], dFdY[ip1][jp1][kp1],  dFdZ[i][j][k], dFdZ[ip1][j][k], dFdZ[i][jp1][k], dFdZ[ip1][jp1][k], dFdZ[i][j][kp1], dFdZ[ip1][j][kp1], dFdZ[i][jp1][kp1], dFdZ[ip1][jp1][kp1],  d2FdXdY[i][j][k], d2FdXdY[ip1][j][k], d2FdXdY[i][jp1][k], d2FdXdY[ip1][jp1][k], d2FdXdY[i][j][kp1], d2FdXdY[ip1][j][kp1], d2FdXdY[i][jp1][kp1], d2FdXdY[ip1][jp1][kp1],  d2FdXdZ[i][j][k], d2FdXdZ[ip1][j][k], d2FdXdZ[i][jp1][k], d2FdXdZ[ip1][jp1][k], d2FdXdZ[i][j][kp1], d2FdXdZ[ip1][j][kp1], d2FdXdZ[i][jp1][kp1], d2FdXdZ[ip1][jp1][kp1],  d2FdYdZ[i][j][k], d2FdYdZ[ip1][j][k], d2FdYdZ[i][jp1][k], d2FdYdZ[ip1][jp1][k], d2FdYdZ[i][j][kp1], d2FdYdZ[ip1][j][kp1], d2FdYdZ[i][jp1][kp1], d2FdYdZ[ip1][jp1][kp1],  d3FdXdYdZ[i][j][k], d3FdXdYdZ[ip1][j][k], d3FdXdYdZ[i][jp1][k], d3FdXdYdZ[ip1][jp1][k], d3FdXdYdZ[i][j][kp1], d3FdXdYdZ[ip1][j][kp1], d3FdXdYdZ[i][jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1], }"];
  v106  [label="295:  splines[i][j][k] = new TricubicSplineFunction(computeSplineCoefficients(beta))"];
  v107  [label="306:  double value(double x, double y, double z)"];
  v108  [label="308:  final int i = searchIndex(x, xval)"];
  v109  [label="309:  if (i == -1)"];
  v110  [label="310:  throw new OutOfRangeException(x, xval[0], xval[xval.length - 1])"];
  v111  [label="endif"];
  v112  [label="312:  final int j = searchIndex(y, yval)"];
  v113  [label="313:  if (j == -1)"];
  v114  [label="314:  throw new OutOfRangeException(y, yval[0], yval[yval.length - 1])"];
  v115  [label="endif"];
  v116  [label="316:  final int k = searchIndex(z, zval)"];
  v117  [label="317:  if (k == -1)"];
  v118  [label="318:  throw new OutOfRangeException(z, zval[0], zval[zval.length - 1])"];
  v119  [label="endif"];
  v120  [label="321:  final double xN = (x - xval[i]) / (xval[i + 1] - xval[i])"];
  v121  [label="322:  final double yN = (y - yval[j]) / (yval[j + 1] - yval[j])"];
  v122  [label="323:  final double zN = (z - zval[k]) / (zval[k + 1] - zval[k])"];
  v123  [label="325:  return splines[i][j][k].value(xN, yN, zN);"];
  v124  [label="334:  int searchIndex(double c, double[] val)"];
  v125  [label="335:  if (c < val[0])"];
  v126  [label="336:  return -1;"];
  v127  [label="endif"];
  v128  [label="339:  final int max = val.length"];
  v129  [label="340:  for (  int i = 1 ; i < max ;   i++)"];
  v132  [label="endfor"];
  v133  [label="341:  if (c <= val[i])"];
  v134  [label="342:  return i - 1;"];
  v135  [label="endif"];
  v136  [label="346:  return -1;"];
  v137  [label="397:  double[] computeSplineCoefficients(double[] beta)"];
  v138  [label="398:  final int sz = 64"];
  v139  [label="399:  final double[] a = new double[sz]"];
  v140  [label="401:  for (  int i = 0 ; i < sz ;   i++)"];
  v143  [label="endfor"];
  v144  [label="402:  double result = 0"];
  v145  [label="403:  final double[] row = AINV[i]"];
  v146  [label="404:  for (  int j = 0 ; j < sz ;   j++)"];
  v149  [label="endfor"];
  v150  [label="405:  result += row[j] * beta[j]"];
  v151  [label="407:  a[i] = result"];
  v152  [label="410:  return a;"];
  v153  [label="429:  TricubicSplineFunction (double[] aV)"];
  v154  [label="430:  for (  int i = 0 ; i < N ;   i++)"];
  v157  [label="endfor"];
  v158  [label="431:  for (  int j = 0 ; j < N ;   j++)"];
  v161  [label="endfor"];
  v162  [label="432:  for (  int k = 0 ; k < N ;   k++)"];
  v165  [label="endfor"];
  v166  [label="433:  a[i][j][k] = aV[i + N * (j + N * k)]"];
  v167  [label="447:  double value(double x, double y, double z)"];
  v168  [label="449:  if (x < 0 || x > 1)"];
  v169  [label="450:  throw new OutOfRangeException(x, 0, 1)"];
  v170  [label="endif"];
  v171  [label="452:  if (y < 0 || y > 1)"];
  v172  [label="453:  throw new OutOfRangeException(y, 0, 1)"];
  v173  [label="endif"];
  v174  [label="455:  if (z < 0 || z > 1)"];
  v175  [label="456:  throw new OutOfRangeException(z, 0, 1)"];
  v176  [label="endif"];
  v177  [label="459:  final double x2 = x * x"];
  v178  [label="460:  final double x3 = x2 * x"];
  v179  [label="461:  final double[] pX = { 1, x, x2, x3 }"];
  v180  [label="463:  final double y2 = y * y"];
  v181  [label="464:  final double y3 = y2 * y"];
  v182  [label="465:  final double[] pY = { 1, y, y2, y3 }"];
  v183  [label="467:  final double z2 = z * z"];
  v184  [label="468:  final double z3 = z2 * z"];
  v185  [label="469:  final double[] pZ = { 1, z, z2, z3 }"];
  v186  [label="471:  double result = 0"];
  v187  [label="472:  for (  int i = 0 ; i < N ;   i++)"];
  v190  [label="endfor"];
  v191  [label="473:  for (  int j = 0 ; j < N ;   j++)"];
  v194  [label="endfor"];
  v195  [label="474:  for (  int k = 0 ; k < N ;   k++)"];
  v198  [label="endfor"];
  v199  [label="475:  result += a[i][j][k] * pX[i] * pY[j] * pZ[k]"];
  v200  [label="480:  return result;"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6  [label="True"];
  v5 -> v7  [label="False"];
  v7 -> v8;
  v8 -> v9  [label="True"];
  v8 -> v10  [label="False"];
  v10 -> v11;
  v11 -> v12  [label="True"];
  v11 -> v13  [label="False"];
  v13 -> v14;
  v14 -> v15  [label="True"];
  v14 -> v16  [label="False"];
  v16 -> v17;
  v17 -> v18  [label="True"];
  v17 -> v19  [label="False"];
  v19 -> v20;
  v20 -> v21  [label="True"];
  v20 -> v22  [label="False"];
  v22 -> v23;
  v23 -> v24  [label="True"];
  v23 -> v25  [label="False"];
  v25 -> v26;
  v26 -> v27  [label="True"];
  v26 -> v28  [label="False"];
  v28 -> v29;
  v29 -> v30  [label="True"];
  v29 -> v31  [label="False"];
  v31 -> v32;
  v32 -> v33;
  v33 -> v34;
  v34 -> v35;
  v35 -> v36;
  v36 -> v37;
  v37 -> v38;
  v38 -> v39;
  v39 -> v40;
  v40 -> v41;
  v41 -> v42;
  v42 -> v45  [label="False"];
  v42 -> v46  [label="True"];
  v46 -> v47  [label="True"];
  v46 -> v48  [label="False"];
  v48 -> v49;
  v49 -> v50  [label="True"];
  v49 -> v51  [label="False"];
  v51 -> v52;
  v52 -> v53  [label="True"];
  v52 -> v54  [label="False"];
  v54 -> v55;
  v55 -> v56  [label="True"];
  v55 -> v57  [label="False"];
  v57 -> v58;
  v58 -> v59  [label="True"];
  v58 -> v60  [label="False"];
  v60 -> v61;
  v61 -> v62  [label="True"];
  v61 -> v63  [label="False"];
  v63 -> v64;
  v64 -> v65  [label="True"];
  v64 -> v66  [label="False"];
  v66 -> v67;
  v67 -> v68  [label="True"];
  v67 -> v69  [label="False"];
  v69 -> v70;
  v70 -> v71;
  v71 -> v74  [label="False"];
  v71 -> v75  [label="True"];
  v75 -> v76  [label="True"];
  v75 -> v77  [label="False"];
  v77 -> v78;
  v78 -> v79  [label="True"];
  v78 -> v80  [label="False"];
  v80 -> v81;
  v81 -> v82  [label="True"];
  v81 -> v83  [label="False"];
  v83 -> v84;
  v84 -> v85  [label="True"];
  v84 -> v86  [label="False"];
  v86 -> v87;
  v87 -> v88  [label="True"];
  v87 -> v89  [label="False"];
  v89 -> v90;
  v90 -> v91  [label="True"];
  v90 -> v92  [label="False"];
  v92 -> v93;
  v93 -> v94  [label="True"];
  v93 -> v95  [label="False"];
  v95 -> v96;
  v96 -> v97  [label="True"];
  v96 -> v98  [label="False"];
  v98 -> v99;
  v99 -> v100;
  v100 -> v103  [label="False"];
  v100 -> v104  [label="True"];
  v104 -> v105;
  v105 -> v106;
  v106 -> v100;
  v103 -> v71;
  v74 -> v42;
  v107 -> v108;
  v108 -> v109;
  v109 -> v110  [label="True"];
  v109 -> v111  [label="False"];
  v111 -> v112;
  v112 -> v113;
  v113 -> v114  [label="True"];
  v113 -> v115  [label="False"];
  v115 -> v116;
  v116 -> v117;
  v117 -> v118  [label="True"];
  v117 -> v119  [label="False"];
  v119 -> v120;
  v120 -> v121;
  v121 -> v122;
  v122 -> v123;
  v124 -> v125;
  v125 -> v126  [label="True"];
  v125 -> v127  [label="False"];
  v127 -> v128;
  v128 -> v129;
  v129 -> v132  [label="False"];
  v129 -> v133  [label="True"];
  v133 -> v134  [label="True"];
  v133 -> v135  [label="False"];
  v135 -> v129;
  v132 -> v136;
  v137 -> v138;
  v138 -> v139;
  v139 -> v140;
  v140 -> v143  [label="False"];
  v140 -> v144  [label="True"];
  v144 -> v145;
  v145 -> v146;
  v146 -> v149  [label="False"];
  v146 -> v150  [label="True"];
  v150 -> v146;
  v149 -> v151;
  v151 -> v140;
  v143 -> v152;
  v153 -> v154;
  v154 -> v157  [label="False"];
  v154 -> v158  [label="True"];
  v158 -> v161  [label="False"];
  v158 -> v162  [label="True"];
  v162 -> v165  [label="False"];
  v162 -> v166  [label="True"];
  v166 -> v162;
  v165 -> v158;
  v161 -> v154;
  v167 -> v168;
  v168 -> v169  [label="True"];
  v168 -> v170  [label="False"];
  v170 -> v171;
  v171 -> v172  [label="True"];
  v171 -> v173  [label="False"];
  v173 -> v174;
  v174 -> v175  [label="True"];
  v174 -> v176  [label="False"];
  v176 -> v177;
  v177 -> v178;
  v178 -> v179;
  v179 -> v180;
  v180 -> v181;
  v181 -> v182;
  v182 -> v183;
  v183 -> v184;
  v184 -> v185;
  v185 -> v186;
  v186 -> v187;
  v187 -> v190  [label="False"];
  v187 -> v191  [label="True"];
  v191 -> v194  [label="False"];
  v191 -> v195  [label="True"];
  v195 -> v198  [label="False"];
  v195 -> v199  [label="True"];
  v199 -> v195;
  v198 -> v191;
  v194 -> v187;
  v190 -> v200;
  // end-of-graph
}
