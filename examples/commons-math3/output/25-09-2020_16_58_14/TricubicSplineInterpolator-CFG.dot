digraph TricubicSplineInterpolator_CFG {
  // graph-vertices
  v1  [label="36:  TricubicSplineInterpolatingFunction interpolate(final double[] xval,  final double[] yval,  final double[] zval,  final double[][][] fval)"];
  v2  [label="42:  if (xval.length == 0 || yval.length == 0 || zval.length == 0 || fval.length == 0)"];
  v3  [label="43:  throw new NoDataException()"];
  v4  [label="endif"];
  v5  [label="45:  if (xval.length != fval.length)"];
  v6  [label="46:  throw new DimensionMismatchException(xval.length, fval.length)"];
  v7  [label="endif"];
  v8  [label="49:  MathArrays.checkOrder(xval)"];
  v9  [label="50:  MathArrays.checkOrder(yval)"];
  v10  [label="51:  MathArrays.checkOrder(zval)"];
  v11  [label="53:  final int xLen = xval.length"];
  v12  [label="54:  final int yLen = yval.length"];
  v13  [label="55:  final int zLen = zval.length"];
  v14  [label="60:  final double[][][] fvalXY = new double[zLen][xLen][yLen]"];
  v15  [label="61:  final double[][][] fvalZX = new double[yLen][zLen][xLen]"];
  v16  [label="62:  for (  int i = 0 ; i < xLen ;   i++)"];
  v19  [label="endfor"];
  v20  [label="63:  if (fval[i].length != yLen)"];
  v21  [label="64:  throw new DimensionMismatchException(fval[i].length, yLen)"];
  v22  [label="endif"];
  v23  [label="67:  for (  int j = 0 ; j < yLen ;   j++)"];
  v26  [label="endfor"];
  v27  [label="68:  if (fval[i][j].length != zLen)"];
  v28  [label="69:  throw new DimensionMismatchException(fval[i][j].length, zLen)"];
  v29  [label="endif"];
  v30  [label="72:  for (  int k = 0 ; k < zLen ;   k++)"];
  v33  [label="endfor"];
  v34  [label="73:  final double v = fval[i][j][k]"];
  v35  [label="74:  fvalXY[k][i][j] = v"];
  v36  [label="75:  fvalZX[j][k][i] = v"];
  v37  [label="80:  final BicubicSplineInterpolator bsi = new BicubicSplineInterpolator()"];
  v38  [label="83:  final BicubicSplineInterpolatingFunction[] xSplineYZ = new BicubicSplineInterpolatingFunction[xLen]"];
  v39  [label="85:  for (  int i = 0 ; i < xLen ;   i++)"];
  v42  [label="endfor"];
  v43  [label="86:  xSplineYZ[i] = bsi.interpolate(yval, zval, fval[i])"];
  v44  [label="90:  final BicubicSplineInterpolatingFunction[] ySplineZX = new BicubicSplineInterpolatingFunction[yLen]"];
  v45  [label="92:  for (  int j = 0 ; j < yLen ;   j++)"];
  v48  [label="endfor"];
  v49  [label="93:  ySplineZX[j] = bsi.interpolate(zval, xval, fvalZX[j])"];
  v50  [label="97:  final BicubicSplineInterpolatingFunction[] zSplineXY = new BicubicSplineInterpolatingFunction[zLen]"];
  v51  [label="99:  for (  int k = 0 ; k < zLen ;   k++)"];
  v54  [label="endfor"];
  v55  [label="100:  zSplineXY[k] = bsi.interpolate(xval, yval, fvalXY[k])"];
  v56  [label="104:  final double[][][] dFdX = new double[xLen][yLen][zLen]"];
  v57  [label="105:  final double[][][] dFdY = new double[xLen][yLen][zLen]"];
  v58  [label="106:  final double[][][] d2FdXdY = new double[xLen][yLen][zLen]"];
  v59  [label="107:  for (  int k = 0 ; k < zLen ;   k++)"];
  v62  [label="endfor"];
  v63  [label="108:  final BicubicSplineInterpolatingFunction f = zSplineXY[k]"];
  v64  [label="109:  for (  int i = 0 ; i < xLen ;   i++)"];
  v67  [label="endfor"];
  v68  [label="110:  final double x = xval[i]"];
  v69  [label="111:  for (  int j = 0 ; j < yLen ;   j++)"];
  v72  [label="endfor"];
  v73  [label="112:  final double y = yval[j]"];
  v74  [label="113:  dFdX[i][j][k] = f.partialDerivativeX(x, y)"];
  v75  [label="114:  dFdY[i][j][k] = f.partialDerivativeY(x, y)"];
  v76  [label="115:  d2FdXdY[i][j][k] = f.partialDerivativeXY(x, y)"];
  v77  [label="121:  final double[][][] dFdZ = new double[xLen][yLen][zLen]"];
  v78  [label="122:  final double[][][] d2FdYdZ = new double[xLen][yLen][zLen]"];
  v79  [label="123:  for (  int i = 0 ; i < xLen ;   i++)"];
  v82  [label="endfor"];
  v83  [label="124:  final BicubicSplineInterpolatingFunction f = xSplineYZ[i]"];
  v84  [label="125:  for (  int j = 0 ; j < yLen ;   j++)"];
  v87  [label="endfor"];
  v88  [label="126:  final double y = yval[j]"];
  v89  [label="127:  for (  int k = 0 ; k < zLen ;   k++)"];
  v92  [label="endfor"];
  v93  [label="128:  final double z = zval[k]"];
  v94  [label="129:  dFdZ[i][j][k] = f.partialDerivativeY(y, z)"];
  v95  [label="130:  d2FdYdZ[i][j][k] = f.partialDerivativeXY(y, z)"];
  v96  [label="136:  final double[][][] d2FdZdX = new double[xLen][yLen][zLen]"];
  v97  [label="137:  for (  int j = 0 ; j < yLen ;   j++)"];
  v100  [label="endfor"];
  v101  [label="138:  final BicubicSplineInterpolatingFunction f = ySplineZX[j]"];
  v102  [label="139:  for (  int k = 0 ; k < zLen ;   k++)"];
  v105  [label="endfor"];
  v106  [label="140:  final double z = zval[k]"];
  v107  [label="141:  for (  int i = 0 ; i < xLen ;   i++)"];
  v110  [label="endfor"];
  v111  [label="142:  final double x = xval[i]"];
  v112  [label="143:  d2FdZdX[i][j][k] = f.partialDerivativeXY(z, x)"];
  v113  [label="149:  final double[][][] d3FdXdYdZ = new double[xLen][yLen][zLen]"];
  v114  [label="150:  for (  int i = 0 ; i < xLen ;   i++)"];
  v117  [label="endfor"];
  v118  [label="151:  final int nI = nextIndex(i, xLen)"];
  v119  [label="152:  final int pI = previousIndex(i)"];
  v120  [label="153:  for (  int j = 0 ; j < yLen ;   j++)"];
  v123  [label="endfor"];
  v124  [label="154:  final int nJ = nextIndex(j, yLen)"];
  v125  [label="155:  final int pJ = previousIndex(j)"];
  v126  [label="156:  for (  int k = 0 ; k < zLen ;   k++)"];
  v129  [label="endfor"];
  v130  [label="157:  final int nK = nextIndex(k, zLen)"];
  v131  [label="158:  final int pK = previousIndex(k)"];
  v132  [label="161:  d3FdXdYdZ[i][j][k] = (fval[nI][nJ][nK] - fval[nI][pJ][nK] - fval[pI][nJ][nK] + fval[pI][pJ][nK] - fval[nI][nJ][pK] + fval[nI][pJ][pK] + fval[pI][nJ][pK] - fval[pI][pJ][pK]) / ((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ]) * (zval[nK] - zval[pK]))"];
  v133  [label="171:  return new TricubicSplineInterpolatingFunction(xval, yval, zval, fval,  dFdX, dFdY, dFdZ,  d2FdXdY, d2FdZdX, d2FdYdZ,  d3FdXdYdZ);"];
  v134  [label="185:  int nextIndex(int i, int max)"];
  v135  [label="186:  final int index = i + 1"];
  v136  [label="187:  return index < max ? index : index - 1;"];
  v137  [label="196:  int previousIndex(int i)"];
  v138  [label="197:  final int index = i - 1"];
  v139  [label="198:  return index >= 0 ? index : 0;"];
  // graph-edges
  v1 -> v2;
  v2 -> v3  [label="True"];
  v2 -> v4  [label="False"];
  v4 -> v5;
  v5 -> v6  [label="True"];
  v5 -> v7  [label="False"];
  v7 -> v8;
  v8 -> v9;
  v9 -> v10;
  v10 -> v11;
  v11 -> v12;
  v12 -> v13;
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v19  [label="False"];
  v16 -> v20  [label="True"];
  v20 -> v21  [label="True"];
  v20 -> v22  [label="False"];
  v22 -> v23;
  v23 -> v26  [label="False"];
  v23 -> v27  [label="True"];
  v27 -> v28  [label="True"];
  v27 -> v29  [label="False"];
  v29 -> v30;
  v30 -> v33  [label="False"];
  v30 -> v34  [label="True"];
  v34 -> v35;
  v35 -> v36;
  v36 -> v30;
  v33 -> v23;
  v26 -> v16;
  v19 -> v37;
  v37 -> v38;
  v38 -> v39;
  v39 -> v42  [label="False"];
  v39 -> v43  [label="True"];
  v43 -> v39;
  v42 -> v44;
  v44 -> v45;
  v45 -> v48  [label="False"];
  v45 -> v49  [label="True"];
  v49 -> v45;
  v48 -> v50;
  v50 -> v51;
  v51 -> v54  [label="False"];
  v51 -> v55  [label="True"];
  v55 -> v51;
  v54 -> v56;
  v56 -> v57;
  v57 -> v58;
  v58 -> v59;
  v59 -> v62  [label="False"];
  v59 -> v63  [label="True"];
  v63 -> v64;
  v64 -> v67  [label="False"];
  v64 -> v68  [label="True"];
  v68 -> v69;
  v69 -> v72  [label="False"];
  v69 -> v73  [label="True"];
  v73 -> v74;
  v74 -> v75;
  v75 -> v76;
  v76 -> v69;
  v72 -> v64;
  v67 -> v59;
  v62 -> v77;
  v77 -> v78;
  v78 -> v79;
  v79 -> v82  [label="False"];
  v79 -> v83  [label="True"];
  v83 -> v84;
  v84 -> v87  [label="False"];
  v84 -> v88  [label="True"];
  v88 -> v89;
  v89 -> v92  [label="False"];
  v89 -> v93  [label="True"];
  v93 -> v94;
  v94 -> v95;
  v95 -> v89;
  v92 -> v84;
  v87 -> v79;
  v82 -> v96;
  v96 -> v97;
  v97 -> v100  [label="False"];
  v97 -> v101  [label="True"];
  v101 -> v102;
  v102 -> v105  [label="False"];
  v102 -> v106  [label="True"];
  v106 -> v107;
  v107 -> v110  [label="False"];
  v107 -> v111  [label="True"];
  v111 -> v112;
  v112 -> v107;
  v110 -> v102;
  v105 -> v97;
  v100 -> v113;
  v113 -> v114;
  v114 -> v117  [label="False"];
  v114 -> v118  [label="True"];
  v118 -> v119;
  v119 -> v120;
  v120 -> v123  [label="False"];
  v120 -> v124  [label="True"];
  v124 -> v125;
  v125 -> v126;
  v126 -> v129  [label="False"];
  v126 -> v130  [label="True"];
  v130 -> v131;
  v131 -> v132;
  v132 -> v126;
  v129 -> v120;
  v123 -> v114;
  v117 -> v133;
  v134 -> v135;
  v135 -> v136;
  v137 -> v138;
  v138 -> v139;
  // end-of-graph
}
