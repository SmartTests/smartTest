digraph PolynomialFunctionLagrangeForm_CFG {
  // graph-vertices
  v1  [label="72:  PolynomialFunctionLagrangeForm (double x[], double y[])"];
  v2  [label="74:  this.x = new double[x.length]"];
  v3  [label="75:  this.y = new double[y.length]"];
  v4  [label="76:  System.arraycopy(x, 0, this.x, 0, x.length)"];
  v5  [label="77:  System.arraycopy(y, 0, this.y, 0, y.length)"];
  v6  [label="78:  coefficientsComputed = false"];
  v7  [label="80:  if (!verifyInterpolationArray(x, y, false))"];
  v8  [label="81:  MathArrays.sortInPlace(this.x, this.y)"];
  v9  [label="83:  verifyInterpolationArray(this.x, this.y, true)"];
  v10  [label="endif"];
  v11  [label="99:  double value(double z)"];
  v12  [label="100:  return evaluateInternal(x, y, z);"];
  v13  [label="108:  int degree()"];
  v14  [label="109:  return x.length - 1;"];
  v15  [label="119:  double[] getInterpolatingPoints()"];
  v16  [label="120:  double[] out = new double[x.length]"];
  v17  [label="121:  System.arraycopy(x, 0, out, 0, x.length)"];
  v18  [label="122:  return out;"];
  v19  [label="132:  double[] getInterpolatingValues()"];
  v20  [label="133:  double[] out = new double[y.length]"];
  v21  [label="134:  System.arraycopy(y, 0, out, 0, y.length)"];
  v22  [label="135:  return out;"];
  v23  [label="148:  double[] getCoefficients()"];
  v24  [label="149:  if (!coefficientsComputed)"];
  v25  [label="150:  computeCoefficients()"];
  v26  [label="endif"];
  v27  [label="152:  double[] out = new double[coefficients.length]"];
  v28  [label="153:  System.arraycopy(coefficients, 0, out, 0, coefficients.length)"];
  v29  [label="154:  return out;"];
  v30  [label="173:  double evaluate(double x[], double y[], double z)"];
  v31  [label="175:  if (verifyInterpolationArray(x, y, false))"];
  v32  [label="176:  return evaluateInternal(x, y, z);"];
  v33  [label="endif"];
  v34  [label="180:  final double[] xNew = new double[x.length]"];
  v35  [label="181:  final double[] yNew = new double[y.length]"];
  v36  [label="182:  System.arraycopy(x, 0, xNew, 0, x.length)"];
  v37  [label="183:  System.arraycopy(y, 0, yNew, 0, y.length)"];
  v38  [label="185:  MathArrays.sortInPlace(xNew, yNew)"];
  v39  [label="187:  verifyInterpolationArray(xNew, yNew, true)"];
  v40  [label="188:  return evaluateInternal(xNew, yNew, z);"];
  v41  [label="207:  double evaluateInternal(double x[], double y[], double z)"];
  v42  [label="208:  int nearest = 0"];
  v43  [label="209:  final int n = x.length"];
  v44  [label="210:  final double[] c = new double[n]"];
  v45  [label="211:  final double[] d = new double[n]"];
  v46  [label="212:  double min_dist = Double.POSITIVE_INFINITY"];
  v47  [label="213:  for (  int i = 0 ; i < n ;   i++)"];
  v50  [label="endfor"];
  v51  [label="215:  c[i] = y[i]"];
  v52  [label="216:  d[i] = y[i]"];
  v53  [label="218:  final double dist = FastMath.abs(z - x[i])"];
  v54  [label="219:  if (dist < min_dist)"];
  v55  [label="220:  nearest = i"];
  v56  [label="221:  min_dist = dist"];
  v57  [label="endif"];
  v58  [label="226:  double value = y[nearest]"];
  v59  [label="228:  for (  int i = 1 ; i < n ;   i++)"];
  v62  [label="endfor"];
  v63  [label="229:  for (  int j = 0 ; j < n-i ;   j++)"];
  v66  [label="endfor"];
  v67  [label="230:  final double tc = x[j] - z"];
  v68  [label="231:  final double td = x[i+j] - z"];
  v69  [label="232:  final double divider = x[j] - x[i+j]"];
  v70  [label="234:  final double w = (c[j+1] - d[j]) / divider"];
  v71  [label="235:  c[j] = tc * w"];
  v72  [label="236:  d[j] = td * w"];
  v73  [label="239:  if (nearest < 0.5*(n-i+1))"];
  v74  [label="240:  value += c[nearest]"];
  v75  [label="endif"];
  v76  [label="242:  nearest--"];
  v77  [label="243:  value += d[nearest]"];
  v78  [label="247:  return value;"];
  v79  [label="256:  void computeCoefficients()"];
  v80  [label="257:  final int n = degree() + 1"];
  v81  [label="258:  coefficients = new double[n]"];
  v82  [label="259:  for (  int i = 0 ; i < n ;   i++)"];
  v85  [label="endfor"];
  v86  [label="260:  coefficients[i] = 0.0"];
  v87  [label="264:  final double[] c = new double[n+1]"];
  v88  [label="265:  c[0] = 1.0"];
  v89  [label="266:  for (  int i = 0 ; i < n ;   i++)"];
  v92  [label="endfor"];
  v93  [label="267:  for (  int j = i ; j > 0 ;   j--)"];
  v96  [label="endfor"];
  v97  [label="268:  c[j] = c[j-1] - c[j] * x[i]"];
  v98  [label="270:  c[0] *= -x[i]"];
  v99  [label="271:  c[i+1] = 1"];
  v100  [label="274:  final double[] tc = new double[n]"];
  v101  [label="275:  for (  int i = 0 ; i < n ;   i++)"];
  v104  [label="endfor"];
  v105  [label="277:  double d = 1"];
  v106  [label="278:  for (  int j = 0 ; j < n ;   j++)"];
  v109  [label="endfor"];
  v110  [label="279:  if (i != j)"];
  v111  [label="280:  d *= x[i] - x[j]"];
  v112  [label="endif"];
  v113  [label="283:  final double t = y[i] / d"];
  v114  [label="287:  tc[n-1] = c[n]"];
  v115  [label="288:  coefficients[n-1] += t * tc[n-1]"];
  v116  [label="289:  for (  int j = n-2 ; j >= 0 ;   j--)"];
  v119  [label="endfor"];
  v120  [label="290:  tc[j] = c[j+1] + tc[j+1] * x[i]"];
  v121  [label="291:  coefficients[j] += t * tc[j]"];
  v122  [label="295:  coefficientsComputed = true"];
  v123  [label="316:  boolean verifyInterpolationArray(double x[], double y[], boolean abort)"];
  v124  [label="318:  if (x.length != y.length)"];
  v125  [label="319:  throw new DimensionMismatchException(x.length, y.length)"];
  v126  [label="endif"];
  v127  [label="321:  if (x.length < 2)"];
  v128  [label="322:  throw new NumberIsTooSmallException(LocalizedFormats.WRONG_NUMBER_OF_POINTS, 2, x.length, true)"];
  v129  [label="endif"];
  v130  [label="325:  return MathArrays.checkOrder(x, MathArrays.OrderDirection.INCREASING, true, abort);"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8  [label="True"];
  v8 -> v9;
  v9 -> v10;
  v7 -> v10  [label="False"];
  v11 -> v12;
  v13 -> v14;
  v15 -> v16;
  v16 -> v17;
  v17 -> v18;
  v19 -> v20;
  v20 -> v21;
  v21 -> v22;
  v23 -> v24;
  v24 -> v25  [label="True"];
  v25 -> v26;
  v24 -> v26  [label="False"];
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v30 -> v31;
  v31 -> v32  [label="True"];
  v31 -> v33  [label="False"];
  v33 -> v34;
  v34 -> v35;
  v35 -> v36;
  v36 -> v37;
  v37 -> v38;
  v38 -> v39;
  v39 -> v40;
  v41 -> v42;
  v42 -> v43;
  v43 -> v44;
  v44 -> v45;
  v45 -> v46;
  v46 -> v47;
  v47 -> v50  [label="False"];
  v47 -> v51  [label="True"];
  v51 -> v52;
  v52 -> v53;
  v53 -> v54;
  v54 -> v55  [label="True"];
  v55 -> v56;
  v56 -> v57;
  v54 -> v57  [label="False"];
  v57 -> v47;
  v50 -> v58;
  v58 -> v59;
  v59 -> v62  [label="False"];
  v59 -> v63  [label="True"];
  v63 -> v66  [label="False"];
  v63 -> v67  [label="True"];
  v67 -> v68;
  v68 -> v69;
  v69 -> v70;
  v70 -> v71;
  v71 -> v72;
  v72 -> v63;
  v66 -> v73;
  v73 -> v74  [label="True"];
  v74 -> v75;
  v73 -> v76  [label="False"];
  v76 -> v77;
  v77 -> v75;
  v75 -> v59;
  v62 -> v78;
  v79 -> v80;
  v80 -> v81;
  v81 -> v82;
  v82 -> v85  [label="False"];
  v82 -> v86  [label="True"];
  v86 -> v82;
  v85 -> v87;
  v87 -> v88;
  v88 -> v89;
  v89 -> v92  [label="False"];
  v89 -> v93  [label="True"];
  v93 -> v96  [label="False"];
  v93 -> v97  [label="True"];
  v97 -> v93;
  v96 -> v98;
  v98 -> v99;
  v99 -> v89;
  v92 -> v100;
  v100 -> v101;
  v101 -> v104  [label="False"];
  v101 -> v105  [label="True"];
  v105 -> v106;
  v106 -> v109  [label="False"];
  v106 -> v110  [label="True"];
  v110 -> v111  [label="True"];
  v111 -> v112;
  v110 -> v112  [label="False"];
  v112 -> v106;
  v109 -> v113;
  v113 -> v114;
  v114 -> v115;
  v115 -> v116;
  v116 -> v119  [label="False"];
  v116 -> v120  [label="True"];
  v120 -> v121;
  v121 -> v116;
  v119 -> v101;
  v104 -> v122;
  v123 -> v124;
  v124 -> v125  [label="True"];
  v124 -> v126  [label="False"];
  v126 -> v127;
  v127 -> v128  [label="True"];
  v127 -> v129  [label="False"];
  v129 -> v130;
  // end-of-graph
}
