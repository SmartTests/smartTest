digraph PolynomialFunctionNewtonForm_CFG {
  // graph-vertices
  v1  [label="79:  PolynomialFunctionNewtonForm (double a[], double c[])"];
  v2  [label="82:  verifyInputArray(a, c)"];
  v3  [label="83:  this.a = new double[a.length]"];
  v4  [label="84:  this.c = new double[c.length]"];
  v5  [label="85:  System.arraycopy(a, 0, this.a, 0, a.length)"];
  v6  [label="86:  System.arraycopy(c, 0, this.c, 0, c.length)"];
  v7  [label="87:  coefficientsComputed = false"];
  v8  [label="96:  double value(double z)"];
  v9  [label="97:  return evaluate(a, c, z);"];
  v10  [label="104:  DerivativeStructure value(final DerivativeStructure t)"];
  v11  [label="105:  verifyInputArray(a, c)"];
  v12  [label="107:  final int n = c.length"];
  v13  [label="108:  DerivativeStructure value = new DerivativeStructure(t.getFreeParameters(), t.getOrder(), a[n])"];
  v14  [label="109:  for (  int i = n - 1 ; i >= 0 ;   i--)"];
  v17  [label="endfor"];
  v18  [label="110:  value = t.subtract(c[i]).multiply(value).add(a[i])"];
  v19  [label="113:  return value;"];
  v20  [label="122:  int degree()"];
  v21  [label="123:  return c.length;"];
  v22  [label="133:  double[] getNewtonCoefficients()"];
  v23  [label="134:  double[] out = new double[a.length]"];
  v24  [label="135:  System.arraycopy(a, 0, out, 0, a.length)"];
  v25  [label="136:  return out;"];
  v26  [label="146:  double[] getCenters()"];
  v27  [label="147:  double[] out = new double[c.length]"];
  v28  [label="148:  System.arraycopy(c, 0, out, 0, c.length)"];
  v29  [label="149:  return out;"];
  v30  [label="159:  double[] getCoefficients()"];
  v31  [label="160:  if (!coefficientsComputed)"];
  v32  [label="161:  computeCoefficients()"];
  v33  [label="endif"];
  v34  [label="163:  double[] out = new double[coefficients.length]"];
  v35  [label="164:  System.arraycopy(coefficients, 0, out, 0, coefficients.length)"];
  v36  [label="165:  return out;"];
  v37  [label="182:  double evaluate(double a[], double c[], double z)"];
  v38  [label="184:  verifyInputArray(a, c)"];
  v39  [label="186:  final int n = c.length"];
  v40  [label="187:  double value = a[n]"];
  v41  [label="188:  for (  int i = n - 1 ; i >= 0 ;   i--)"];
  v44  [label="endfor"];
  v45  [label="189:  value = a[i] + (z - c[i]) * value"];
  v46  [label="192:  return value;"];
  v47  [label="199:  void computeCoefficients()"];
  v48  [label="200:  final int n = degree()"];
  v49  [label="202:  coefficients = new double[n+1]"];
  v50  [label="203:  for (  int i = 0 ; i <= n ;   i++)"];
  v53  [label="endfor"];
  v54  [label="204:  coefficients[i] = 0.0"];
  v55  [label="207:  coefficients[0] = a[n]"];
  v56  [label="208:  for (  int i = n-1 ; i >= 0 ;   i--)"];
  v59  [label="endfor"];
  v60  [label="209:  for (  int j = n-i ; j > 0 ;   j--)"];
  v63  [label="endfor"];
  v64  [label="210:  coefficients[j] = coefficients[j-1] - c[i] * coefficients[j]"];
  v65  [label="212:  coefficients[0] = a[i] - c[i] * coefficients[0]"];
  v66  [label="215:  coefficientsComputed = true"];
  v67  [label="233:  void verifyInputArray(double a[], double c[])"];
  v68  [label="235:  MathUtils.checkNotNull(a)"];
  v69  [label="236:  MathUtils.checkNotNull(c)"];
  v70  [label="237:  if (a.length == 0 || c.length == 0)"];
  v71  [label="238:  throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY)"];
  v72  [label="endif"];
  v73  [label="240:  if (a.length != c.length + 1)"];
  v74  [label="241:  throw new DimensionMismatchException(LocalizedFormats.ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1,  a.length, c.length)"];
  v75  [label="endif"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v8 -> v9;
  v10 -> v11;
  v11 -> v12;
  v12 -> v13;
  v13 -> v14;
  v14 -> v17  [label="False"];
  v14 -> v18  [label="True"];
  v18 -> v14;
  v17 -> v19;
  v20 -> v21;
  v22 -> v23;
  v23 -> v24;
  v24 -> v25;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v30 -> v31;
  v31 -> v32  [label="True"];
  v32 -> v33;
  v31 -> v33  [label="False"];
  v33 -> v34;
  v34 -> v35;
  v35 -> v36;
  v37 -> v38;
  v38 -> v39;
  v39 -> v40;
  v40 -> v41;
  v41 -> v44  [label="False"];
  v41 -> v45  [label="True"];
  v45 -> v41;
  v44 -> v46;
  v47 -> v48;
  v48 -> v49;
  v49 -> v50;
  v50 -> v53  [label="False"];
  v50 -> v54  [label="True"];
  v54 -> v50;
  v53 -> v55;
  v55 -> v56;
  v56 -> v59  [label="False"];
  v56 -> v60  [label="True"];
  v60 -> v63  [label="False"];
  v60 -> v64  [label="True"];
  v64 -> v60;
  v63 -> v65;
  v65 -> v56;
  v59 -> v66;
  v67 -> v68;
  v68 -> v69;
  v69 -> v70;
  v70 -> v71  [label="True"];
  v70 -> v72  [label="False"];
  v72 -> v73;
  v73 -> v74  [label="True"];
  v73 -> v75  [label="False"];
  // end-of-graph
}
