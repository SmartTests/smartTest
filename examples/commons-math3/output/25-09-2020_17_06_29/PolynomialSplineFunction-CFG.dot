digraph PolynomialSplineFunction_CFG {
  // graph-vertices
  v1  [label="102:  PolynomialSplineFunction (double knots[], PolynomialFunction polynomials[])"];
  v2  [label="105:  if (knots == null || polynomials == null)"];
  v3  [label="107:  throw new NullArgumentException()"];
  v4  [label="endif"];
  v5  [label="109:  if (knots.length < 2)"];
  v6  [label="110:  throw new NumberIsTooSmallException(LocalizedFormats.NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION, 2, knots.length, false)"];
  v7  [label="endif"];
  v8  [label="113:  if (knots.length - 1 != polynomials.length)"];
  v9  [label="114:  throw new DimensionMismatchException(polynomials.length, knots.length)"];
  v10  [label="endif"];
  v11  [label="116:  MathArrays.checkOrder(knots)"];
  v12  [label="118:  this.n = knots.length -1"];
  v13  [label="119:  this.knots = new double[n + 1]"];
  v14  [label="120:  System.arraycopy(knots, 0, this.knots, 0, n + 1)"];
  v15  [label="121:  this.polynomials = new PolynomialFunction[n]"];
  v16  [label="122:  System.arraycopy(polynomials, 0, this.polynomials, 0, n)"];
  v17  [label="136:  double value(double v)"];
  v18  [label="137:  if (v < knots[0] || v > knots[n])"];
  v19  [label="138:  throw new OutOfRangeException(v, knots[0], knots[n])"];
  v20  [label="endif"];
  v21  [label="140:  int i = Arrays.binarySearch(knots, v)"];
  v22  [label="141:  if (i < 0)"];
  v23  [label="142:  i = -i - 2"];
  v24  [label="endif"];
  v25  [label="147:  if ( i >= polynomials.length )"];
  v26  [label="148:  i--"];
  v27  [label="endif"];
  v28  [label="150:  return polynomials[i].value(v - knots[i]);"];
  v29  [label="158:  UnivariateFunction derivative()"];
  v30  [label="159:  return polynomialSplineDerivative();"];
  v31  [label="167:  PolynomialSplineFunction polynomialSplineDerivative()"];
  v32  [label="168:  PolynomialFunction derivativePolynomials[] = new PolynomialFunction[n]"];
  v33  [label="169:  for (  int i = 0 ; i < n ;   i++)"];
  v36  [label="endfor"];
  v37  [label="170:  derivativePolynomials[i] = polynomials[i].polynomialDerivative()"];
  v38  [label="172:  return new PolynomialSplineFunction(knots, derivativePolynomials);"];
  v39  [label="179:  DerivativeStructure value(final DerivativeStructure t)"];
  v40  [label="180:  final double t0 = t.getValue()"];
  v41  [label="181:  if (t0 < knots[0] || t0 > knots[n])"];
  v42  [label="182:  throw new OutOfRangeException(t0, knots[0], knots[n])"];
  v43  [label="endif"];
  v44  [label="184:  int i = Arrays.binarySearch(knots, t0)"];
  v45  [label="185:  if (i < 0)"];
  v46  [label="186:  i = -i - 2"];
  v47  [label="endif"];
  v48  [label="191:  if ( i >= polynomials.length )"];
  v49  [label="192:  i--"];
  v50  [label="endif"];
  v51  [label="194:  return polynomials[i].value(t.subtract(knots[i]));"];
  v52  [label="203:  int getN()"];
  v53  [label="204:  return n;"];
  v54  [label="214:  PolynomialFunction[] getPolynomials()"];
  v55  [label="215:  PolynomialFunction p[] = new PolynomialFunction[n]"];
  v56  [label="216:  System.arraycopy(polynomials, 0, p, 0, n)"];
  v57  [label="217:  return p;"];
  v58  [label="227:  double[] getKnots()"];
  v59  [label="228:  double out[] = new double[n + 1]"];
  v60  [label="229:  System.arraycopy(knots, 0, out, 0, n + 1)"];
  v61  [label="230:  return out;"];
  v62  [label="239:  boolean isValidPoint(double x)"];
  v63  [label="240:  if (x < knots[0] || x > knots[n])"];
  v64  [label="242:  return false;"];
  v65  [label="endif"];
  v66  [label="244:  return true;"];
  // graph-edges
  v1 -> v2;
  v2 -> v3  [label="True"];
  v2 -> v4  [label="False"];
  v4 -> v5;
  v5 -> v6  [label="True"];
  v5 -> v7  [label="False"];
  v7 -> v8;
  v8 -> v9  [label="True"];
  v8 -> v10  [label="False"];
  v10 -> v11;
  v11 -> v12;
  v12 -> v13;
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v17 -> v18;
  v18 -> v19  [label="True"];
  v18 -> v20  [label="False"];
  v20 -> v21;
  v21 -> v22;
  v22 -> v23  [label="True"];
  v23 -> v24;
  v22 -> v24  [label="False"];
  v24 -> v25;
  v25 -> v26  [label="True"];
  v26 -> v27;
  v25 -> v27  [label="False"];
  v27 -> v28;
  v29 -> v30;
  v31 -> v32;
  v32 -> v33;
  v33 -> v36  [label="False"];
  v33 -> v37  [label="True"];
  v37 -> v33;
  v36 -> v38;
  v39 -> v40;
  v40 -> v41;
  v41 -> v42  [label="True"];
  v41 -> v43  [label="False"];
  v43 -> v44;
  v44 -> v45;
  v45 -> v46  [label="True"];
  v46 -> v47;
  v45 -> v47  [label="False"];
  v47 -> v48;
  v48 -> v49  [label="True"];
  v49 -> v50;
  v48 -> v50  [label="False"];
  v50 -> v51;
  v52 -> v53;
  v54 -> v55;
  v55 -> v56;
  v56 -> v57;
  v58 -> v59;
  v59 -> v60;
  v60 -> v61;
  v62 -> v63;
  v63 -> v64  [label="True"];
  v63 -> v66  [label="False"];
  // end-of-graph
}
