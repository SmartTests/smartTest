digraph BracketingNthOrderBrentSolver_CFG {
  // graph-vertices
  v1  [label="70:  BracketingNthOrderBrentSolver ()"];
  v2  [label="71:  this(DEFAULT_ABSOLUTE_ACCURACY, DEFAULT_MAXIMAL_ORDER)"];
  v3  [label="81:  BracketingNthOrderBrentSolver (final double absoluteAccuracy,  final int maximalOrder)"];
  v4  [label="84:  super(absoluteAccuracy)"];
  v5  [label="85:  if (maximalOrder < 2)"];
  v6  [label="86:  throw new NumberIsTooSmallException(maximalOrder, 2, true)"];
  v7  [label="endif"];
  v8  [label="88:  this.maximalOrder = maximalOrder"];
  v9  [label="89:  this.allowed = AllowedSolution.ANY_SIDE"];
  v10  [label="100:  BracketingNthOrderBrentSolver (final double relativeAccuracy,  final double absoluteAccuracy,  final int maximalOrder)"];
  v11  [label="104:  super(relativeAccuracy, absoluteAccuracy)"];
  v12  [label="105:  if (maximalOrder < 2)"];
  v13  [label="106:  throw new NumberIsTooSmallException(maximalOrder, 2, true)"];
  v14  [label="endif"];
  v15  [label="108:  this.maximalOrder = maximalOrder"];
  v16  [label="109:  this.allowed = AllowedSolution.ANY_SIDE"];
  v17  [label="121:  BracketingNthOrderBrentSolver (final double relativeAccuracy,  final double absoluteAccuracy,  final double functionValueAccuracy,  final int maximalOrder)"];
  v18  [label="126:  super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy)"];
  v19  [label="127:  if (maximalOrder < 2)"];
  v20  [label="128:  throw new NumberIsTooSmallException(maximalOrder, 2, true)"];
  v21  [label="endif"];
  v22  [label="130:  this.maximalOrder = maximalOrder"];
  v23  [label="131:  this.allowed = AllowedSolution.ANY_SIDE"];
  v24  [label="137:  int getMaximalOrder()"];
  v25  [label="138:  return maximalOrder;"];
  v26  [label="145:  double doSolve()"];
  v27  [label="150:  final double[] x = new double[maximalOrder + 1]"];
  v28  [label="151:  final double[] y = new double[maximalOrder + 1]"];
  v29  [label="152:  x[0] = getMin()"];
  v30  [label="153:  x[1] = getStartValue()"];
  v31  [label="154:  x[2] = getMax()"];
  v32  [label="155:  verifySequence(x[0], x[1], x[2])"];
  v33  [label="158:  y[1] = computeObjectiveValue(x[1])"];
  v34  [label="159:  if (Precision.equals(y[1], 0.0, 1))"];
  v35  [label="161:  return x[1];"];
  v36  [label="endif"];
  v37  [label="165:  y[0] = computeObjectiveValue(x[0])"];
  v38  [label="166:  if (Precision.equals(y[0], 0.0, 1))"];
  v39  [label="168:  return x[0];"];
  v40  [label="endif"];
  v41  [label="171:  int nbPoints"];
  v42  [label="172:  int signChangeIndex"];
  v43  [label="173:  if (y[0] * y[1] < 0)"];
  v44  [label="176:  nbPoints  = 2"];
  v45  [label="177:  signChangeIndex = 1"];
  v46  [label="endif"];
  v47  [label="182:  y[2] = computeObjectiveValue(x[2])"];
  v48  [label="183:  if (Precision.equals(y[2], 0.0, 1))"];
  v49  [label="185:  return x[2];"];
  v50  [label="endif"];
  v51  [label="188:  if (y[1] * y[2] < 0)"];
  v52  [label="190:  nbPoints  = 3"];
  v53  [label="191:  signChangeIndex = 2"];
  v54  [label="endif"];
  v55  [label="193:  throw new NoBracketingException(x[0], x[2], y[0], y[2])"];
  v56  [label="199:  final double[] tmpX = new double[x.length]"];
  v57  [label="202:  double xA  = x[signChangeIndex - 1]"];
  v58  [label="203:  double yA  = y[signChangeIndex - 1]"];
  v59  [label="204:  double absYA = FastMath.abs(yA)"];
  v60  [label="205:  int agingA = 0"];
  v61  [label="206:  double xB  = x[signChangeIndex]"];
  v62  [label="207:  double yB  = y[signChangeIndex]"];
  v63  [label="208:  double absYB = FastMath.abs(yB)"];
  v64  [label="209:  int agingB = 0"];
  v65  [label="212:  while (true)"];
  v66  [label="endwhile"];
  v67  [label="215:  final double xTol = getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB))"];
  v68  [label="217:  if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy()))"];
  v69  [label="218:  switch (allowed)"];
  v70  [label="end-switch"];
  v71  [label="219:  case ANY_SIDE :"];
  v72  [label="220:  return absYA < absYB ? xA : xB;"];
  v73  [label="221:  case LEFT_SIDE :"];
  v74  [label="222:  return xA;"];
  v75  [label="223:  case RIGHT_SIDE :"];
  v76  [label="224:  return xB;"];
  v77  [label="225:  case BELOW_SIDE :"];
  v78  [label="226:  return (yA <= 0) ? xA : xB;"];
  v79  [label="227:  case ABOVE_SIDE :"];
  v80  [label="228:  return (yA <  0) ? xB : xA;"];
  v81  [label="229:  default :"];
  v82  [label="231:  throw new MathInternalError()"];
  v83  [label="endif"];
  v84  [label="236:  double targetY"];
  v85  [label="237:  if (agingA >= MAXIMAL_AGING)"];
  v86  [label="239:  final int p = agingA - MAXIMAL_AGING"];
  v87  [label="240:  final double weightA = (1 << p) - 1"];
  v88  [label="241:  final double weightB = p + 1"];
  v89  [label="242:  targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB)"];
  v90  [label="endif"];
  v91  [label="243:  if (agingB >= MAXIMAL_AGING)"];
  v92  [label="245:  final int p = agingB - MAXIMAL_AGING"];
  v93  [label="246:  final double weightA = p + 1"];
  v94  [label="247:  final double weightB = (1 << p) - 1"];
  v95  [label="248:  targetY = (weightB * yB - weightA * REDUCTION_FACTOR * yA) / (weightA + weightB)"];
  v96  [label="endif"];
  v97  [label="251:  targetY = 0"];
  v98  [label="255:  double nextX"];
  v99  [label="256:  int start = 0"];
  v100  [label="257:  int end = nbPoints"];
  v101  [label="258:  do"];
  v102  [label="283:  while (Double.isNaN(nextX) && (end - start > 1))"];
  v103  [label="end-do-while"];
  v104  [label="261:  System.arraycopy(x, start, tmpX, start, end - start)"];
  v105  [label="262:  nextX = guessX(targetY, tmpX, y, start, end)"];
  v106  [label="264:  if (!((nextX > xA) && (nextX < xB)))"];
  v107  [label="270:  if (signChangeIndex - start >= end - signChangeIndex)"];
  v108  [label="272:  ++start"];
  v109  [label="endif"];
  v110  [label="275:  --end"];
  v111  [label="279:  nextX = Double.NaN"];
  v112  [label="endif"];
  v113  [label="285:  if (Double.isNaN(nextX))"];
  v114  [label="287:  nextX = xA + 0.5 * (xB - xA)"];
  v115  [label="288:  start = signChangeIndex - 1"];
  v116  [label="289:  end = signChangeIndex"];
  v117  [label="endif"];
  v118  [label="293:  final double nextY = computeObjectiveValue(nextX)"];
  v119  [label="294:  if (Precision.equals(nextY, 0.0, 1))"];
  v120  [label="297:  return nextX;"];
  v121  [label="endif"];
  v122  [label="300:  if ((nbPoints > 2) && (end - start != nbPoints))"];
  v123  [label="304:  nbPoints = end - start"];
  v124  [label="305:  System.arraycopy(x, start, x, 0, nbPoints)"];
  v125  [label="306:  System.arraycopy(y, start, y, 0, nbPoints)"];
  v126  [label="307:  signChangeIndex -= start"];
  v127  [label="endif"];
  v128  [label="309:  if (nbPoints == x.length)"];
  v129  [label="312:  nbPoints--"];
  v130  [label="315:  if (signChangeIndex >= (x.length + 1) / 2)"];
  v131  [label="317:  System.arraycopy(x, 1, x, 0, nbPoints)"];
  v132  [label="318:  System.arraycopy(y, 1, y, 0, nbPoints)"];
  v133  [label="319:  --signChangeIndex"];
  v134  [label="endif"];
  v135  [label="endif"];
  v136  [label="326:  System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex)"];
  v137  [label="327:  x[signChangeIndex] = nextX"];
  v138  [label="328:  System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex)"];
  v139  [label="329:  y[signChangeIndex] = nextY"];
  v140  [label="330:  ++nbPoints"];
  v141  [label="333:  if (nextY * yA <= 0)"];
  v142  [label="335:  xB = nextX"];
  v143  [label="336:  yB = nextY"];
  v144  [label="337:  absYB = FastMath.abs(yB)"];
  v145  [label="338:  ++agingA"];
  v146  [label="339:  agingB = 0"];
  v147  [label="endif"];
  v148  [label="342:  xA = nextX"];
  v149  [label="343:  yA = nextY"];
  v150  [label="344:  absYA = FastMath.abs(yA)"];
  v151  [label="345:  agingA = 0"];
  v152  [label="346:  ++agingB"];
  v153  [label="349:  signChangeIndex++"];
  v154  [label="371:  double guessX(final double targetY, final double[] x, final double[] y, final int start, final int end)"];
  v155  [label="375:  for (  int i = start ; i < end - 1 ;   ++i)"];
  v158  [label="endfor"];
  v159  [label="376:  final int delta = i + 1 - start"];
  v160  [label="377:  for (  int j = end - 1 ; j > i ;   --j)"];
  v163  [label="endfor"];
  v164  [label="378:  x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta])"];
  v165  [label="383:  double x0 = 0"];
  v166  [label="384:  for (  int j = end - 1 ; j >= start ;   --j)"];
  v169  [label="endfor"];
  v170  [label="385:  x0 = x[j] + x0 * (targetY - y[j])"];
  v171  [label="388:  return x0;"];
  v172  [label="393:  double solve(int maxEval, UnivariateFunction f, double min, double max, AllowedSolution allowedSolution)"];
  v173  [label="398:  this.allowed = allowedSolution"];
  v174  [label="399:  return super.solve(maxEval, f, min, max);"];
  v175  [label="403:  double solve(int maxEval, UnivariateFunction f, double min, double max, double startValue, AllowedSolution allowedSolution)"];
  v176  [label="409:  this.allowed = allowedSolution"];
  v177  [label="410:  return super.solve(maxEval, f, min, max, startValue);"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6  [label="True"];
  v5 -> v7  [label="False"];
  v7 -> v8;
  v8 -> v9;
  v10 -> v11;
  v11 -> v12;
  v12 -> v13  [label="True"];
  v12 -> v14  [label="False"];
  v14 -> v15;
  v15 -> v16;
  v17 -> v18;
  v18 -> v19;
  v19 -> v20  [label="True"];
  v19 -> v21  [label="False"];
  v21 -> v22;
  v22 -> v23;
  v24 -> v25;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v31;
  v31 -> v32;
  v32 -> v33;
  v33 -> v34;
  v34 -> v35  [label="True"];
  v34 -> v36  [label="False"];
  v36 -> v37;
  v37 -> v38;
  v38 -> v39  [label="True"];
  v38 -> v40  [label="False"];
  v40 -> v41;
  v41 -> v42;
  v42 -> v43;
  v43 -> v44  [label="True"];
  v44 -> v45;
  v45 -> v46;
  v43 -> v47  [label="False"];
  v47 -> v48;
  v48 -> v49  [label="True"];
  v48 -> v50  [label="False"];
  v50 -> v51;
  v51 -> v52  [label="True"];
  v52 -> v53;
  v53 -> v54;
  v51 -> v55  [label="False"];
  v54 -> v46;
  v46 -> v56;
  v56 -> v57;
  v57 -> v58;
  v58 -> v59;
  v59 -> v60;
  v60 -> v61;
  v61 -> v62;
  v62 -> v63;
  v63 -> v64;
  v64 -> v65;
  v65 -> v66  [label="False"];
  v65 -> v67  [label="True"];
  v67 -> v68;
  v68 -> v69  [label="True"];
  v69 -> v71;
  v71 -> v72  [label="True"];
  v71 -> v73  [label="False"];
  v73 -> v74  [label="True"];
  v73 -> v75  [label="False"];
  v75 -> v76  [label="True"];
  v75 -> v77  [label="False"];
  v77 -> v78  [label="True"];
  v77 -> v79  [label="False"];
  v79 -> v80  [label="True"];
  v79 -> v81  [label="False"];
  v81 -> v82;
  v70 -> v83;
  v68 -> v83  [label="False"];
  v83 -> v84;
  v84 -> v85;
  v85 -> v86  [label="True"];
  v86 -> v87;
  v87 -> v88;
  v88 -> v89;
  v89 -> v90;
  v85 -> v91  [label="False"];
  v91 -> v92  [label="True"];
  v92 -> v93;
  v93 -> v94;
  v94 -> v95;
  v95 -> v96;
  v91 -> v97  [label="False"];
  v97 -> v96;
  v96 -> v90;
  v90 -> v98;
  v98 -> v99;
  v99 -> v100;
  v100 -> v101;
  v101 -> v104;
  v104 -> v105;
  v105 -> v106;
  v106 -> v107  [label="True"];
  v107 -> v108  [label="True"];
  v108 -> v109;
  v107 -> v110  [label="False"];
  v110 -> v109;
  v109 -> v111;
  v111 -> v112;
  v106 -> v112  [label="False"];
  v112 -> v102;
  v102 -> v101  [label="True"];
  v102 -> v103  [label="False"];
  v103 -> v113;
  v113 -> v114  [label="True"];
  v114 -> v115;
  v115 -> v116;
  v116 -> v117;
  v113 -> v117  [label="False"];
  v117 -> v118;
  v118 -> v119;
  v119 -> v120  [label="True"];
  v119 -> v121  [label="False"];
  v121 -> v122;
  v122 -> v123  [label="True"];
  v123 -> v124;
  v124 -> v125;
  v125 -> v126;
  v126 -> v127;
  v122 -> v128  [label="False"];
  v128 -> v129  [label="True"];
  v129 -> v130;
  v130 -> v131  [label="True"];
  v131 -> v132;
  v132 -> v133;
  v133 -> v134;
  v130 -> v134  [label="False"];
  v134 -> v135;
  v128 -> v135  [label="False"];
  v135 -> v127;
  v127 -> v136;
  v136 -> v137;
  v137 -> v138;
  v138 -> v139;
  v139 -> v140;
  v140 -> v141;
  v141 -> v142  [label="True"];
  v142 -> v143;
  v143 -> v144;
  v144 -> v145;
  v145 -> v146;
  v146 -> v147;
  v141 -> v148  [label="False"];
  v148 -> v149;
  v149 -> v150;
  v150 -> v151;
  v151 -> v152;
  v152 -> v153;
  v153 -> v147;
  v147 -> v65;
  v154 -> v155;
  v155 -> v158  [label="False"];
  v155 -> v159  [label="True"];
  v159 -> v160;
  v160 -> v163  [label="False"];
  v160 -> v164  [label="True"];
  v164 -> v160;
  v163 -> v155;
  v158 -> v165;
  v165 -> v166;
  v166 -> v169  [label="False"];
  v166 -> v170  [label="True"];
  v170 -> v166;
  v169 -> v171;
  v172 -> v173;
  v173 -> v174;
  v175 -> v176;
  v176 -> v177;
  // end-of-graph
}
