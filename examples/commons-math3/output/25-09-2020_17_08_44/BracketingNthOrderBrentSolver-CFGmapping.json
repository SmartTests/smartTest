[
  {
    "v1": {
      "line": "70",
      "statement": "BracketingNthOrderBrentSolver ()"
    }
  },
  {
    "v2": {
      "line": "71",
      "statement": "this(DEFAULT_ABSOLUTE_ACCURACY, DEFAULT_MAXIMAL_ORDER)"
    }
  },
  {
    "v3": {
      "line": "81",
      "statement": "BracketingNthOrderBrentSolver (final double absoluteAccuracy,  final int maximalOrder)"
    }
  },
  {
    "v4": {
      "line": "84",
      "statement": "super(absoluteAccuracy)"
    }
  },
  {
    "v5": {
      "line": "85",
      "statement": "if (maximalOrder < 2)"
    }
  },
  {
    "v6": {
      "line": "86",
      "statement": "throw new NumberIsTooSmallException(maximalOrder, 2, true)"
    }
  },
  {
    "v7": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v8": {
      "line": "88",
      "statement": "this.maximalOrder = maximalOrder"
    }
  },
  {
    "v9": {
      "line": "89",
      "statement": "this.allowed = AllowedSolution.ANY_SIDE"
    }
  },
  {
    "v10": {
      "line": "100",
      "statement": "BracketingNthOrderBrentSolver (final double relativeAccuracy,  final double absoluteAccuracy,  final int maximalOrder)"
    }
  },
  {
    "v11": {
      "line": "104",
      "statement": "super(relativeAccuracy, absoluteAccuracy)"
    }
  },
  {
    "v12": {
      "line": "105",
      "statement": "if (maximalOrder < 2)"
    }
  },
  {
    "v13": {
      "line": "106",
      "statement": "throw new NumberIsTooSmallException(maximalOrder, 2, true)"
    }
  },
  {
    "v14": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v15": {
      "line": "108",
      "statement": "this.maximalOrder = maximalOrder"
    }
  },
  {
    "v16": {
      "line": "109",
      "statement": "this.allowed = AllowedSolution.ANY_SIDE"
    }
  },
  {
    "v17": {
      "line": "121",
      "statement": "BracketingNthOrderBrentSolver (final double relativeAccuracy,  final double absoluteAccuracy,  final double functionValueAccuracy,  final int maximalOrder)"
    }
  },
  {
    "v18": {
      "line": "126",
      "statement": "super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy)"
    }
  },
  {
    "v19": {
      "line": "127",
      "statement": "if (maximalOrder < 2)"
    }
  },
  {
    "v20": {
      "line": "128",
      "statement": "throw new NumberIsTooSmallException(maximalOrder, 2, true)"
    }
  },
  {
    "v21": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v22": {
      "line": "130",
      "statement": "this.maximalOrder = maximalOrder"
    }
  },
  {
    "v23": {
      "line": "131",
      "statement": "this.allowed = AllowedSolution.ANY_SIDE"
    }
  },
  {
    "v24": {
      "line": "137",
      "statement": "int getMaximalOrder()"
    }
  },
  {
    "v25": {
      "line": "138",
      "statement": "return maximalOrder"
    }
  },
  {
    "v26": {
      "line": "145",
      "statement": "double doSolve()"
    }
  },
  {
    "v27": {
      "line": "150",
      "statement": "final double[] x = new double[maximalOrder + 1"
    }
  },
  {
    "v28": {
      "line": "151",
      "statement": "final double[] y = new double[maximalOrder + 1"
    }
  },
  {
    "v29": {
      "line": "152",
      "statement": "x[0] = getMin()"
    }
  },
  {
    "v30": {
      "line": "153",
      "statement": "x[1] = getStartValue()"
    }
  },
  {
    "v31": {
      "line": "154",
      "statement": "x[2] = getMax()"
    }
  },
  {
    "v32": {
      "line": "155",
      "statement": "verifySequence(x[0], x[1], x[2])"
    }
  },
  {
    "v33": {
      "line": "158",
      "statement": "y[1] = computeObjectiveValue(x[1])"
    }
  },
  {
    "v34": {
      "line": "159",
      "statement": "if (Precision.equals(y[1], 0.0, 1))"
    }
  },
  {
    "v35": {
      "line": "161",
      "statement": "return x[1"
    }
  },
  {
    "v36": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v37": {
      "line": "165",
      "statement": "y[0] = computeObjectiveValue(x[0])"
    }
  },
  {
    "v38": {
      "line": "166",
      "statement": "if (Precision.equals(y[0], 0.0, 1))"
    }
  },
  {
    "v39": {
      "line": "168",
      "statement": "return x[0"
    }
  },
  {
    "v40": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v41": {
      "line": "171",
      "statement": "int nbPoints"
    }
  },
  {
    "v42": {
      "line": "172",
      "statement": "int signChangeIndex"
    }
  },
  {
    "v43": {
      "line": "173",
      "statement": "if (y[0] * y[1] < 0)"
    }
  },
  {
    "v44": {
      "line": "176",
      "statement": "nbPoints  = 2"
    }
  },
  {
    "v45": {
      "line": "177",
      "statement": "signChangeIndex = 1"
    }
  },
  {
    "v46": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v47": {
      "line": "182",
      "statement": "y[2] = computeObjectiveValue(x[2])"
    }
  },
  {
    "v48": {
      "line": "183",
      "statement": "if (Precision.equals(y[2], 0.0, 1))"
    }
  },
  {
    "v49": {
      "line": "185",
      "statement": "return x[2"
    }
  },
  {
    "v50": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v51": {
      "line": "188",
      "statement": "if (y[1] * y[2] < 0)"
    }
  },
  {
    "v52": {
      "line": "190",
      "statement": "nbPoints  = 3"
    }
  },
  {
    "v53": {
      "line": "191",
      "statement": "signChangeIndex = 2"
    }
  },
  {
    "v54": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v55": {
      "line": "193",
      "statement": "throw new NoBracketingException(x[0], x[2], y[0], y[2])"
    }
  },
  {
    "v56": {
      "line": "199",
      "statement": "final double[] tmpX = new double[x.length"
    }
  },
  {
    "v57": {
      "line": "202",
      "statement": "double xA  = x[signChangeIndex - 1"
    }
  },
  {
    "v58": {
      "line": "203",
      "statement": "double yA  = y[signChangeIndex - 1"
    }
  },
  {
    "v59": {
      "line": "204",
      "statement": "double absYA = FastMath.abs(yA)"
    }
  },
  {
    "v60": {
      "line": "205",
      "statement": "int agingA = 0"
    }
  },
  {
    "v61": {
      "line": "206",
      "statement": "double xB  = x[signChangeIndex"
    }
  },
  {
    "v62": {
      "line": "207",
      "statement": "double yB  = y[signChangeIndex"
    }
  },
  {
    "v63": {
      "line": "208",
      "statement": "double absYB = FastMath.abs(yB)"
    }
  },
  {
    "v64": {
      "line": "209",
      "statement": "int agingB = 0"
    }
  },
  {
    "v65": {
      "line": "212",
      "statement": "while (true)"
    }
  },
  {
    "v66": {
      "line": 0,
      "statement": "\"endwhile"
    }
  },
  {
    "v67": {
      "line": "215",
      "statement": "final double xTol = getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB))"
    }
  },
  {
    "v68": {
      "line": "217",
      "statement": "if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy()))"
    }
  },
  {
    "v69": {
      "line": "218",
      "statement": "switch (allowed)"
    }
  },
  {
    "v70": {
      "line": 0,
      "statement": "\"end-switch"
    }
  },
  {
    "v71": {
      "line": "219",
      "statement": "case ANY_SIDE"
    }
  },
  {
    "v72": {
      "line": "220",
      "statement": "return absYA < absYB ? xA"
    }
  },
  {
    "v73": {
      "line": "221",
      "statement": "case LEFT_SIDE"
    }
  },
  {
    "v74": {
      "line": "222",
      "statement": "return xA"
    }
  },
  {
    "v75": {
      "line": "223",
      "statement": "case RIGHT_SIDE"
    }
  },
  {
    "v76": {
      "line": "224",
      "statement": "return xB"
    }
  },
  {
    "v77": {
      "line": "225",
      "statement": "case BELOW_SIDE"
    }
  },
  {
    "v78": {
      "line": "226",
      "statement": "return (yA <= 0) ? xA"
    }
  },
  {
    "v79": {
      "line": "227",
      "statement": "case ABOVE_SIDE"
    }
  },
  {
    "v80": {
      "line": "228",
      "statement": "return (yA <  0) ? xB"
    }
  },
  {
    "v81": {
      "line": "229",
      "statement": "default"
    }
  },
  {
    "v82": {
      "line": "231",
      "statement": "throw new MathInternalError()"
    }
  },
  {
    "v83": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v84": {
      "line": "236",
      "statement": "double targetY"
    }
  },
  {
    "v85": {
      "line": "237",
      "statement": "if (agingA >= MAXIMAL_AGING)"
    }
  },
  {
    "v86": {
      "line": "239",
      "statement": "final int p = agingA - MAXIMAL_AGING"
    }
  },
  {
    "v87": {
      "line": "240",
      "statement": "final double weightA = (1 << p) - 1"
    }
  },
  {
    "v88": {
      "line": "241",
      "statement": "final double weightB = p + 1"
    }
  },
  {
    "v89": {
      "line": "242",
      "statement": "targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB)"
    }
  },
  {
    "v90": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v91": {
      "line": "243",
      "statement": "if (agingB >= MAXIMAL_AGING)"
    }
  },
  {
    "v92": {
      "line": "245",
      "statement": "final int p = agingB - MAXIMAL_AGING"
    }
  },
  {
    "v93": {
      "line": "246",
      "statement": "final double weightA = p + 1"
    }
  },
  {
    "v94": {
      "line": "247",
      "statement": "final double weightB = (1 << p) - 1"
    }
  },
  {
    "v95": {
      "line": "248",
      "statement": "targetY = (weightB * yB - weightA * REDUCTION_FACTOR * yA) / (weightA + weightB)"
    }
  },
  {
    "v96": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v97": {
      "line": "251",
      "statement": "targetY = 0"
    }
  },
  {
    "v98": {
      "line": "255",
      "statement": "double nextX"
    }
  },
  {
    "v99": {
      "line": "256",
      "statement": "int start = 0"
    }
  },
  {
    "v100": {
      "line": "257",
      "statement": "int end = nbPoints"
    }
  },
  {
    "v101": {
      "line": "258",
      "statement": "do"
    }
  },
  {
    "v102": {
      "line": "283",
      "statement": "while (Double.isNaN(nextX) && (end - start > 1))"
    }
  },
  {
    "v103": {
      "line": 0,
      "statement": "\"end-do-while"
    }
  },
  {
    "v104": {
      "line": "261",
      "statement": "System.arraycopy(x, start, tmpX, start, end - start)"
    }
  },
  {
    "v105": {
      "line": "262",
      "statement": "nextX = guessX(targetY, tmpX, y, start, end)"
    }
  },
  {
    "v106": {
      "line": "264",
      "statement": "if (!((nextX > xA) && (nextX < xB)))"
    }
  },
  {
    "v107": {
      "line": "270",
      "statement": "if (signChangeIndex - start >= end - signChangeIndex)"
    }
  },
  {
    "v108": {
      "line": "272",
      "statement": "++start"
    }
  },
  {
    "v109": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v110": {
      "line": "275",
      "statement": "--end"
    }
  },
  {
    "v111": {
      "line": "279",
      "statement": "nextX = Double.NaN"
    }
  },
  {
    "v112": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v113": {
      "line": "285",
      "statement": "if (Double.isNaN(nextX))"
    }
  },
  {
    "v114": {
      "line": "287",
      "statement": "nextX = xA + 0.5 * (xB - xA)"
    }
  },
  {
    "v115": {
      "line": "288",
      "statement": "start = signChangeIndex - 1"
    }
  },
  {
    "v116": {
      "line": "289",
      "statement": "end = signChangeIndex"
    }
  },
  {
    "v117": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v118": {
      "line": "293",
      "statement": "final double nextY = computeObjectiveValue(nextX)"
    }
  },
  {
    "v119": {
      "line": "294",
      "statement": "if (Precision.equals(nextY, 0.0, 1))"
    }
  },
  {
    "v120": {
      "line": "297",
      "statement": "return nextX"
    }
  },
  {
    "v121": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v122": {
      "line": "300",
      "statement": "if ((nbPoints > 2) && (end - start != nbPoints))"
    }
  },
  {
    "v123": {
      "line": "304",
      "statement": "nbPoints = end - start"
    }
  },
  {
    "v124": {
      "line": "305",
      "statement": "System.arraycopy(x, start, x, 0, nbPoints)"
    }
  },
  {
    "v125": {
      "line": "306",
      "statement": "System.arraycopy(y, start, y, 0, nbPoints)"
    }
  },
  {
    "v126": {
      "line": "307",
      "statement": "signChangeIndex -= start"
    }
  },
  {
    "v127": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v128": {
      "line": "309",
      "statement": "if (nbPoints == x.length)"
    }
  },
  {
    "v129": {
      "line": "312",
      "statement": "nbPoints--"
    }
  },
  {
    "v130": {
      "line": "315",
      "statement": "if (signChangeIndex >= (x.length + 1) / 2)"
    }
  },
  {
    "v131": {
      "line": "317",
      "statement": "System.arraycopy(x, 1, x, 0, nbPoints)"
    }
  },
  {
    "v132": {
      "line": "318",
      "statement": "System.arraycopy(y, 1, y, 0, nbPoints)"
    }
  },
  {
    "v133": {
      "line": "319",
      "statement": "--signChangeIndex"
    }
  },
  {
    "v134": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v135": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v136": {
      "line": "326",
      "statement": "System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex)"
    }
  },
  {
    "v137": {
      "line": "327",
      "statement": "x[signChangeIndex] = nextX"
    }
  },
  {
    "v138": {
      "line": "328",
      "statement": "System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex)"
    }
  },
  {
    "v139": {
      "line": "329",
      "statement": "y[signChangeIndex] = nextY"
    }
  },
  {
    "v140": {
      "line": "330",
      "statement": "++nbPoints"
    }
  },
  {
    "v141": {
      "line": "333",
      "statement": "if (nextY * yA <= 0)"
    }
  },
  {
    "v142": {
      "line": "335",
      "statement": "xB = nextX"
    }
  },
  {
    "v143": {
      "line": "336",
      "statement": "yB = nextY"
    }
  },
  {
    "v144": {
      "line": "337",
      "statement": "absYB = FastMath.abs(yB)"
    }
  },
  {
    "v145": {
      "line": "338",
      "statement": "++agingA"
    }
  },
  {
    "v146": {
      "line": "339",
      "statement": "agingB = 0"
    }
  },
  {
    "v147": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v148": {
      "line": "342",
      "statement": "xA = nextX"
    }
  },
  {
    "v149": {
      "line": "343",
      "statement": "yA = nextY"
    }
  },
  {
    "v150": {
      "line": "344",
      "statement": "absYA = FastMath.abs(yA)"
    }
  },
  {
    "v151": {
      "line": "345",
      "statement": "agingA = 0"
    }
  },
  {
    "v152": {
      "line": "346",
      "statement": "++agingB"
    }
  },
  {
    "v153": {
      "line": "349",
      "statement": "signChangeIndex++"
    }
  },
  {
    "v154": {
      "line": "371",
      "statement": "double guessX(final double targetY, final double[] x, final double[] y, final int start, final int end)"
    }
  },
  {
    "v155": {
      "line": "375",
      "statement": "for (  int i = start ; i < end - 1 ;   ++i)"
    }
  },
  {
    "v158": {
      "line": 0,
      "statement": "\"endfor"
    }
  },
  {
    "v159": {
      "line": "376",
      "statement": "final int delta = i + 1 - start"
    }
  },
  {
    "v160": {
      "line": "377",
      "statement": "for (  int j = end - 1 ; j > i ;   --j)"
    }
  },
  {
    "v163": {
      "line": 0,
      "statement": "\"endfor"
    }
  },
  {
    "v164": {
      "line": "378",
      "statement": "x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta])"
    }
  },
  {
    "v165": {
      "line": "383",
      "statement": "double x0 = 0"
    }
  },
  {
    "v166": {
      "line": "384",
      "statement": "for (  int j = end - 1 ; j >= start ;   --j)"
    }
  },
  {
    "v169": {
      "line": 0,
      "statement": "\"endfor"
    }
  },
  {
    "v170": {
      "line": "385",
      "statement": "x0 = x[j] + x0 * (targetY - y[j])"
    }
  },
  {
    "v171": {
      "line": "388",
      "statement": "return x0"
    }
  },
  {
    "v172": {
      "line": "393",
      "statement": "double solve(int maxEval, UnivariateFunction f, double min, double max, AllowedSolution allowedSolution)"
    }
  },
  {
    "v173": {
      "line": "398",
      "statement": "this.allowed = allowedSolution"
    }
  },
  {
    "v174": {
      "line": "399",
      "statement": "return super.solve(maxEval, f, min, max)"
    }
  },
  {
    "v175": {
      "line": "403",
      "statement": "double solve(int maxEval, UnivariateFunction f, double min, double max, double startValue, AllowedSolution allowedSolution)"
    }
  },
  {
    "v176": {
      "line": "409",
      "statement": "this.allowed = allowedSolution"
    }
  },
  {
    "v177": {
      "line": "410",
      "statement": "return super.solve(maxEval, f, min, max, startValue)"
    }
  }
]