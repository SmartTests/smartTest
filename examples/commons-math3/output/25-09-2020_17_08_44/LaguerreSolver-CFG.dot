digraph LaguerreSolver_CFG {
  // graph-vertices
  v1  [label="54:  LaguerreSolver ()"];
  v2  [label="55:  this(DEFAULT_ABSOLUTE_ACCURACY)"];
  v3  [label="62:  LaguerreSolver (double absoluteAccuracy)"];
  v4  [label="63:  super(absoluteAccuracy)"];
  v5  [label="71:  LaguerreSolver (double relativeAccuracy, double absoluteAccuracy)"];
  v6  [label="73:  super(relativeAccuracy, absoluteAccuracy)"];
  v7  [label="82:  LaguerreSolver (double relativeAccuracy, double absoluteAccuracy, double functionValueAccuracy)"];
  v8  [label="85:  super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy)"];
  v9  [label="92:  double doSolve()"];
  v10  [label="96:  final double min = getMin()"];
  v11  [label="97:  final double max = getMax()"];
  v12  [label="98:  final double initial = getStartValue()"];
  v13  [label="99:  final double functionValueAccuracy = getFunctionValueAccuracy()"];
  v14  [label="101:  verifySequence(min, initial, max)"];
  v15  [label="104:  final double yInitial = computeObjectiveValue(initial)"];
  v16  [label="105:  if (FastMath.abs(yInitial) <= functionValueAccuracy)"];
  v17  [label="106:  return initial;"];
  v18  [label="endif"];
  v19  [label="110:  final double yMin = computeObjectiveValue(min)"];
  v20  [label="111:  if (FastMath.abs(yMin) <= functionValueAccuracy)"];
  v21  [label="112:  return min;"];
  v22  [label="endif"];
  v23  [label="116:  if (yInitial * yMin < 0)"];
  v24  [label="117:  return laguerre(min, initial, yMin, yInitial);"];
  v25  [label="endif"];
  v26  [label="121:  final double yMax = computeObjectiveValue(max)"];
  v27  [label="122:  if (FastMath.abs(yMax) <= functionValueAccuracy)"];
  v28  [label="123:  return max;"];
  v29  [label="endif"];
  v30  [label="127:  if (yInitial * yMax < 0)"];
  v31  [label="128:  return laguerre(initial, max, yInitial, yMax);"];
  v32  [label="endif"];
  v33  [label="131:  throw new NoBracketingException(min, max, yMin, yMax)"];
  v34  [label="155:  double laguerre(double lo, double hi,  double fLo, double fHi)"];
  v35  [label="157:  final Complex c[] = ComplexUtils.convertToComplex(getCoefficients())"];
  v36  [label="159:  final Complex initial = new Complex(0.5 * (lo + hi), 0)"];
  v37  [label="160:  final Complex z = complexSolver.solve(c, initial)"];
  v38  [label="161:  if (complexSolver.isRoot(lo, hi, z))"];
  v39  [label="162:  return z.getReal();"];
  v40  [label="endif"];
  v41  [label="164:  double r = Double.NaN"];
  v42  [label="166:  Complex[] root = complexSolver.solveAll(c, initial)"];
  v43  [label="167:  for (  int i = 0 ; i < root.length ;   i++)"];
  v46  [label="endfor"];
  v47  [label="168:  if (complexSolver.isRoot(lo, hi, root[i]))"];
  v48  [label="169:  r = root[i].getReal()"];
  v49  [label="170:  break;"];
  v50  [label="endif"];
  v51  [label="173:  return r;"];
  v52  [label="193:  Complex[] solveAllComplex(double[] coefficients,  double initial)"];
  v53  [label="198:  setup(Integer.MAX_VALUE, new PolynomialFunction(coefficients), Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, initial)"];
  v54  [label="203:  return complexSolver.solveAll(ComplexUtils.convertToComplex(coefficients), new Complex(initial, 0d));"];
  v55  [label="223:  Complex solveComplex(double[] coefficients, double initial)"];
  v56  [label="228:  setup(Integer.MAX_VALUE, new PolynomialFunction(coefficients), Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, initial)"];
  v57  [label="233:  return complexSolver.solve(ComplexUtils.convertToComplex(coefficients),  new Complex(initial, 0d));"];
  v58  [label="250:  boolean isRoot(double min, double max, Complex z)"];
  v59  [label="251:  if (isSequence(min, z.getReal(), max))"];
  v60  [label="252:  double tolerance = FastMath.max(getRelativeAccuracy() * z.abs(), getAbsoluteAccuracy())"];
  v61  [label="253:  return (FastMath.abs(z.getImaginary()) <= tolerance) ||  (z.abs() <= getFunctionValueAccuracy());"];
  v62  [label="endif"];
  v63  [label="256:  return false;"];
  v64  [label="272:  Complex[] solveAll(Complex coefficients[], Complex initial)"];
  v65  [label="276:  if (coefficients == null)"];
  v66  [label="277:  throw new NullArgumentException()"];
  v67  [label="endif"];
  v68  [label="279:  final int n = coefficients.length - 1"];
  v69  [label="280:  if (n == 0)"];
  v70  [label="281:  throw new NoDataException(LocalizedFormats.POLYNOMIAL)"];
  v71  [label="endif"];
  v72  [label="284:  final Complex c[] = new Complex[n + 1]"];
  v73  [label="285:  for (  int i = 0 ; i <= n ;   i++)"];
  v76  [label="endfor"];
  v77  [label="286:  c[i] = coefficients[i]"];
  v78  [label="290:  final Complex root[] = new Complex[n]"];
  v79  [label="291:  for (  int i = 0 ; i < n ;   i++)"];
  v82  [label="endfor"];
  v83  [label="292:  final Complex subarray[] = new Complex[n - i + 1]"];
  v84  [label="293:  System.arraycopy(c, 0, subarray, 0, subarray.length)"];
  v85  [label="294:  root[i] = solve(subarray, initial)"];
  v86  [label="296:  Complex newc = c[n - i]"];
  v87  [label="297:  Complex oldc = null"];
  v88  [label="298:  for (  int j = n - i - 1 ; j >= 0 ;   j--)"];
  v91  [label="endfor"];
  v92  [label="299:  oldc = c[j]"];
  v93  [label="300:  c[j] = newc"];
  v94  [label="301:  newc = oldc.add(newc.multiply(root[i]))"];
  v95  [label="305:  return root;"];
  v96  [label="321:  Complex solve(Complex coefficients[], Complex initial)"];
  v97  [label="325:  if (coefficients == null)"];
  v98  [label="326:  throw new NullArgumentException()"];
  v99  [label="endif"];
  v100  [label="329:  final int n = coefficients.length - 1"];
  v101  [label="330:  if (n == 0)"];
  v102  [label="331:  throw new NoDataException(LocalizedFormats.POLYNOMIAL)"];
  v103  [label="endif"];
  v104  [label="334:  final double absoluteAccuracy = getAbsoluteAccuracy()"];
  v105  [label="335:  final double relativeAccuracy = getRelativeAccuracy()"];
  v106  [label="336:  final double functionValueAccuracy = getFunctionValueAccuracy()"];
  v107  [label="338:  final Complex nC  = new Complex(n, 0)"];
  v108  [label="339:  final Complex n1C = new Complex(n - 1, 0)"];
  v109  [label="341:  Complex z = initial"];
  v110  [label="342:  Complex oldz = new Complex(Double.POSITIVE_INFINITY,  Double.POSITIVE_INFINITY)"];
  v111  [label="344:  while (true)"];
  v112  [label="endwhile"];
  v113  [label="347:  Complex pv = coefficients[n]"];
  v114  [label="348:  Complex dv = Complex.ZERO"];
  v115  [label="349:  Complex d2v = Complex.ZERO"];
  v116  [label="350:  for (  int j = n-1 ; j >= 0 ;   j--)"];
  v119  [label="endfor"];
  v120  [label="351:  d2v = dv.add(z.multiply(d2v))"];
  v121  [label="352:  dv = pv.add(z.multiply(dv))"];
  v122  [label="353:  pv = coefficients[j].add(z.multiply(pv))"];
  v123  [label="355:  d2v = d2v.multiply(new Complex(2.0, 0.0))"];
  v124  [label="358:  final double tolerance = FastMath.max(relativeAccuracy * z.abs(), absoluteAccuracy)"];
  v125  [label="360:  if ((z.subtract(oldz)).abs() <= tolerance)"];
  v126  [label="361:  return z;"];
  v127  [label="endif"];
  v128  [label="363:  if (pv.abs() <= functionValueAccuracy)"];
  v129  [label="364:  return z;"];
  v130  [label="endif"];
  v131  [label="368:  final Complex G = dv.divide(pv)"];
  v132  [label="369:  final Complex G2 = G.multiply(G)"];
  v133  [label="370:  final Complex H = G2.subtract(d2v.divide(pv))"];
  v134  [label="371:  final Complex delta = n1C.multiply((nC.multiply(H)).subtract(G2))"];
  v135  [label="373:  final Complex deltaSqrt = delta.sqrt()"];
  v136  [label="374:  final Complex dplus = G.add(deltaSqrt)"];
  v137  [label="375:  final Complex dminus = G.subtract(deltaSqrt)"];
  v138  [label="376:  final Complex denominator = dplus.abs() > dminus.abs() ? dplus : dminus"];
  v139  [label="379:  if (denominator.equals(new Complex(0.0, 0.0)))"];
  v140  [label="380:  z = z.add(new Complex(absoluteAccuracy, absoluteAccuracy))"];
  v141  [label="381:  oldz = new Complex(Double.POSITIVE_INFINITY,  Double.POSITIVE_INFINITY)"];
  v142  [label="endif"];
  v143  [label="384:  oldz = z"];
  v144  [label="385:  z = z.subtract(nC.divide(denominator))"];
  v145  [label="387:  incrementEvaluationCount()"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v7 -> v8;
  v9 -> v10;
  v10 -> v11;
  v11 -> v12;
  v12 -> v13;
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v17  [label="True"];
  v16 -> v18  [label="False"];
  v18 -> v19;
  v19 -> v20;
  v20 -> v21  [label="True"];
  v20 -> v22  [label="False"];
  v22 -> v23;
  v23 -> v24  [label="True"];
  v23 -> v25  [label="False"];
  v25 -> v26;
  v26 -> v27;
  v27 -> v28  [label="True"];
  v27 -> v29  [label="False"];
  v29 -> v30;
  v30 -> v31  [label="True"];
  v30 -> v32  [label="False"];
  v32 -> v33;
  v34 -> v35;
  v35 -> v36;
  v36 -> v37;
  v37 -> v38;
  v38 -> v39  [label="True"];
  v38 -> v41  [label="False"];
  v41 -> v42;
  v42 -> v43;
  v43 -> v46  [label="False"];
  v43 -> v47  [label="True"];
  v47 -> v48  [label="True"];
  v48 -> v49;
  v49 -> v46;
  v47 -> v50  [label="False"];
  v50 -> v43;
  v46 -> v51;
  v52 -> v53;
  v53 -> v54;
  v55 -> v56;
  v56 -> v57;
  v58 -> v59;
  v59 -> v60  [label="True"];
  v60 -> v61;
  v59 -> v62  [label="False"];
  v62 -> v63;
  v64 -> v65;
  v65 -> v66  [label="True"];
  v65 -> v67  [label="False"];
  v67 -> v68;
  v68 -> v69;
  v69 -> v70  [label="True"];
  v69 -> v71  [label="False"];
  v71 -> v72;
  v72 -> v73;
  v73 -> v76  [label="False"];
  v73 -> v77  [label="True"];
  v77 -> v73;
  v76 -> v78;
  v78 -> v79;
  v79 -> v82  [label="False"];
  v79 -> v83  [label="True"];
  v83 -> v84;
  v84 -> v85;
  v85 -> v86;
  v86 -> v87;
  v87 -> v88;
  v88 -> v91  [label="False"];
  v88 -> v92  [label="True"];
  v92 -> v93;
  v93 -> v94;
  v94 -> v88;
  v91 -> v79;
  v82 -> v95;
  v96 -> v97;
  v97 -> v98  [label="True"];
  v97 -> v99  [label="False"];
  v99 -> v100;
  v100 -> v101;
  v101 -> v102  [label="True"];
  v101 -> v103  [label="False"];
  v103 -> v104;
  v104 -> v105;
  v105 -> v106;
  v106 -> v107;
  v107 -> v108;
  v108 -> v109;
  v109 -> v110;
  v110 -> v111;
  v111 -> v112  [label="False"];
  v111 -> v113  [label="True"];
  v113 -> v114;
  v114 -> v115;
  v115 -> v116;
  v116 -> v119  [label="False"];
  v116 -> v120  [label="True"];
  v120 -> v121;
  v121 -> v122;
  v122 -> v116;
  v119 -> v123;
  v123 -> v124;
  v124 -> v125;
  v125 -> v126  [label="True"];
  v125 -> v127  [label="False"];
  v127 -> v128;
  v128 -> v129  [label="True"];
  v128 -> v130  [label="False"];
  v130 -> v131;
  v131 -> v132;
  v132 -> v133;
  v133 -> v134;
  v134 -> v135;
  v135 -> v136;
  v136 -> v137;
  v137 -> v138;
  v138 -> v139;
  v139 -> v140  [label="True"];
  v140 -> v141;
  v141 -> v142;
  v139 -> v143  [label="False"];
  v143 -> v144;
  v144 -> v142;
  v142 -> v145;
  v145 -> v111;
  // end-of-graph
}
