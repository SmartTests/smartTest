digraph MullerSolver_CFG {
  // graph-vertices
  v1  [label="58:  MullerSolver ()"];
  v2  [label="59:  this(DEFAULT_ABSOLUTE_ACCURACY)"];
  v3  [label="66:  MullerSolver (double absoluteAccuracy)"];
  v4  [label="67:  super(absoluteAccuracy)"];
  v5  [label="75:  MullerSolver (double relativeAccuracy, double absoluteAccuracy)"];
  v6  [label="77:  super(relativeAccuracy, absoluteAccuracy)"];
  v7  [label="84:  double doSolve()"];
  v8  [label="88:  final double min = getMin()"];
  v9  [label="89:  final double max = getMax()"];
  v10  [label="90:  final double initial = getStartValue()"];
  v11  [label="92:  final double functionValueAccuracy = getFunctionValueAccuracy()"];
  v12  [label="94:  verifySequence(min, initial, max)"];
  v13  [label="97:  final double fMin = computeObjectiveValue(min)"];
  v14  [label="98:  if (FastMath.abs(fMin) < functionValueAccuracy)"];
  v15  [label="99:  return min;"];
  v16  [label="endif"];
  v17  [label="101:  final double fMax = computeObjectiveValue(max)"];
  v18  [label="102:  if (FastMath.abs(fMax) < functionValueAccuracy)"];
  v19  [label="103:  return max;"];
  v20  [label="endif"];
  v21  [label="105:  final double fInitial = computeObjectiveValue(initial)"];
  v22  [label="106:  if (FastMath.abs(fInitial) <  functionValueAccuracy)"];
  v23  [label="107:  return initial;"];
  v24  [label="endif"];
  v25  [label="110:  verifyBracketing(min, max)"];
  v26  [label="112:  if (isBracketing(min, initial))"];
  v27  [label="113:  return solve(min, initial, fMin, fInitial);"];
  v28  [label="endif"];
  v29  [label="115:  return solve(initial, max, fInitial, fMax);"];
  v30  [label="130:  double solve(double min, double max,  double fMin, double fMax)"];
  v31  [label="133:  final double relativeAccuracy = getRelativeAccuracy()"];
  v32  [label="134:  final double absoluteAccuracy = getAbsoluteAccuracy()"];
  v33  [label="135:  final double functionValueAccuracy = getFunctionValueAccuracy()"];
  v34  [label="142:  double x0 = min"];
  v35  [label="143:  double y0 = fMin"];
  v36  [label="144:  double x2 = max"];
  v37  [label="145:  double y2 = fMax"];
  v38  [label="146:  double x1 = 0.5 * (x0 + x2)"];
  v39  [label="147:  double y1 = computeObjectiveValue(x1)"];
  v40  [label="149:  double oldx = Double.POSITIVE_INFINITY"];
  v41  [label="150:  while (true)"];
  v42  [label="endwhile"];
  v43  [label="155:  final double d01 = (y1 - y0) / (x1 - x0)"];
  v44  [label="156:  final double d12 = (y2 - y1) / (x2 - x1)"];
  v45  [label="157:  final double d012 = (d12 - d01) / (x2 - x0)"];
  v46  [label="158:  final double c1 = d01 + (x1 - x0) * d012"];
  v47  [label="159:  final double delta = c1 * c1 - 4 * y1 * d012"];
  v48  [label="160:  final double xplus = x1 + (-2.0 * y1) / (c1 + FastMath.sqrt(delta))"];
  v49  [label="161:  final double xminus = x1 + (-2.0 * y1) / (c1 - FastMath.sqrt(delta))"];
  v50  [label="164:  final double x = isSequence(x0, xplus, x2) ? xplus : xminus"];
  v51  [label="165:  final double y = computeObjectiveValue(x)"];
  v52  [label="168:  final double tolerance = FastMath.max(relativeAccuracy * FastMath.abs(x), absoluteAccuracy)"];
  v53  [label="169:  if (FastMath.abs(x - oldx) <= tolerance || FastMath.abs(y) <= functionValueAccuracy)"];
  v54  [label="171:  return x;"];
  v55  [label="endif"];
  v56  [label="178:  boolean bisect = (x < x1 && (x1 - x0) > 0.95 * (x2 - x0)) ||  (x > x1 && (x2 - x1) > 0.95 * (x2 - x0)) ||  (x == x1)"];
  v57  [label="182:  if (!bisect)"];
  v58  [label="183:  x0 = x < x1 ? x0 : x1"];
  v59  [label="184:  y0 = x < x1 ? y0 : y1"];
  v60  [label="185:  x2 = x > x1 ? x2 : x1"];
  v61  [label="186:  y2 = x > x1 ? y2 : y1"];
  v62  [label="187:  x1 = x"];
  v63  [label="187:  y1 = y"];
  v64  [label="188:  oldx = x"];
  v65  [label="endif"];
  v66  [label="190:  double xm = 0.5 * (x0 + x2)"];
  v67  [label="191:  double ym = computeObjectiveValue(xm)"];
  v68  [label="192:  if (FastMath.signum(y0) + FastMath.signum(ym) == 0.0)"];
  v69  [label="193:  x2 = xm"];
  v70  [label="193:  y2 = ym"];
  v71  [label="endif"];
  v72  [label="195:  x0 = xm"];
  v73  [label="195:  y0 = ym"];
  v74  [label="197:  x1 = 0.5 * (x0 + x2)"];
  v75  [label="198:  y1 = computeObjectiveValue(x1)"];
  v76  [label="199:  oldx = Double.POSITIVE_INFINITY"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v7 -> v8;
  v8 -> v9;
  v9 -> v10;
  v10 -> v11;
  v11 -> v12;
  v12 -> v13;
  v13 -> v14;
  v14 -> v15  [label="True"];
  v14 -> v16  [label="False"];
  v16 -> v17;
  v17 -> v18;
  v18 -> v19  [label="True"];
  v18 -> v20  [label="False"];
  v20 -> v21;
  v21 -> v22;
  v22 -> v23  [label="True"];
  v22 -> v24  [label="False"];
  v24 -> v25;
  v25 -> v26;
  v26 -> v27  [label="True"];
  v26 -> v29  [label="False"];
  v30 -> v31;
  v31 -> v32;
  v32 -> v33;
  v33 -> v34;
  v34 -> v35;
  v35 -> v36;
  v36 -> v37;
  v37 -> v38;
  v38 -> v39;
  v39 -> v40;
  v40 -> v41;
  v41 -> v42  [label="False"];
  v41 -> v43  [label="True"];
  v43 -> v44;
  v44 -> v45;
  v45 -> v46;
  v46 -> v47;
  v47 -> v48;
  v48 -> v49;
  v49 -> v50;
  v50 -> v51;
  v51 -> v52;
  v52 -> v53;
  v53 -> v54  [label="True"];
  v53 -> v55  [label="False"];
  v55 -> v56;
  v56 -> v57;
  v57 -> v58  [label="True"];
  v58 -> v59;
  v59 -> v60;
  v60 -> v61;
  v61 -> v62;
  v62 -> v63;
  v63 -> v64;
  v64 -> v65;
  v57 -> v66  [label="False"];
  v66 -> v67;
  v67 -> v68;
  v68 -> v69  [label="True"];
  v69 -> v70;
  v70 -> v71;
  v68 -> v72  [label="False"];
  v72 -> v73;
  v73 -> v71;
  v71 -> v74;
  v74 -> v75;
  v75 -> v76;
  v76 -> v65;
  v65 -> v41;
  // end-of-graph
}
