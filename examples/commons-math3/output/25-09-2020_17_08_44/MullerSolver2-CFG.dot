digraph MullerSolver2_CFG {
  // graph-vertices
  v1  [label="58:  MullerSolver2 ()"];
  v2  [label="59:  this(DEFAULT_ABSOLUTE_ACCURACY)"];
  v3  [label="66:  MullerSolver2 (double absoluteAccuracy)"];
  v4  [label="67:  super(absoluteAccuracy)"];
  v5  [label="75:  MullerSolver2 (double relativeAccuracy, double absoluteAccuracy)"];
  v6  [label="77:  super(relativeAccuracy, absoluteAccuracy)"];
  v7  [label="84:  double doSolve()"];
  v8  [label="88:  final double min = getMin()"];
  v9  [label="89:  final double max = getMax()"];
  v10  [label="91:  verifyInterval(min, max)"];
  v11  [label="93:  final double relativeAccuracy = getRelativeAccuracy()"];
  v12  [label="94:  final double absoluteAccuracy = getAbsoluteAccuracy()"];
  v13  [label="95:  final double functionValueAccuracy = getFunctionValueAccuracy()"];
  v14  [label="101:  double x0 = min"];
  v15  [label="102:  double y0 = computeObjectiveValue(x0)"];
  v16  [label="103:  if (FastMath.abs(y0) < functionValueAccuracy)"];
  v17  [label="104:  return x0;"];
  v18  [label="endif"];
  v19  [label="106:  double x1 = max"];
  v20  [label="107:  double y1 = computeObjectiveValue(x1)"];
  v21  [label="108:  if (FastMath.abs(y1) < functionValueAccuracy)"];
  v22  [label="109:  return x1;"];
  v23  [label="endif"];
  v24  [label="112:  if (y0 * y1 > 0)"];
  v25  [label="113:  throw new NoBracketingException(x0, x1, y0, y1)"];
  v26  [label="endif"];
  v27  [label="116:  double x2 = 0.5 * (x0 + x1)"];
  v28  [label="117:  double y2 = computeObjectiveValue(x2)"];
  v29  [label="119:  double oldx = Double.POSITIVE_INFINITY"];
  v30  [label="120:  while (true)"];
  v31  [label="endwhile"];
  v32  [label="122:  final double q = (x2 - x1) / (x1 - x0)"];
  v33  [label="123:  final double a = q * (y2 - (1 + q) * y1 + q * y0)"];
  v34  [label="124:  final double b = (2 * q + 1) * y2 - (1 + q) * (1 + q) * y1 + q * q * y0"];
  v35  [label="125:  final double c = (1 + q) * y2"];
  v36  [label="126:  final double delta = b * b - 4 * a * c"];
  v37  [label="127:  double x"];
  v38  [label="128:  final double denominator"];
  v39  [label="129:  if (delta >= 0.0)"];
  v40  [label="131:  double dplus = b + FastMath.sqrt(delta)"];
  v41  [label="132:  double dminus = b - FastMath.sqrt(delta)"];
  v42  [label="133:  denominator = FastMath.abs(dplus) > FastMath.abs(dminus) ? dplus : dminus"];
  v43  [label="endif"];
  v44  [label="136:  denominator = FastMath.sqrt(b * b - delta)"];
  v45  [label="138:  if (denominator != 0)"];
  v46  [label="139:  x = x2 - 2.0 * c * (x2 - x1) / denominator"];
  v47  [label="142:  while (x == x1 || x == x2)"];
  v48  [label="endwhile"];
  v49  [label="143:  x += absoluteAccuracy"];
  v50  [label="endif"];
  v51  [label="147:  x = min + FastMath.random() * (max - min)"];
  v52  [label="148:  oldx = Double.POSITIVE_INFINITY"];
  v53  [label="150:  final double y = computeObjectiveValue(x)"];
  v54  [label="153:  final double tolerance = FastMath.max(relativeAccuracy * FastMath.abs(x), absoluteAccuracy)"];
  v55  [label="154:  if (FastMath.abs(x - oldx) <= tolerance || FastMath.abs(y) <= functionValueAccuracy)"];
  v56  [label="156:  return x;"];
  v57  [label="endif"];
  v58  [label="160:  x0 = x1"];
  v59  [label="161:  y0 = y1"];
  v60  [label="162:  x1 = x2"];
  v61  [label="163:  y1 = y2"];
  v62  [label="164:  x2 = x"];
  v63  [label="165:  y2 = y"];
  v64  [label="166:  oldx = x"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v7 -> v8;
  v8 -> v9;
  v9 -> v10;
  v10 -> v11;
  v11 -> v12;
  v12 -> v13;
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v17  [label="True"];
  v16 -> v18  [label="False"];
  v18 -> v19;
  v19 -> v20;
  v20 -> v21;
  v21 -> v22  [label="True"];
  v21 -> v23  [label="False"];
  v23 -> v24;
  v24 -> v25  [label="True"];
  v24 -> v26  [label="False"];
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v31  [label="False"];
  v30 -> v32  [label="True"];
  v32 -> v33;
  v33 -> v34;
  v34 -> v35;
  v35 -> v36;
  v36 -> v37;
  v37 -> v38;
  v38 -> v39;
  v39 -> v40  [label="True"];
  v40 -> v41;
  v41 -> v42;
  v42 -> v43;
  v39 -> v44  [label="False"];
  v44 -> v43;
  v43 -> v45;
  v45 -> v46  [label="True"];
  v46 -> v47;
  v47 -> v48  [label="False"];
  v47 -> v49  [label="True"];
  v49 -> v47;
  v48 -> v50;
  v45 -> v51  [label="False"];
  v51 -> v52;
  v52 -> v50;
  v50 -> v53;
  v53 -> v54;
  v54 -> v55;
  v55 -> v56  [label="True"];
  v55 -> v57  [label="False"];
  v57 -> v58;
  v58 -> v59;
  v59 -> v60;
  v60 -> v61;
  v61 -> v62;
  v62 -> v63;
  v63 -> v64;
  v64 -> v30;
  // end-of-graph
}
