digraph RiddersSolver_CFG {
  // graph-vertices
  v1  [label="42:  RiddersSolver ()"];
  v2  [label="43:  this(DEFAULT_ABSOLUTE_ACCURACY)"];
  v3  [label="50:  RiddersSolver (double absoluteAccuracy)"];
  v4  [label="51:  super(absoluteAccuracy)"];
  v5  [label="59:  RiddersSolver (double relativeAccuracy,  double absoluteAccuracy)"];
  v6  [label="61:  super(relativeAccuracy, absoluteAccuracy)"];
  v7  [label="68:  double doSolve()"];
  v8  [label="71:  double min = getMin()"];
  v9  [label="72:  double max = getMax()"];
  v10  [label="76:  double x1 = min"];
  v11  [label="77:  double y1 = computeObjectiveValue(x1)"];
  v12  [label="78:  double x2 = max"];
  v13  [label="79:  double y2 = computeObjectiveValue(x2)"];
  v14  [label="82:  if (y1 == 0)"];
  v15  [label="83:  return min;"];
  v16  [label="endif"];
  v17  [label="85:  if (y2 == 0)"];
  v18  [label="86:  return max;"];
  v19  [label="endif"];
  v20  [label="88:  verifyBracketing(min, max)"];
  v21  [label="90:  final double absoluteAccuracy = getAbsoluteAccuracy()"];
  v22  [label="91:  final double functionValueAccuracy = getFunctionValueAccuracy()"];
  v23  [label="92:  final double relativeAccuracy = getRelativeAccuracy()"];
  v24  [label="94:  double oldx = Double.POSITIVE_INFINITY"];
  v25  [label="95:  while (true)"];
  v26  [label="endwhile"];
  v27  [label="97:  final double x3 = 0.5 * (x1 + x2)"];
  v28  [label="98:  final double y3 = computeObjectiveValue(x3)"];
  v29  [label="99:  if (FastMath.abs(y3) <= functionValueAccuracy)"];
  v30  [label="100:  return x3;"];
  v31  [label="endif"];
  v32  [label="102:  final double delta = 1 - (y1 * y2) / (y3 * y3)"];
  v33  [label="103:  final double correction = (FastMath.signum(y2) * FastMath.signum(y3)) * (x3 - x1) / FastMath.sqrt(delta)"];
  v34  [label="105:  final double x = x3 - correction"];
  v35  [label="106:  final double y = computeObjectiveValue(x)"];
  v36  [label="109:  final double tolerance = FastMath.max(relativeAccuracy * FastMath.abs(x), absoluteAccuracy)"];
  v37  [label="110:  if (FastMath.abs(x - oldx) <= tolerance)"];
  v38  [label="111:  return x;"];
  v39  [label="endif"];
  v40  [label="113:  if (FastMath.abs(y) <= functionValueAccuracy)"];
  v41  [label="114:  return x;"];
  v42  [label="endif"];
  v43  [label="119:  if (correction > 0.0)"];
  v44  [label="120:  if (FastMath.signum(y1) + FastMath.signum(y) == 0.0)"];
  v45  [label="121:  x2 = x"];
  v46  [label="122:  y2 = y"];
  v47  [label="endif"];
  v48  [label="124:  x1 = x"];
  v49  [label="125:  x2 = x3"];
  v50  [label="126:  y1 = y"];
  v51  [label="127:  y2 = y3"];
  v52  [label="endif"];
  v53  [label="130:  if (FastMath.signum(y2) + FastMath.signum(y) == 0.0)"];
  v54  [label="131:  x1 = x"];
  v55  [label="132:  y1 = y"];
  v56  [label="endif"];
  v57  [label="134:  x1 = x3"];
  v58  [label="135:  x2 = x"];
  v59  [label="136:  y1 = y3"];
  v60  [label="137:  y2 = y"];
  v61  [label="140:  oldx = x"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v7 -> v8;
  v8 -> v9;
  v9 -> v10;
  v10 -> v11;
  v11 -> v12;
  v12 -> v13;
  v13 -> v14;
  v14 -> v15  [label="True"];
  v14 -> v16  [label="False"];
  v16 -> v17;
  v17 -> v18  [label="True"];
  v17 -> v19  [label="False"];
  v19 -> v20;
  v20 -> v21;
  v21 -> v22;
  v22 -> v23;
  v23 -> v24;
  v24 -> v25;
  v25 -> v26  [label="False"];
  v25 -> v27  [label="True"];
  v27 -> v28;
  v28 -> v29;
  v29 -> v30  [label="True"];
  v29 -> v31  [label="False"];
  v31 -> v32;
  v32 -> v33;
  v33 -> v34;
  v34 -> v35;
  v35 -> v36;
  v36 -> v37;
  v37 -> v38  [label="True"];
  v37 -> v39  [label="False"];
  v39 -> v40;
  v40 -> v41  [label="True"];
  v40 -> v42  [label="False"];
  v42 -> v43;
  v43 -> v44  [label="True"];
  v44 -> v45  [label="True"];
  v45 -> v46;
  v46 -> v47;
  v44 -> v48  [label="False"];
  v48 -> v49;
  v49 -> v50;
  v50 -> v51;
  v51 -> v47;
  v47 -> v52;
  v43 -> v53  [label="False"];
  v53 -> v54  [label="True"];
  v54 -> v55;
  v55 -> v56;
  v53 -> v57  [label="False"];
  v57 -> v58;
  v58 -> v59;
  v59 -> v60;
  v60 -> v56;
  v56 -> v52;
  v52 -> v61;
  v61 -> v25;
  // end-of-graph
}
