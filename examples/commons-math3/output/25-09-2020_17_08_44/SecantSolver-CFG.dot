digraph SecantSolver_CFG {
  // graph-vertices
  v1  [label="49:  SecantSolver ()"];
  v2  [label="50:  super(DEFAULT_ABSOLUTE_ACCURACY)"];
  v3  [label="58:  SecantSolver (final double absoluteAccuracy)"];
  v4  [label="59:  super(absoluteAccuracy)"];
  v5  [label="68:  SecantSolver (final double relativeAccuracy, final double absoluteAccuracy)"];
  v6  [label="70:  super(relativeAccuracy, absoluteAccuracy)"];
  v7  [label="75:  double doSolve()"];
  v8  [label="79:  double x0 = getMin()"];
  v9  [label="80:  double x1 = getMax()"];
  v10  [label="81:  double f0 = computeObjectiveValue(x0)"];
  v11  [label="82:  double f1 = computeObjectiveValue(x1)"];
  v12  [label="87:  if (f0 == 0.0)"];
  v13  [label="88:  return x0;"];
  v14  [label="endif"];
  v15  [label="90:  if (f1 == 0.0)"];
  v16  [label="91:  return x1;"];
  v17  [label="endif"];
  v18  [label="95:  verifyBracketing(x0, x1)"];
  v19  [label="98:  final double ftol = getFunctionValueAccuracy()"];
  v20  [label="99:  final double atol = getAbsoluteAccuracy()"];
  v21  [label="100:  final double rtol = getRelativeAccuracy()"];
  v22  [label="103:  while (true)"];
  v23  [label="endwhile"];
  v24  [label="105:  final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0))"];
  v25  [label="106:  final double fx = computeObjectiveValue(x)"];
  v26  [label="111:  if (fx == 0.0)"];
  v27  [label="112:  return x;"];
  v28  [label="endif"];
  v29  [label="116:  x0 = x1"];
  v30  [label="117:  f0 = f1"];
  v31  [label="118:  x1 = x"];
  v32  [label="119:  f1 = fx"];
  v33  [label="124:  if (FastMath.abs(f1) <= ftol)"];
  v34  [label="125:  return x1;"];
  v35  [label="endif"];
  v36  [label="130:  if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol))"];
  v37  [label="131:  return x1;"];
  v38  [label="endif"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v7 -> v8;
  v8 -> v9;
  v9 -> v10;
  v10 -> v11;
  v11 -> v12;
  v12 -> v13  [label="True"];
  v12 -> v14  [label="False"];
  v14 -> v15;
  v15 -> v16  [label="True"];
  v15 -> v17  [label="False"];
  v17 -> v18;
  v18 -> v19;
  v19 -> v20;
  v20 -> v21;
  v21 -> v22;
  v22 -> v23  [label="False"];
  v22 -> v24  [label="True"];
  v24 -> v25;
  v25 -> v26;
  v26 -> v27  [label="True"];
  v26 -> v28  [label="False"];
  v28 -> v29;
  v29 -> v30;
  v30 -> v31;
  v31 -> v32;
  v32 -> v33;
  v33 -> v34  [label="True"];
  v33 -> v35  [label="False"];
  v35 -> v36;
  v36 -> v37  [label="True"];
  v36 -> v38  [label="False"];
  v38 -> v22;
  // end-of-graph
}
