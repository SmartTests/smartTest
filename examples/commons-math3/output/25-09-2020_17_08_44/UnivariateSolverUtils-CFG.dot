digraph UnivariateSolverUtils_CFG {
  // graph-vertices
  v1  [label="36:  UnivariateSolverUtils ()"];
  v2  [label="50:  double solve(UnivariateFunction function, double x0, double x1)"];
  v3  [label="53:  if (function == null)"];
  v4  [label="54:  throw new NullArgumentException(LocalizedFormats.FUNCTION)"];
  v5  [label="endif"];
  v6  [label="56:  final UnivariateSolver solver = new BrentSolver()"];
  v7  [label="57:  return solver.solve(Integer.MAX_VALUE, function, x0, x1);"];
  v8  [label="73:  double solve(UnivariateFunction function,  double x0, double x1,  double absoluteAccuracy)"];
  v9  [label="78:  if (function == null)"];
  v10  [label="79:  throw new NullArgumentException(LocalizedFormats.FUNCTION)"];
  v11  [label="endif"];
  v12  [label="81:  final UnivariateSolver solver = new BrentSolver(absoluteAccuracy)"];
  v13  [label="82:  return solver.solve(Integer.MAX_VALUE, function, x0, x1);"];
  v14  [label="101:  double forceSide(final int maxEval, final UnivariateFunction f,  final BracketedUnivariateSolver<UnivariateFunction> bracketing,  final double baseRoot, final double min, final double max,  final AllowedSolution allowedSolution)"];
  v15  [label="107:  if (allowedSolution == AllowedSolution.ANY_SIDE)"];
  v16  [label="109:  return baseRoot;"];
  v17  [label="endif"];
  v18  [label="113:  final double step = FastMath.max(bracketing.getAbsoluteAccuracy(),  FastMath.abs(baseRoot * bracketing.getRelativeAccuracy()))"];
  v19  [label="115:  double xLo  = FastMath.max(min, baseRoot - step)"];
  v20  [label="116:  double fLo  = f.value(xLo)"];
  v21  [label="117:  double xHi  = FastMath.min(max, baseRoot + step)"];
  v22  [label="118:  double fHi  = f.value(xHi)"];
  v23  [label="119:  int remainingEval = maxEval - 2"];
  v24  [label="120:  while (remainingEval > 0)"];
  v25  [label="endwhile"];
  v26  [label="122:  if ((fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0))"];
  v27  [label="124:  return bracketing.solve(remainingEval, f, xLo, xHi, baseRoot, allowedSolution);"];
  v28  [label="endif"];
  v29  [label="128:  boolean changeLo = false"];
  v30  [label="129:  boolean changeHi = false"];
  v31  [label="130:  if (fLo < fHi)"];
  v32  [label="132:  if (fLo >= 0)"];
  v33  [label="133:  changeLo = true"];
  v34  [label="endif"];
  v35  [label="135:  changeHi = true"];
  v36  [label="endif"];
  v37  [label="137:  if (fLo > fHi)"];
  v38  [label="139:  if (fLo <= 0)"];
  v39  [label="140:  changeLo = true"];
  v40  [label="endif"];
  v41  [label="142:  changeHi = true"];
  v42  [label="endif"];
  v43  [label="146:  changeLo = true"];
  v44  [label="147:  changeHi = true"];
  v45  [label="151:  if (changeLo)"];
  v46  [label="152:  xLo = FastMath.max(min, xLo - step)"];
  v47  [label="153:  fLo  = f.value(xLo)"];
  v48  [label="154:  remainingEval--"];
  v49  [label="endif"];
  v50  [label="158:  if (changeHi)"];
  v51  [label="159:  xHi = FastMath.min(max, xHi + step)"];
  v52  [label="160:  fHi  = f.value(xHi)"];
  v53  [label="161:  remainingEval--"];
  v54  [label="endif"];
  v55  [label="166:  throw new NoBracketingException(LocalizedFormats.FAILED_BRACKETING, xLo, xHi, fLo, fHi, maxEval - remainingEval, maxEval, baseRoot, min, max)"];
  v56  [label="212:  double[] bracket(UnivariateFunction function,  double initial,  double lowerBound, double upperBound)"];
  v57  [label="218:  return bracket(function, initial, lowerBound, upperBound, Integer.MAX_VALUE);"];
  v58  [label="253:  double[] bracket(UnivariateFunction function,  double initial,  double lowerBound, double upperBound,  int maximumIterations)"];
  v59  [label="260:  if (function == null)"];
  v60  [label="261:  throw new NullArgumentException(LocalizedFormats.FUNCTION)"];
  v61  [label="endif"];
  v62  [label="263:  if (maximumIterations <= 0)"];
  v63  [label="264:  throw new NotStrictlyPositiveException(LocalizedFormats.INVALID_MAX_ITERATIONS, maximumIterations)"];
  v64  [label="endif"];
  v65  [label="266:  verifySequence(lowerBound, initial, upperBound)"];
  v66  [label="268:  double a = initial"];
  v67  [label="269:  double b = initial"];
  v68  [label="270:  double fa"];
  v69  [label="271:  double fb"];
  v70  [label="272:  int numIterations = 0"];
  v71  [label="274:  do"];
  v72  [label="281:  while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)))"];
  v73  [label="end-do-while"];
  v74  [label="275:  a = FastMath.max(a - 1.0, lowerBound)"];
  v75  [label="276:  b = FastMath.min(b + 1.0, upperBound)"];
  v76  [label="277:  fa = function.value(a)"];
  v77  [label="279:  fb = function.value(b)"];
  v78  [label="280:  ++numIterations"];
  v79  [label="284:  if (fa * fb > 0.0)"];
  v80  [label="285:  throw new NoBracketingException(LocalizedFormats.FAILED_BRACKETING, a, b, fa, fb, numIterations, maximumIterations, initial, lowerBound, upperBound)"];
  v81  [label="endif"];
  v82  [label="291:  return new double[] {a, b};"];
  v83  [label="301:  double midpoint(double a, double b)"];
  v84  [label="302:  return (a + b) * 0.5;"];
  v85  [label="317:  boolean isBracketing(UnivariateFunction function,  final double lower,  final double upper)"];
  v86  [label="321:  if (function == null)"];
  v87  [label="322:  throw new NullArgumentException(LocalizedFormats.FUNCTION)"];
  v88  [label="endif"];
  v89  [label="324:  final double fLo = function.value(lower)"];
  v90  [label="325:  final double fHi = function.value(upper)"];
  v91  [label="326:  return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);"];
  v92  [label="337:  boolean isSequence(final double start,  final double mid,  final double end)"];
  v93  [label="340:  return (start < mid) && (mid < end);"];
  v94  [label="350:  void verifyInterval(final double lower, final double upper)"];
  v95  [label="353:  if (lower >= upper)"];
  v96  [label="354:  throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL, lower, upper, false)"];
  v97  [label="endif"];
  v98  [label="368:  void verifySequence(final double lower, final double initial, final double upper)"];
  v99  [label="372:  verifyInterval(lower, initial)"];
  v100  [label="373:  verifyInterval(initial, upper)"];
  v101  [label="387:  void verifyBracketing(UnivariateFunction function, final double lower, final double upper)"];
  v102  [label="392:  if (function == null)"];
  v103  [label="393:  throw new NullArgumentException(LocalizedFormats.FUNCTION)"];
  v104  [label="endif"];
  v105  [label="395:  verifyInterval(lower, upper)"];
  v106  [label="396:  if (!isBracketing(function, lower, upper))"];
  v107  [label="397:  throw new NoBracketingException(lower, upper, function.value(lower), function.value(upper))"];
  v108  [label="endif"];
  // graph-edges
  v2 -> v3;
  v3 -> v4  [label="True"];
  v3 -> v5  [label="False"];
  v5 -> v6;
  v6 -> v7;
  v8 -> v9;
  v9 -> v10  [label="True"];
  v9 -> v11  [label="False"];
  v11 -> v12;
  v12 -> v13;
  v14 -> v15;
  v15 -> v16  [label="True"];
  v15 -> v17  [label="False"];
  v17 -> v18;
  v18 -> v19;
  v19 -> v20;
  v20 -> v21;
  v21 -> v22;
  v22 -> v23;
  v23 -> v24;
  v24 -> v25  [label="False"];
  v24 -> v26  [label="True"];
  v26 -> v27  [label="True"];
  v26 -> v28  [label="False"];
  v28 -> v29;
  v29 -> v30;
  v30 -> v31;
  v31 -> v32  [label="True"];
  v32 -> v33  [label="True"];
  v33 -> v34;
  v32 -> v35  [label="False"];
  v35 -> v34;
  v34 -> v36;
  v31 -> v37  [label="False"];
  v37 -> v38  [label="True"];
  v38 -> v39  [label="True"];
  v39 -> v40;
  v38 -> v41  [label="False"];
  v41 -> v40;
  v40 -> v42;
  v37 -> v43  [label="False"];
  v43 -> v44;
  v44 -> v42;
  v42 -> v36;
  v36 -> v45;
  v45 -> v46  [label="True"];
  v46 -> v47;
  v47 -> v48;
  v48 -> v49;
  v45 -> v49  [label="False"];
  v49 -> v50;
  v50 -> v51  [label="True"];
  v51 -> v52;
  v52 -> v53;
  v53 -> v54;
  v50 -> v54  [label="False"];
  v54 -> v24;
  v25 -> v55;
  v56 -> v57;
  v58 -> v59;
  v59 -> v60  [label="True"];
  v59 -> v61  [label="False"];
  v61 -> v62;
  v62 -> v63  [label="True"];
  v62 -> v64  [label="False"];
  v64 -> v65;
  v65 -> v66;
  v66 -> v67;
  v67 -> v68;
  v68 -> v69;
  v69 -> v70;
  v70 -> v71;
  v71 -> v74;
  v74 -> v75;
  v75 -> v76;
  v76 -> v77;
  v77 -> v78;
  v78 -> v72;
  v72 -> v71  [label="True"];
  v72 -> v73  [label="False"];
  v73 -> v79;
  v79 -> v80  [label="True"];
  v79 -> v81  [label="False"];
  v81 -> v82;
  v83 -> v84;
  v85 -> v86;
  v86 -> v87  [label="True"];
  v86 -> v88  [label="False"];
  v88 -> v89;
  v89 -> v90;
  v90 -> v91;
  v92 -> v93;
  v94 -> v95;
  v95 -> v96  [label="True"];
  v95 -> v97  [label="False"];
  v98 -> v99;
  v99 -> v100;
  v101 -> v102;
  v102 -> v103  [label="True"];
  v102 -> v104  [label="False"];
  v104 -> v105;
  v105 -> v106;
  v106 -> v107  [label="True"];
  v106 -> v108  [label="False"];
  // end-of-graph
}
