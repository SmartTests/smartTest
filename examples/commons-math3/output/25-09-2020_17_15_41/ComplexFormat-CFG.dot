digraph ComplexFormat_CFG {
  // graph-vertices
  v1  [label="54:  ComplexFormat ()"];
  v2  [label="55:  this.imaginaryCharacter = DEFAULT_IMAGINARY_CHARACTER"];
  v3  [label="56:  this.imaginaryFormat = CompositeFormat.getDefaultNumberFormat()"];
  v4  [label="57:  this.realFormat = imaginaryFormat"];
  v5  [label="66:  ComplexFormat (NumberFormat format)"];
  v6  [label="67:  if (format == null)"];
  v7  [label="68:  throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT)"];
  v8  [label="endif"];
  v9  [label="70:  this.imaginaryCharacter = DEFAULT_IMAGINARY_CHARACTER"];
  v10  [label="71:  this.imaginaryFormat = format"];
  v11  [label="72:  this.realFormat = format"];
  v12  [label="83:  ComplexFormat (NumberFormat realFormat, NumberFormat imaginaryFormat)"];
  v13  [label="85:  if (imaginaryFormat == null)"];
  v14  [label="86:  throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT)"];
  v15  [label="endif"];
  v16  [label="88:  if (realFormat == null)"];
  v17  [label="89:  throw new NullArgumentException(LocalizedFormats.REAL_FORMAT)"];
  v18  [label="endif"];
  v19  [label="92:  this.imaginaryCharacter = DEFAULT_IMAGINARY_CHARACTER"];
  v20  [label="93:  this.imaginaryFormat = imaginaryFormat"];
  v21  [label="94:  this.realFormat = realFormat"];
  v22  [label="106:  ComplexFormat (String imaginaryCharacter)"];
  v23  [label="108:  this(imaginaryCharacter, CompositeFormat.getDefaultNumberFormat())"];
  v24  [label="122:  ComplexFormat (String imaginaryCharacter, NumberFormat format)"];
  v25  [label="124:  this(imaginaryCharacter, format, format)"];
  v26  [label="142:  ComplexFormat (String imaginaryCharacter,  NumberFormat realFormat,  NumberFormat imaginaryFormat)"];
  v27  [label="146:  if (imaginaryCharacter == null)"];
  v28  [label="147:  throw new NullArgumentException()"];
  v29  [label="endif"];
  v30  [label="149:  if (imaginaryCharacter.length() == 0)"];
  v31  [label="150:  throw new NoDataException()"];
  v32  [label="endif"];
  v33  [label="152:  if (imaginaryFormat == null)"];
  v34  [label="153:  throw new NullArgumentException(LocalizedFormats.IMAGINARY_FORMAT)"];
  v35  [label="endif"];
  v36  [label="155:  if (realFormat == null)"];
  v37  [label="156:  throw new NullArgumentException(LocalizedFormats.REAL_FORMAT)"];
  v38  [label="endif"];
  v39  [label="159:  this.imaginaryCharacter = imaginaryCharacter"];
  v40  [label="160:  this.imaginaryFormat = imaginaryFormat"];
  v41  [label="161:  this.realFormat = realFormat"];
  v42  [label="169:  Locale[] getAvailableLocales()"];
  v43  [label="170:  return NumberFormat.getAvailableLocales();"];
  v44  [label="179:  String format(Complex c)"];
  v45  [label="180:  return format(c, new StringBuffer(), new FieldPosition(0)).toString();"];
  v46  [label="189:  String format(Double c)"];
  v47  [label="190:  return format(new Complex(c, 0), new StringBuffer(), new FieldPosition(0)).toString();"];
  v48  [label="202:  StringBuffer format(Complex complex, StringBuffer toAppendTo,  FieldPosition pos)"];
  v49  [label="204:  pos.setBeginIndex(0)"];
  v50  [label="205:  pos.setEndIndex(0)"];
  v51  [label="208:  double re = complex.getReal()"];
  v52  [label="209:  CompositeFormat.formatDouble(re, getRealFormat(), toAppendTo, pos)"];
  v53  [label="212:  double im = complex.getImaginary()"];
  v54  [label="213:  StringBuffer imAppendTo"];
  v55  [label="214:  if (im < 0.0)"];
  v56  [label="215:  toAppendTo.append(' - ')"];
  v57  [label="216:  imAppendTo = formatImaginary(-im, new StringBuffer(), pos)"];
  v58  [label="217:  toAppendTo.append(imAppendTo)"];
  v59  [label="218:  toAppendTo.append(getImaginaryCharacter())"];
  v60  [label="endif"];
  v61  [label="219:  if (im > 0.0 || Double.isNaN(im))"];
  v62  [label="220:  toAppendTo.append(' + ')"];
  v63  [label="221:  imAppendTo = formatImaginary(im, new StringBuffer(), pos)"];
  v64  [label="222:  toAppendTo.append(imAppendTo)"];
  v65  [label="223:  toAppendTo.append(getImaginaryCharacter())"];
  v66  [label="endif"];
  v67  [label="226:  return toAppendTo;"];
  v68  [label="238:  StringBuffer formatImaginary(double absIm,  StringBuffer toAppendTo,  FieldPosition pos)"];
  v69  [label="241:  pos.setBeginIndex(0)"];
  v70  [label="242:  pos.setEndIndex(0)"];
  v71  [label="244:  CompositeFormat.formatDouble(absIm, getImaginaryFormat(), toAppendTo, pos)"];
  v72  [label="245:  if (toAppendTo.toString().equals('1'))"];
  v73  [label="247:  toAppendTo.setLength(0)"];
  v74  [label="endif"];
  v75  [label="250:  return toAppendTo;"];
  v76  [label="266:  StringBuffer format(Object obj, StringBuffer toAppendTo,  FieldPosition pos)"];
  v77  [label="270:  StringBuffer ret = null"];
  v78  [label="272:  if (obj instanceof Complex)"];
  v79  [label="273:  ret = format( (Complex)obj, toAppendTo, pos)"];
  v80  [label="endif"];
  v81  [label="274:  if (obj instanceof Number)"];
  v82  [label="275:  ret = format(new Complex(((Number)obj).doubleValue(), 0.0),  toAppendTo, pos)"];
  v83  [label="endif"];
  v84  [label="278:  throw new MathIllegalArgumentException(LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX,  obj.getClass().getName())"];
  v85  [label="282:  return ret;"];
  v86  [label="289:  String getImaginaryCharacter()"];
  v87  [label="290:  return imaginaryCharacter;"];
  v88  [label="297:  NumberFormat getImaginaryFormat()"];
  v89  [label="298:  return imaginaryFormat;"];
  v90  [label="305:  ComplexFormat getInstance()"];
  v91  [label="306:  return getInstance(Locale.getDefault());"];
  v92  [label="314:  ComplexFormat getInstance(Locale locale)"];
  v93  [label="315:  NumberFormat f = CompositeFormat.getDefaultNumberFormat(locale)"];
  v94  [label="316:  return new ComplexFormat(f);"];
  v95  [label="329:  ComplexFormat getInstance(String imaginaryCharacter, Locale locale)"];
  v96  [label="331:  NumberFormat f = CompositeFormat.getDefaultNumberFormat(locale)"];
  v97  [label="332:  return new ComplexFormat(imaginaryCharacter, f);"];
  v98  [label="339:  NumberFormat getRealFormat()"];
  v99  [label="340:  return realFormat;"];
  v100  [label="351:  Complex parse(String source)"];
  v101  [label="352:  ParsePosition parsePosition = new ParsePosition(0)"];
  v102  [label="353:  Complex result = parse(source, parsePosition)"];
  v103  [label="354:  if (parsePosition.getIndex() == 0)"];
  v104  [label="355:  throw new MathParseException(source,  parsePosition.getErrorIndex(),  Complex.class)"];
  v105  [label="endif"];
  v106  [label="359:  return result;"];
  v107  [label="369:  Complex parse(String source, ParsePosition pos)"];
  v108  [label="370:  int initialIndex = pos.getIndex()"];
  v109  [label="373:  CompositeFormat.parseAndIgnoreWhitespace(source, pos)"];
  v110  [label="376:  Number re = CompositeFormat.parseNumber(source, getRealFormat(), pos)"];
  v111  [label="377:  if (re == null)"];
  v112  [label="380:  pos.setIndex(initialIndex)"];
  v113  [label="381:  return null;"];
  v114  [label="endif"];
  v115  [label="385:  int startIndex = pos.getIndex()"];
  v116  [label="386:  char c = CompositeFormat.parseNextCharacter(source, pos)"];
  v117  [label="387:  int sign = 0"];
  v118  [label="388:  switch (c)"];
  v119  [label="end-switch"];
  v120  [label="389:  case 0 :"];
  v121  [label="392:  return new Complex(re.doubleValue(), 0.0);"];
  v122  [label="393:  case '-' :"];
  v123  [label="394:  sign = -1"];
  v124  [label="395:  break;"];
  v125  [label="396:  case '+' :"];
  v126  [label="397:  sign = 1"];
  v127  [label="398:  break;"];
  v128  [label="399:  default :"];
  v129  [label="403:  pos.setIndex(initialIndex)"];
  v130  [label="404:  pos.setErrorIndex(startIndex)"];
  v131  [label="405:  return null;"];
  v132  [label="409:  CompositeFormat.parseAndIgnoreWhitespace(source, pos)"];
  v133  [label="412:  Number im = CompositeFormat.parseNumber(source, getRealFormat(), pos)"];
  v134  [label="413:  if (im == null)"];
  v135  [label="416:  pos.setIndex(initialIndex)"];
  v136  [label="417:  return null;"];
  v137  [label="endif"];
  v138  [label="421:  if (!CompositeFormat.parseFixedstring(source, getImaginaryCharacter(), pos))"];
  v139  [label="422:  return null;"];
  v140  [label="endif"];
  v141  [label="425:  return new Complex(re.doubleValue(), im.doubleValue() * sign);"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4;
  v5 -> v6;
  v6 -> v7  [label="True"];
  v6 -> v8  [label="False"];
  v8 -> v9;
  v9 -> v10;
  v10 -> v11;
  v12 -> v13;
  v13 -> v14  [label="True"];
  v13 -> v15  [label="False"];
  v15 -> v16;
  v16 -> v17  [label="True"];
  v16 -> v18  [label="False"];
  v18 -> v19;
  v19 -> v20;
  v20 -> v21;
  v22 -> v23;
  v24 -> v25;
  v26 -> v27;
  v27 -> v28  [label="True"];
  v27 -> v29  [label="False"];
  v29 -> v30;
  v30 -> v31  [label="True"];
  v30 -> v32  [label="False"];
  v32 -> v33;
  v33 -> v34  [label="True"];
  v33 -> v35  [label="False"];
  v35 -> v36;
  v36 -> v37  [label="True"];
  v36 -> v38  [label="False"];
  v38 -> v39;
  v39 -> v40;
  v40 -> v41;
  v42 -> v43;
  v44 -> v45;
  v46 -> v47;
  v48 -> v49;
  v49 -> v50;
  v50 -> v51;
  v51 -> v52;
  v52 -> v53;
  v53 -> v54;
  v54 -> v55;
  v55 -> v56  [label="True"];
  v56 -> v57;
  v57 -> v58;
  v58 -> v59;
  v59 -> v60;
  v55 -> v61  [label="False"];
  v61 -> v62  [label="True"];
  v62 -> v63;
  v63 -> v64;
  v64 -> v65;
  v65 -> v66;
  v61 -> v66  [label="False"];
  v66 -> v60;
  v60 -> v67;
  v68 -> v69;
  v69 -> v70;
  v70 -> v71;
  v71 -> v72;
  v72 -> v73  [label="True"];
  v73 -> v74;
  v72 -> v74  [label="False"];
  v74 -> v75;
  v76 -> v77;
  v77 -> v78;
  v78 -> v79  [label="True"];
  v79 -> v80;
  v78 -> v81  [label="False"];
  v81 -> v82  [label="True"];
  v82 -> v83;
  v81 -> v84  [label="False"];
  v83 -> v80;
  v80 -> v85;
  v86 -> v87;
  v88 -> v89;
  v90 -> v91;
  v92 -> v93;
  v93 -> v94;
  v95 -> v96;
  v96 -> v97;
  v98 -> v99;
  v100 -> v101;
  v101 -> v102;
  v102 -> v103;
  v103 -> v104  [label="True"];
  v103 -> v105  [label="False"];
  v105 -> v106;
  v107 -> v108;
  v108 -> v109;
  v109 -> v110;
  v110 -> v111;
  v111 -> v112  [label="True"];
  v112 -> v113;
  v111 -> v114  [label="False"];
  v114 -> v115;
  v115 -> v116;
  v116 -> v117;
  v117 -> v118;
  v118 -> v120;
  v120 -> v121  [label="True"];
  v120 -> v122  [label="False"];
  v122 -> v123  [label="True"];
  v123 -> v124;
  v124 -> v119;
  v122 -> v125  [label="False"];
  v125 -> v126  [label="True"];
  v126 -> v127;
  v127 -> v119;
  v125 -> v128  [label="False"];
  v128 -> v129;
  v129 -> v130;
  v130 -> v131;
  v119 -> v132;
  v132 -> v133;
  v133 -> v134;
  v134 -> v135  [label="True"];
  v135 -> v136;
  v134 -> v137  [label="False"];
  v137 -> v138;
  v138 -> v139  [label="True"];
  v138 -> v140  [label="False"];
  v140 -> v141;
  // end-of-graph
}
