digraph Quaternion_CFG {
  // graph-vertices
  v1  [label="69:  Quaternion (final double a, final double b, final double c, final double d)"];
  v2  [label="73:  this.q0 = a"];
  v3  [label="74:  this.q1 = b"];
  v4  [label="75:  this.q2 = c"];
  v5  [label="76:  this.q3 = d"];
  v6  [label="87:  Quaternion (final double scalar, final double[] v)"];
  v7  [label="90:  if (v.length != 3)"];
  v8  [label="91:  throw new DimensionMismatchException(v.length, 3)"];
  v9  [label="endif"];
  v10  [label="93:  this.q0 = scalar"];
  v11  [label="94:  this.q1 = v[0]"];
  v12  [label="95:  this.q2 = v[1]"];
  v13  [label="96:  this.q3 = v[2]"];
  v14  [label="105:  Quaternion (final double[] v)"];
  v15  [label="106:  this(0, v)"];
  v16  [label="114:  Quaternion getConjugate()"];
  v17  [label="115:  return new Quaternion(q0, -q1, -q2, -q3);"];
  v18  [label="125:  Quaternion multiply(final Quaternion q1, final Quaternion q2)"];
  v19  [label="127:  final double q1a = q1.getQ0()"];
  v20  [label="128:  final double q1b = q1.getQ1()"];
  v21  [label="129:  final double q1c = q1.getQ2()"];
  v22  [label="130:  final double q1d = q1.getQ3()"];
  v23  [label="133:  final double q2a = q2.getQ0()"];
  v24  [label="134:  final double q2b = q2.getQ1()"];
  v25  [label="135:  final double q2c = q2.getQ2()"];
  v26  [label="136:  final double q2d = q2.getQ3()"];
  v27  [label="139:  final double w = q1a * q2a - q1b * q2b - q1c * q2c - q1d * q2d"];
  v28  [label="140:  final double x = q1a * q2b + q1b * q2a + q1c * q2d - q1d * q2c"];
  v29  [label="141:  final double y = q1a * q2c - q1b * q2d + q1c * q2a + q1d * q2b"];
  v30  [label="142:  final double z = q1a * q2d + q1b * q2c - q1c * q2b + q1d * q2a"];
  v31  [label="144:  return new Quaternion(w, x, y, z);"];
  v32  [label="153:  Quaternion multiply(final Quaternion q)"];
  v33  [label="154:  return multiply(this, q);"];
  v34  [label="164:  Quaternion add(final Quaternion q1,  final Quaternion q2)"];
  v35  [label="166:  return new Quaternion(q1.getQ0() + q2.getQ0(), q1.getQ1() + q2.getQ1(), q1.getQ2() + q2.getQ2(), q1.getQ3() + q2.getQ3());"];
  v36  [label="178:  Quaternion add(final Quaternion q)"];
  v37  [label="179:  return add(this, q);"];
  v38  [label="189:  Quaternion subtract(final Quaternion q1, final Quaternion q2)"];
  v39  [label="191:  return new Quaternion(q1.getQ0() - q2.getQ0(), q1.getQ1() - q2.getQ1(), q1.getQ2() - q2.getQ2(), q1.getQ3() - q2.getQ3());"];
  v40  [label="203:  Quaternion subtract(final Quaternion q)"];
  v41  [label="204:  return subtract(this, q);"];
  v42  [label="214:  double dotProduct(final Quaternion q1, final Quaternion q2)"];
  v43  [label="216:  return q1.getQ0() * q2.getQ0() + q1.getQ1() * q2.getQ1() + q1.getQ2() * q2.getQ2() + q1.getQ3() * q2.getQ3();"];
  v44  [label="228:  double dotProduct(final Quaternion q)"];
  v45  [label="229:  return dotProduct(this, q);"];
  v46  [label="237:  double getNorm()"];
  v47  [label="238:  return FastMath.sqrt(q0 * q0 +  q1 * q1 +  q2 * q2 +  q3 * q3);"];
  v48  [label="251:  Quaternion normalize()"];
  v49  [label="252:  final double norm = getNorm()"];
  v50  [label="254:  if (norm < Precision.SAFE_MIN)"];
  v51  [label="255:  throw new ZeroException(LocalizedFormats.NORM, norm)"];
  v52  [label="endif"];
  v53  [label="258:  return new Quaternion(q0 / norm, q1 / norm, q2 / norm, q3 / norm);"];
  v54  [label="268:  boolean equals(Object other)"];
  v55  [label="269:  if (this == other)"];
  v56  [label="270:  return true;"];
  v57  [label="endif"];
  v58  [label="272:  if (other instanceof Quaternion)"];
  v59  [label="273:  final Quaternion q = (Quaternion) other"];
  v60  [label="274:  return q0 == q.getQ0() && q1 == q.getQ1() && q2 == q.getQ2() && q3 == q.getQ3();"];
  v61  [label="endif"];
  v62  [label="280:  return false;"];
  v63  [label="287:  int hashCode()"];
  v64  [label="289:  int result = 17"];
  v65  [label="290:  for (double comp : new double[] { q0, q1, q2, q3 })"];
  v66  [label="endfor"];
  v67  [label="291:  final int c = MathUtils.hash(comp)"];
  v68  [label="292:  result = 31 * result + c"];
  v69  [label="294:  return result;"];
  v70  [label="306:  boolean equals(final Quaternion q, final double eps)"];
  v71  [label="308:  return Precision.equals(q0, q.getQ0(), eps) && Precision.equals(q1, q.getQ1(), eps) && Precision.equals(q2, q.getQ2(), eps) && Precision.equals(q3, q.getQ3(), eps);"];
  v72  [label="322:  boolean isUnitQuaternion(double eps)"];
  v73  [label="323:  return Precision.equals(getNorm(), 1d, eps);"];
  v74  [label="333:  boolean isPureQuaternion(double eps)"];
  v75  [label="334:  return FastMath.abs(getQ0()) <= eps;"];
  v76  [label="342:  Quaternion getPositivePolarForm()"];
  v77  [label="343:  if (getQ0() < 0)"];
  v78  [label="344:  final Quaternion unitQ = normalize()"];
  v79  [label="347:  return new Quaternion(-unitQ.getQ0(), -unitQ.getQ1(), -unitQ.getQ2(), -unitQ.getQ3());"];
  v80  [label="endif"];
  v81  [label="352:  return this.normalize();"];
  v82  [label="363:  Quaternion getInverse()"];
  v83  [label="364:  final double squareNorm = q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3"];
  v84  [label="365:  if (squareNorm < Precision.SAFE_MIN)"];
  v85  [label="366:  throw new ZeroException(LocalizedFormats.NORM, squareNorm)"];
  v86  [label="endif"];
  v87  [label="369:  return new Quaternion(q0 / squareNorm, -q1 / squareNorm, -q2 / squareNorm, -q3 / squareNorm);"];
  v88  [label="380:  double getQ0()"];
  v89  [label="381:  return q0;"];
  v90  [label="390:  double getQ1()"];
  v91  [label="391:  return q1;"];
  v92  [label="400:  double getQ2()"];
  v93  [label="401:  return q2;"];
  v94  [label="410:  double getQ3()"];
  v95  [label="411:  return q3;"];
  v96  [label="420:  double getScalarPart()"];
  v97  [label="421:  return getQ0();"];
  v98  [label="432:  double[] getVectorPart()"];
  v99  [label="433:  return new double[] { getQ1(), getQ2(), getQ3() };"];
  v100  [label="442:  Quaternion multiply(final double alpha)"];
  v101  [label="443:  return new Quaternion(alpha * q0, alpha * q1, alpha * q2, alpha * q3);"];
  v102  [label="453:  String toString()"];
  v103  [label="454:  final String sp = ' '"];
  v104  [label="455:  final StringBuilder s = new StringBuilder()"];
  v105  [label="456:  s.append('[') .append(q0).append(sp) .append(q1).append(sp) .append(q2).append(sp) .append(q3) .append(']')"];
  v106  [label="463:  return s.toString();"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4;
  v4 -> v5;
  v6 -> v7;
  v7 -> v8  [label="True"];
  v7 -> v9  [label="False"];
  v9 -> v10;
  v10 -> v11;
  v11 -> v12;
  v12 -> v13;
  v14 -> v15;
  v16 -> v17;
  v18 -> v19;
  v19 -> v20;
  v20 -> v21;
  v21 -> v22;
  v22 -> v23;
  v23 -> v24;
  v24 -> v25;
  v25 -> v26;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v31;
  v32 -> v33;
  v34 -> v35;
  v36 -> v37;
  v38 -> v39;
  v40 -> v41;
  v42 -> v43;
  v44 -> v45;
  v46 -> v47;
  v48 -> v49;
  v49 -> v50;
  v50 -> v51  [label="True"];
  v50 -> v52  [label="False"];
  v52 -> v53;
  v54 -> v55;
  v55 -> v56  [label="True"];
  v55 -> v57  [label="False"];
  v57 -> v58;
  v58 -> v59  [label="True"];
  v59 -> v60;
  v58 -> v61  [label="False"];
  v61 -> v62;
  v63 -> v64;
  v64 -> v65;
  v65 -> v66  [label="False"];
  v65 -> v67  [label="True"];
  v67 -> v68;
  v68 -> v65;
  v66 -> v69;
  v70 -> v71;
  v72 -> v73;
  v74 -> v75;
  v76 -> v77;
  v77 -> v78  [label="True"];
  v78 -> v79;
  v77 -> v81  [label="False"];
  v82 -> v83;
  v83 -> v84;
  v84 -> v85  [label="True"];
  v84 -> v86  [label="False"];
  v86 -> v87;
  v88 -> v89;
  v90 -> v91;
  v92 -> v93;
  v94 -> v95;
  v96 -> v97;
  v98 -> v99;
  v100 -> v101;
  v102 -> v103;
  v103 -> v104;
  v104 -> v105;
  v105 -> v106;
  // end-of-graph
}
