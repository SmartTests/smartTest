digraph RootsOfUnity_CFG {
  // graph-vertices
  v1  [label="69:  RootsOfUnity ()"];
  v2  [label="71:  omegaCount = 0"];
  v3  [label="72:  omegaReal = null"];
  v4  [label="73:  omegaImaginaryCounterClockwise = null"];
  v5  [label="74:  omegaImaginaryClockwise = null"];
  v6  [label="75:  isCounterClockWise = true"];
  v7  [label="88:  boolean isCounterClockWise()"];
  v8  [label="91:  if (omegaCount == 0)"];
  v9  [label="92:  throw new MathIllegalStateException( LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET)"];
  v10  [label="endif"];
  v11  [label="95:  return isCounterClockWise;"];
  v12  [label="117:  void computeRoots(int n)"];
  v13  [label="119:  if (n == 0)"];
  v14  [label="120:  throw new ZeroException( LocalizedFormats.CANNOT_COMPUTE_0TH_ROOT_OF_UNITY)"];
  v15  [label="endif"];
  v16  [label="124:  isCounterClockWise = n > 0"];
  v17  [label="127:  final int absN = FastMath.abs(n)"];
  v18  [label="129:  if (absN == omegaCount)"];
  v19  [label="130:  return;"];
  v20  [label="endif"];
  v21  [label="134:  final double t = 2.0 * FastMath.PI / absN"];
  v22  [label="135:  final double cosT = FastMath.cos(t)"];
  v23  [label="136:  final double sinT = FastMath.sin(t)"];
  v24  [label="137:  omegaReal = new double[absN]"];
  v25  [label="138:  omegaImaginaryCounterClockwise = new double[absN]"];
  v26  [label="139:  omegaImaginaryClockwise = new double[absN]"];
  v27  [label="140:  omegaReal[0] = 1.0"];
  v28  [label="141:  omegaImaginaryCounterClockwise[0] = 0.0"];
  v29  [label="142:  omegaImaginaryClockwise[0] = 0.0"];
  v30  [label="143:  for (  int i = 1 ; i < absN ;   i++)"];
  v33  [label="endfor"];
  v34  [label="144:  omegaReal[i] = omegaReal[i - 1] * cosT - omegaImaginaryCounterClockwise[i - 1] * sinT"];
  v35  [label="146:  omegaImaginaryCounterClockwise[i] = omegaReal[i - 1] * sinT + omegaImaginaryCounterClockwise[i - 1] * cosT"];
  v36  [label="148:  omegaImaginaryClockwise[i] = -omegaImaginaryCounterClockwise[i]"];
  v37  [label="150:  omegaCount = absN"];
  v38  [label="162:  double getReal(int k)"];
  v39  [label="165:  if (omegaCount == 0)"];
  v40  [label="166:  throw new MathIllegalStateException( LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET)"];
  v41  [label="endif"];
  v42  [label="169:  if ((k < 0) || (k >= omegaCount))"];
  v43  [label="170:  throw new OutOfRangeException( LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, Integer.valueOf(k), Integer.valueOf(0), Integer.valueOf(omegaCount - 1))"];
  v44  [label="endif"];
  v45  [label="177:  return omegaReal[k];"];
  v46  [label="189:  double getImaginary(int k)"];
  v47  [label="192:  if (omegaCount == 0)"];
  v48  [label="193:  throw new MathIllegalStateException( LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET)"];
  v49  [label="endif"];
  v50  [label="196:  if ((k < 0) || (k >= omegaCount))"];
  v51  [label="197:  throw new OutOfRangeException( LocalizedFormats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, Integer.valueOf(k), Integer.valueOf(0), Integer.valueOf(omegaCount - 1))"];
  v52  [label="endif"];
  v53  [label="204:  return isCounterClockWise ? omegaImaginaryCounterClockwise[k] : omegaImaginaryClockwise[k];"];
  v54  [label="216:  int getNumberOfRoots()"];
  v55  [label="217:  return omegaCount;"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v7 -> v8;
  v8 -> v9  [label="True"];
  v8 -> v10  [label="False"];
  v10 -> v11;
  v12 -> v13;
  v13 -> v14  [label="True"];
  v13 -> v15  [label="False"];
  v15 -> v16;
  v16 -> v17;
  v17 -> v18;
  v18 -> v19  [label="True"];
  v18 -> v20  [label="False"];
  v20 -> v21;
  v21 -> v22;
  v22 -> v23;
  v23 -> v24;
  v24 -> v25;
  v25 -> v26;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v33  [label="False"];
  v30 -> v34  [label="True"];
  v34 -> v35;
  v35 -> v36;
  v36 -> v30;
  v33 -> v37;
  v38 -> v39;
  v39 -> v40  [label="True"];
  v39 -> v41  [label="False"];
  v41 -> v42;
  v42 -> v43  [label="True"];
  v42 -> v44  [label="False"];
  v44 -> v45;
  v46 -> v47;
  v47 -> v48  [label="True"];
  v47 -> v49  [label="False"];
  v49 -> v50;
  v50 -> v51  [label="True"];
  v50 -> v52  [label="False"];
  v52 -> v53;
  v54 -> v55;
  // end-of-graph
}
