digraph BracketingNthOrderBrentSolverDFP_CFG {
  // graph-vertices
  v1  [label="73:  BracketingNthOrderBrentSolverDFP (final Dfp relativeAccuracy, final Dfp absoluteAccuracy, final Dfp functionValueAccuracy, final int maximalOrder)"];
  v2  [label="78:  if (maximalOrder < 2)"];
  v3  [label="79:  throw new NumberIsTooSmallException(maximalOrder, 2, true)"];
  v4  [label="endif"];
  v5  [label="81:  this.maximalOrder = maximalOrder"];
  v6  [label="82:  this.absoluteAccuracy = absoluteAccuracy"];
  v7  [label="83:  this.relativeAccuracy = relativeAccuracy"];
  v8  [label="84:  this.functionValueAccuracy = functionValueAccuracy"];
  v9  [label="90:  int getMaximalOrder()"];
  v10  [label="91:  return maximalOrder;"];
  v11  [label="99:  int getMaxEvaluations()"];
  v12  [label="100:  return evaluations.getMaximalCount();"];
  v13  [label="111:  int getEvaluations()"];
  v14  [label="112:  return evaluations.getCount();"];
  v15  [label="119:  Dfp getAbsoluteAccuracy()"];
  v16  [label="120:  return absoluteAccuracy;"];
  v17  [label="127:  Dfp getRelativeAccuracy()"];
  v18  [label="128:  return relativeAccuracy;"];
  v19  [label="135:  Dfp getFunctionValueAccuracy()"];
  v20  [label="136:  return functionValueAccuracy;"];
  v21  [label="155:  Dfp solve(final int maxEval, final UnivariateDfpFunction f,  final Dfp min, final Dfp max, final AllowedSolution allowedSolution)"];
  v22  [label="158:  return solve(maxEval, f, min, max, min.add(max).divide(2), allowedSolution);"];
  v23  [label="178:  Dfp solve(final int maxEval, final UnivariateDfpFunction f,  final Dfp min, final Dfp max, final Dfp startValue,  final AllowedSolution allowedSolution)"];
  v24  [label="184:  MathUtils.checkNotNull(f)"];
  v25  [label="187:  evaluations.setMaximalCount(maxEval)"];
  v26  [label="188:  evaluations.resetCount()"];
  v27  [label="189:  Dfp zero = startValue.getZero()"];
  v28  [label="190:  Dfp nan  = zero.newInstance((byte) 1, Dfp.QNAN)"];
  v29  [label="193:  final Dfp[] x = new Dfp[maximalOrder + 1]"];
  v30  [label="194:  final Dfp[] y = new Dfp[maximalOrder + 1]"];
  v31  [label="195:  x[0] = min"];
  v32  [label="196:  x[1] = startValue"];
  v33  [label="197:  x[2] = max"];
  v34  [label="200:  evaluations.incrementCount()"];
  v35  [label="201:  y[1] = f.value(x[1])"];
  v36  [label="202:  if (y[1].isZero())"];
  v37  [label="204:  return x[1];"];
  v38  [label="endif"];
  v39  [label="208:  evaluations.incrementCount()"];
  v40  [label="209:  y[0] = f.value(x[0])"];
  v41  [label="210:  if (y[0].isZero())"];
  v42  [label="212:  return x[0];"];
  v43  [label="endif"];
  v44  [label="215:  int nbPoints"];
  v45  [label="216:  int signChangeIndex"];
  v46  [label="217:  if (y[0].multiply(y[1]).negativeOrNull())"];
  v47  [label="220:  nbPoints  = 2"];
  v48  [label="221:  signChangeIndex = 1"];
  v49  [label="endif"];
  v50  [label="226:  evaluations.incrementCount()"];
  v51  [label="227:  y[2] = f.value(x[2])"];
  v52  [label="228:  if (y[2].isZero())"];
  v53  [label="230:  return x[2];"];
  v54  [label="endif"];
  v55  [label="233:  if (y[1].multiply(y[2]).negativeOrNull())"];
  v56  [label="235:  nbPoints  = 3"];
  v57  [label="236:  signChangeIndex = 2"];
  v58  [label="endif"];
  v59  [label="238:  throw new NoBracketingException(x[0].toDouble(), x[2].toDouble(), y[0].toDouble(), y[2].toDouble())"];
  v60  [label="245:  final Dfp[] tmpX = new Dfp[x.length]"];
  v61  [label="248:  Dfp xA  = x[signChangeIndex - 1]"];
  v62  [label="249:  Dfp yA  = y[signChangeIndex - 1]"];
  v63  [label="250:  Dfp absXA = xA.abs()"];
  v64  [label="251:  Dfp absYA = yA.abs()"];
  v65  [label="252:  int agingA = 0"];
  v66  [label="253:  Dfp xB  = x[signChangeIndex]"];
  v67  [label="254:  Dfp yB  = y[signChangeIndex]"];
  v68  [label="255:  Dfp absXB = xB.abs()"];
  v69  [label="256:  Dfp absYB = yB.abs()"];
  v70  [label="257:  int agingB = 0"];
  v71  [label="260:  while (true)"];
  v72  [label="endwhile"];
  v73  [label="263:  Dfp maxX = absXA.lessThan(absXB) ? absXB : absXA"];
  v74  [label="264:  Dfp maxY = absYA.lessThan(absYB) ? absYB : absYA"];
  v75  [label="265:  final Dfp xTol = absoluteAccuracy.add(relativeAccuracy.multiply(maxX))"];
  v76  [label="266:  if (xB.subtract(xA).subtract(xTol).negativeOrNull() || maxY.lessThan(functionValueAccuracy))"];
  v77  [label="268:  switch (allowedSolution)"];
  v78  [label="end-switch"];
  v79  [label="269:  case ANY_SIDE :"];
  v80  [label="270:  return absYA.lessThan(absYB) ? xA : xB;"];
  v81  [label="271:  case LEFT_SIDE :"];
  v82  [label="272:  return xA;"];
  v83  [label="273:  case RIGHT_SIDE :"];
  v84  [label="274:  return xB;"];
  v85  [label="275:  case BELOW_SIDE :"];
  v86  [label="276:  return yA.lessThan(zero) ? xA : xB;"];
  v87  [label="277:  case ABOVE_SIDE :"];
  v88  [label="278:  return yA.lessThan(zero) ? xB : xA;"];
  v89  [label="279:  default :"];
  v90  [label="281:  throw new MathInternalError(null)"];
  v91  [label="endif"];
  v92  [label="286:  Dfp targetY"];
  v93  [label="287:  if (agingA >= MAXIMAL_AGING)"];
  v94  [label="289:  targetY = yB.divide(16).negate()"];
  v95  [label="endif"];
  v96  [label="290:  if (agingB >= MAXIMAL_AGING)"];
  v97  [label="292:  targetY = yA.divide(16).negate()"];
  v98  [label="endif"];
  v99  [label="295:  targetY = zero"];
  v100  [label="299:  Dfp nextX"];
  v101  [label="300:  int start = 0"];
  v102  [label="301:  int end = nbPoints"];
  v103  [label="302:  do"];
  v104  [label="327:  while (nextX.isNaN() && (end - start > 1))"];
  v105  [label="end-do-while"];
  v106  [label="305:  System.arraycopy(x, start, tmpX, start, end - start)"];
  v107  [label="306:  nextX = guessX(targetY, tmpX, y, start, end)"];
  v108  [label="308:  if (!(nextX.greaterThan(xA) && nextX.lessThan(xB)))"];
  v109  [label="314:  if (signChangeIndex - start >= end - signChangeIndex)"];
  v110  [label="316:  ++start"];
  v111  [label="endif"];
  v112  [label="319:  --end"];
  v113  [label="323:  nextX = nan"];
  v114  [label="endif"];
  v115  [label="329:  if (nextX.isNaN())"];
  v116  [label="331:  nextX = xA.add(xB.subtract(xA).divide(2))"];
  v117  [label="332:  start = signChangeIndex - 1"];
  v118  [label="333:  end = signChangeIndex"];
  v119  [label="endif"];
  v120  [label="337:  evaluations.incrementCount()"];
  v121  [label="338:  final Dfp nextY = f.value(nextX)"];
  v122  [label="339:  if (nextY.isZero())"];
  v123  [label="342:  return nextX;"];
  v124  [label="endif"];
  v125  [label="345:  if ((nbPoints > 2) && (end - start != nbPoints))"];
  v126  [label="349:  nbPoints = end - start"];
  v127  [label="350:  System.arraycopy(x, start, x, 0, nbPoints)"];
  v128  [label="351:  System.arraycopy(y, start, y, 0, nbPoints)"];
  v129  [label="352:  signChangeIndex -= start"];
  v130  [label="endif"];
  v131  [label="354:  if (nbPoints == x.length)"];
  v132  [label="357:  nbPoints--"];
  v133  [label="360:  if (signChangeIndex >= (x.length + 1) / 2)"];
  v134  [label="362:  System.arraycopy(x, 1, x, 0, nbPoints)"];
  v135  [label="363:  System.arraycopy(y, 1, y, 0, nbPoints)"];
  v136  [label="364:  --signChangeIndex"];
  v137  [label="endif"];
  v138  [label="endif"];
  v139  [label="371:  System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex)"];
  v140  [label="372:  x[signChangeIndex] = nextX"];
  v141  [label="373:  System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex)"];
  v142  [label="374:  y[signChangeIndex] = nextY"];
  v143  [label="375:  ++nbPoints"];
  v144  [label="378:  if (nextY.multiply(yA).negativeOrNull())"];
  v145  [label="380:  xB = nextX"];
  v146  [label="381:  yB = nextY"];
  v147  [label="382:  absYB = yB.abs()"];
  v148  [label="383:  ++agingA"];
  v149  [label="384:  agingB = 0"];
  v150  [label="endif"];
  v151  [label="387:  xA = nextX"];
  v152  [label="388:  yA = nextY"];
  v153  [label="389:  absYA = yA.abs()"];
  v154  [label="390:  agingA = 0"];
  v155  [label="391:  ++agingB"];
  v156  [label="394:  signChangeIndex++"];
  v157  [label="416:  Dfp guessX(final Dfp targetY, final Dfp[] x, final Dfp[] y,  final int start, final int end)"];
  v158  [label="420:  for (  int i = start ; i < end - 1 ;   ++i)"];
  v161  [label="endfor"];
  v162  [label="421:  final int delta = i + 1 - start"];
  v163  [label="422:  for (  int j = end - 1 ; j > i ;   --j)"];
  v166  [label="endfor"];
  v167  [label="423:  x[j] = x[j].subtract(x[j-1]).divide(y[j].subtract(y[j - delta]))"];
  v168  [label="428:  Dfp x0 = targetY.getZero()"];
  v169  [label="429:  for (  int j = end - 1 ; j >= start ;   --j)"];
  v172  [label="endfor"];
  v173  [label="430:  x0 = x[j].add(x0.multiply(targetY.subtract(y[j])))"];
  v174  [label="433:  return x0;"];
  // graph-edges
  v1 -> v2;
  v2 -> v3  [label="True"];
  v2 -> v4  [label="False"];
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8;
  v9 -> v10;
  v11 -> v12;
  v13 -> v14;
  v15 -> v16;
  v17 -> v18;
  v19 -> v20;
  v21 -> v22;
  v23 -> v24;
  v24 -> v25;
  v25 -> v26;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v31;
  v31 -> v32;
  v32 -> v33;
  v33 -> v34;
  v34 -> v35;
  v35 -> v36;
  v36 -> v37  [label="True"];
  v36 -> v38  [label="False"];
  v38 -> v39;
  v39 -> v40;
  v40 -> v41;
  v41 -> v42  [label="True"];
  v41 -> v43  [label="False"];
  v43 -> v44;
  v44 -> v45;
  v45 -> v46;
  v46 -> v47  [label="True"];
  v47 -> v48;
  v48 -> v49;
  v46 -> v50  [label="False"];
  v50 -> v51;
  v51 -> v52;
  v52 -> v53  [label="True"];
  v52 -> v54  [label="False"];
  v54 -> v55;
  v55 -> v56  [label="True"];
  v56 -> v57;
  v57 -> v58;
  v55 -> v59  [label="False"];
  v58 -> v49;
  v49 -> v60;
  v60 -> v61;
  v61 -> v62;
  v62 -> v63;
  v63 -> v64;
  v64 -> v65;
  v65 -> v66;
  v66 -> v67;
  v67 -> v68;
  v68 -> v69;
  v69 -> v70;
  v70 -> v71;
  v71 -> v72  [label="False"];
  v71 -> v73  [label="True"];
  v73 -> v74;
  v74 -> v75;
  v75 -> v76;
  v76 -> v77  [label="True"];
  v77 -> v79;
  v79 -> v80  [label="True"];
  v79 -> v81  [label="False"];
  v81 -> v82  [label="True"];
  v81 -> v83  [label="False"];
  v83 -> v84  [label="True"];
  v83 -> v85  [label="False"];
  v85 -> v86  [label="True"];
  v85 -> v87  [label="False"];
  v87 -> v88  [label="True"];
  v87 -> v89  [label="False"];
  v89 -> v90;
  v78 -> v91;
  v76 -> v91  [label="False"];
  v91 -> v92;
  v92 -> v93;
  v93 -> v94  [label="True"];
  v94 -> v95;
  v93 -> v96  [label="False"];
  v96 -> v97  [label="True"];
  v97 -> v98;
  v96 -> v99  [label="False"];
  v99 -> v98;
  v98 -> v95;
  v95 -> v100;
  v100 -> v101;
  v101 -> v102;
  v102 -> v103;
  v103 -> v106;
  v106 -> v107;
  v107 -> v108;
  v108 -> v109  [label="True"];
  v109 -> v110  [label="True"];
  v110 -> v111;
  v109 -> v112  [label="False"];
  v112 -> v111;
  v111 -> v113;
  v113 -> v114;
  v108 -> v114  [label="False"];
  v114 -> v104;
  v104 -> v103  [label="True"];
  v104 -> v105  [label="False"];
  v105 -> v115;
  v115 -> v116  [label="True"];
  v116 -> v117;
  v117 -> v118;
  v118 -> v119;
  v115 -> v119  [label="False"];
  v119 -> v120;
  v120 -> v121;
  v121 -> v122;
  v122 -> v123  [label="True"];
  v122 -> v124  [label="False"];
  v124 -> v125;
  v125 -> v126  [label="True"];
  v126 -> v127;
  v127 -> v128;
  v128 -> v129;
  v129 -> v130;
  v125 -> v131  [label="False"];
  v131 -> v132  [label="True"];
  v132 -> v133;
  v133 -> v134  [label="True"];
  v134 -> v135;
  v135 -> v136;
  v136 -> v137;
  v133 -> v137  [label="False"];
  v137 -> v138;
  v131 -> v138  [label="False"];
  v138 -> v130;
  v130 -> v139;
  v139 -> v140;
  v140 -> v141;
  v141 -> v142;
  v142 -> v143;
  v143 -> v144;
  v144 -> v145  [label="True"];
  v145 -> v146;
  v146 -> v147;
  v147 -> v148;
  v148 -> v149;
  v149 -> v150;
  v144 -> v151  [label="False"];
  v151 -> v152;
  v152 -> v153;
  v153 -> v154;
  v154 -> v155;
  v155 -> v156;
  v156 -> v150;
  v150 -> v71;
  v157 -> v158;
  v158 -> v161  [label="False"];
  v158 -> v162  [label="True"];
  v162 -> v163;
  v163 -> v166  [label="False"];
  v163 -> v167  [label="True"];
  v167 -> v163;
  v166 -> v158;
  v161 -> v168;
  v168 -> v169;
  v169 -> v172  [label="False"];
  v169 -> v173  [label="True"];
  v173 -> v169;
  v172 -> v174;
  // end-of-graph
}
