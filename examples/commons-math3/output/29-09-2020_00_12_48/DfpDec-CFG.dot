digraph DfpDec_CFG {
  // graph-vertices
  v1  [label="32:  DfpDec (final DfpField factory)"];
  v2  [label="33:  super(factory)"];
  v3  [label="40:  DfpDec (final DfpField factory, byte x)"];
  v4  [label="41:  super(factory, x)"];
  v5  [label="48:  DfpDec (final DfpField factory, int x)"];
  v6  [label="49:  super(factory, x)"];
  v7  [label="56:  DfpDec (final DfpField factory, long x)"];
  v8  [label="57:  super(factory, x)"];
  v9  [label="64:  DfpDec (final DfpField factory, double x)"];
  v10  [label="65:  super(factory, x)"];
  v11  [label="66:  round(0)"];
  v12  [label="72:  DfpDec (final Dfp d)"];
  v13  [label="73:  super(d)"];
  v14  [label="74:  round(0)"];
  v15  [label="81:  DfpDec (final DfpField factory, final String s)"];
  v16  [label="82:  super(factory, s)"];
  v17  [label="83:  round(0)"];
  v18  [label="92:  DfpDec (final DfpField factory, final byte sign, final byte nans)"];
  v19  [label="93:  super(factory, sign, nans)"];
  v20  [label="98:  Dfp newInstance()"];
  v21  [label="99:  return new DfpDec(getField());"];
  v22  [label="104:  Dfp newInstance(final byte x)"];
  v23  [label="105:  return new DfpDec(getField(), x);"];
  v24  [label="110:  Dfp newInstance(final int x)"];
  v25  [label="111:  return new DfpDec(getField(), x);"];
  v26  [label="116:  Dfp newInstance(final long x)"];
  v27  [label="117:  return new DfpDec(getField(), x);"];
  v28  [label="122:  Dfp newInstance(final double x)"];
  v29  [label="123:  return new DfpDec(getField(), x);"];
  v30  [label="128:  Dfp newInstance(final Dfp d)"];
  v31  [label="131:  if (getField().getRadixDigits() != d.getField().getRadixDigits())"];
  v32  [label="132:  getField().setIEEEFlagsBits(DfpField.FLAG_INVALID)"];
  v33  [label="133:  final Dfp result = newInstance(getZero())"];
  v34  [label="134:  result.nans = QNAN"];
  v35  [label="135:  return dotrap(DfpField.FLAG_INVALID, 'newInstance', d, result);"];
  v36  [label="endif"];
  v37  [label="138:  return new DfpDec(d);"];
  v38  [label="144:  Dfp newInstance(final String s)"];
  v39  [label="145:  return new DfpDec(getField(), s);"];
  v40  [label="150:  Dfp newInstance(final byte sign, final byte nans)"];
  v41  [label="151:  return new DfpDec(getField(), sign, nans);"];
  v42  [label="159:  int getDecimalDigits()"];
  v43  [label="160:  return getRadixDigits() * 4 - 3;"];
  v44  [label="165:  int round(int in)"];
  v45  [label="167:  int msb = mant[mant.length-1]"];
  v46  [label="168:  if (msb == 0)"];
  v47  [label="170:  return 0;"];
  v48  [label="endif"];
  v49  [label="173:  int cmaxdigits = mant.length * 4"];
  v50  [label="174:  int lsbthreshold = 1000"];
  v51  [label="175:  while (lsbthreshold > msb)"];
  v52  [label="endwhile"];
  v53  [label="176:  lsbthreshold /= 10"];
  v54  [label="177:  cmaxdigits --"];
  v55  [label="181:  final int digits = getDecimalDigits()"];
  v56  [label="182:  final int lsbshift = cmaxdigits - digits"];
  v57  [label="183:  final int lsd = lsbshift / 4"];
  v58  [label="185:  lsbthreshold = 1"];
  v59  [label="186:  for (  int i = 0 ; i < lsbshift % 4 ;   i++)"];
  v62  [label="endfor"];
  v63  [label="187:  lsbthreshold *= 10"];
  v64  [label="190:  final int lsb = mant[lsd]"];
  v65  [label="192:  if (lsbthreshold <= 1 && digits == 4 * mant.length - 3)"];
  v66  [label="193:  return super.round(in);"];
  v67  [label="endif"];
  v68  [label="196:  int discarded = in"];
  v69  [label="197:  final int n"];
  v70  [label="198:  if (lsbthreshold == 1)"];
  v71  [label="200:  n = (mant[lsd-1] / 1000) % 10"];
  v72  [label="201:  mant[lsd-1] %= 1000"];
  v73  [label="202:  discarded |= mant[lsd-1]"];
  v74  [label="endif"];
  v75  [label="204:  n = (lsb * 10 / lsbthreshold) % 10"];
  v76  [label="205:  discarded |= lsb % (lsbthreshold/10)"];
  v77  [label="208:  for (  int i = 0 ; i < lsd ;   i++)"];
  v80  [label="endfor"];
  v81  [label="209:  discarded |= mant[i]"];
  v82  [label="210:  mant[i] = 0"];
  v83  [label="213:  mant[lsd] = lsb / lsbthreshold * lsbthreshold"];
  v84  [label="215:  final boolean inc"];
  v85  [label="216:  switch (getField().getRoundingMode())"];
  v86  [label="end-switch"];
  v87  [label="217:  case ROUND_DOWN:"];
  v88  [label="218:  inc = false"];
  v89  [label="219:  break;"];
  v90  [label="221:  case ROUND_UP:"];
  v91  [label="222:  inc = (n != 0) || (discarded != 0)"];
  v92  [label="223:  break;"];
  v93  [label="225:  case ROUND_HALF_UP:"];
  v94  [label="226:  inc = n >= 5"];
  v95  [label="227:  break;"];
  v96  [label="229:  case ROUND_HALF_DOWN:"];
  v97  [label="230:  inc = n > 5"];
  v98  [label="231:  break;"];
  v99  [label="233:  case ROUND_HALF_EVEN:"];
  v100  [label="234:  inc = (n > 5) || (n == 5 && discarded != 0) || (n == 5 && discarded == 0 && ((lsb / lsbthreshold) & 1) == 1)"];
  v101  [label="237:  break;"];
  v102  [label="239:  case ROUND_HALF_ODD:"];
  v103  [label="240:  inc = (n > 5) || (n == 5 && discarded != 0) || (n == 5 && discarded == 0 && ((lsb / lsbthreshold) & 1) == 0)"];
  v104  [label="243:  break;"];
  v105  [label="245:  case ROUND_CEIL:"];
  v106  [label="246:  inc = (sign == 1) && (n != 0 || discarded != 0)"];
  v107  [label="247:  break;"];
  v108  [label="249:  case ROUND_FLOOR:"];
  v109  [label="250:  default:"];
  v110  [label="251:  inc = (sign == -1) && (n != 0 || discarded != 0)"];
  v111  [label="252:  break;"];
  v112  [label="255:  if (inc)"];
  v113  [label="257:  int rh = lsbthreshold"];
  v114  [label="258:  for (  int i = lsd ; i < mant.length ;   i++)"];
  v117  [label="endfor"];
  v118  [label="259:  final int r = mant[i] + rh"];
  v119  [label="260:  rh = r / RADIX"];
  v120  [label="261:  mant[i] = r % RADIX"];
  v121  [label="264:  if (rh != 0)"];
  v122  [label="265:  shiftRight()"];
  v123  [label="266:  mant[mant.length-1]=rh"];
  v124  [label="endif"];
  v125  [label="endif"];
  v126  [label="271:  if (exp < MIN_EXP)"];
  v127  [label="273:  getField().setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW)"];
  v128  [label="274:  return DfpField.FLAG_UNDERFLOW;"];
  v129  [label="endif"];
  v130  [label="277:  if (exp > MAX_EXP)"];
  v131  [label="279:  getField().setIEEEFlagsBits(DfpField.FLAG_OVERFLOW)"];
  v132  [label="280:  return DfpField.FLAG_OVERFLOW;"];
  v133  [label="endif"];
  v134  [label="283:  if (n != 0 || discarded != 0)"];
  v135  [label="285:  getField().setIEEEFlagsBits(DfpField.FLAG_INEXACT)"];
  v136  [label="286:  return DfpField.FLAG_INEXACT;"];
  v137  [label="endif"];
  v138  [label="288:  return 0;"];
  v139  [label="293:  Dfp nextAfter(Dfp x)"];
  v140  [label="295:  final String trapName = 'nextAfter'"];
  v141  [label="298:  if (getField().getRadixDigits() != x.getField().getRadixDigits())"];
  v142  [label="299:  getField().setIEEEFlagsBits(DfpField.FLAG_INVALID)"];
  v143  [label="300:  final Dfp result = newInstance(getZero())"];
  v144  [label="301:  result.nans = QNAN"];
  v145  [label="302:  return dotrap(DfpField.FLAG_INVALID, trapName, x, result);"];
  v146  [label="endif"];
  v147  [label="305:  boolean up = false"];
  v148  [label="306:  Dfp result"];
  v149  [label="307:  Dfp inc"];
  v150  [label="310:  if (this.lessThan(x))"];
  v151  [label="311:  up = true"];
  v152  [label="endif"];
  v153  [label="314:  if (equals(x))"];
  v154  [label="315:  return newInstance(x);"];
  v155  [label="endif"];
  v156  [label="318:  if (lessThan(getZero()))"];
  v157  [label="319:  up = !up"];
  v158  [label="endif"];
  v159  [label="322:  if (up)"];
  v160  [label="323:  inc = power10(intLog10() - getDecimalDigits() + 1)"];
  v161  [label="324:  inc = copysign(inc, this)"];
  v162  [label="326:  if (this.equals(getZero()))"];
  v163  [label="327:  inc = power10K(MIN_EXP-mant.length-1)"];
  v164  [label="endif"];
  v165  [label="330:  if (inc.equals(getZero()))"];
  v166  [label="331:  result = copysign(newInstance(getZero()), this)"];
  v167  [label="endif"];
  v168  [label="333:  result = add(inc)"];
  v169  [label="endif"];
  v170  [label="336:  inc = power10(intLog10())"];
  v171  [label="337:  inc = copysign(inc, this)"];
  v172  [label="339:  if (this.equals(inc))"];
  v173  [label="340:  inc = inc.divide(power10(getDecimalDigits()))"];
  v174  [label="endif"];
  v175  [label="342:  inc = inc.divide(power10(getDecimalDigits() - 1))"];
  v176  [label="345:  if (this.equals(getZero()))"];
  v177  [label="346:  inc = power10K(MIN_EXP-mant.length-1)"];
  v178  [label="endif"];
  v179  [label="349:  if (inc.equals(getZero()))"];
  v180  [label="350:  result = copysign(newInstance(getZero()), this)"];
  v181  [label="endif"];
  v182  [label="352:  result = subtract(inc)"];
  v183  [label="356:  if (result.classify() == INFINITE && this.classify() != INFINITE)"];
  v184  [label="357:  getField().setIEEEFlagsBits(DfpField.FLAG_INEXACT)"];
  v185  [label="358:  result = dotrap(DfpField.FLAG_INEXACT, trapName, x, result)"];
  v186  [label="endif"];
  v187  [label="361:  if (result.equals(getZero()) && this.equals(getZero()) == false)"];
  v188  [label="362:  getField().setIEEEFlagsBits(DfpField.FLAG_INEXACT)"];
  v189  [label="363:  result = dotrap(DfpField.FLAG_INEXACT, trapName, x, result)"];
  v190  [label="endif"];
  v191  [label="366:  return result;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v7 -> v8;
  v9 -> v10;
  v10 -> v11;
  v12 -> v13;
  v13 -> v14;
  v15 -> v16;
  v16 -> v17;
  v18 -> v19;
  v20 -> v21;
  v22 -> v23;
  v24 -> v25;
  v26 -> v27;
  v28 -> v29;
  v30 -> v31;
  v31 -> v32  [label="True"];
  v32 -> v33;
  v33 -> v34;
  v34 -> v35;
  v31 -> v36  [label="False"];
  v36 -> v37;
  v38 -> v39;
  v40 -> v41;
  v42 -> v43;
  v44 -> v45;
  v45 -> v46;
  v46 -> v47  [label="True"];
  v46 -> v48  [label="False"];
  v48 -> v49;
  v49 -> v50;
  v50 -> v51;
  v51 -> v52  [label="False"];
  v51 -> v53  [label="True"];
  v53 -> v54;
  v54 -> v51;
  v52 -> v55;
  v55 -> v56;
  v56 -> v57;
  v57 -> v58;
  v58 -> v59;
  v59 -> v62  [label="False"];
  v59 -> v63  [label="True"];
  v63 -> v59;
  v62 -> v64;
  v64 -> v65;
  v65 -> v66  [label="True"];
  v65 -> v67  [label="False"];
  v67 -> v68;
  v68 -> v69;
  v69 -> v70;
  v70 -> v71  [label="True"];
  v71 -> v72;
  v72 -> v73;
  v73 -> v74;
  v70 -> v75  [label="False"];
  v75 -> v76;
  v76 -> v74;
  v74 -> v77;
  v77 -> v80  [label="False"];
  v77 -> v81  [label="True"];
  v81 -> v82;
  v82 -> v77;
  v80 -> v83;
  v83 -> v84;
  v84 -> v85;
  v85 -> v87;
  v87 -> v88  [label="True"];
  v88 -> v89;
  v89 -> v86;
  v87 -> v90  [label="False"];
  v90 -> v91  [label="True"];
  v91 -> v92;
  v92 -> v86;
  v90 -> v93  [label="False"];
  v93 -> v94  [label="True"];
  v94 -> v95;
  v95 -> v86;
  v93 -> v96  [label="False"];
  v96 -> v97  [label="True"];
  v97 -> v98;
  v98 -> v86;
  v96 -> v99  [label="False"];
  v99 -> v100  [label="True"];
  v100 -> v101;
  v101 -> v86;
  v99 -> v102  [label="False"];
  v102 -> v103  [label="True"];
  v103 -> v104;
  v104 -> v86;
  v102 -> v105  [label="False"];
  v105 -> v106  [label="True"];
  v106 -> v107;
  v107 -> v86;
  v105 -> v108  [label="False"];
  v108 -> v109  [label="False"];
  v109 -> v110;
  v108 -> v110  [label="True"];
  v110 -> v111;
  v111 -> v86;
  v86 -> v112;
  v112 -> v113  [label="True"];
  v113 -> v114;
  v114 -> v117  [label="False"];
  v114 -> v118  [label="True"];
  v118 -> v119;
  v119 -> v120;
  v120 -> v114;
  v117 -> v121;
  v121 -> v122  [label="True"];
  v122 -> v123;
  v123 -> v124;
  v121 -> v124  [label="False"];
  v124 -> v125;
  v112 -> v125  [label="False"];
  v125 -> v126;
  v126 -> v127  [label="True"];
  v127 -> v128;
  v126 -> v129  [label="False"];
  v129 -> v130;
  v130 -> v131  [label="True"];
  v131 -> v132;
  v130 -> v133  [label="False"];
  v133 -> v134;
  v134 -> v135  [label="True"];
  v135 -> v136;
  v134 -> v137  [label="False"];
  v137 -> v138;
  v139 -> v140;
  v140 -> v141;
  v141 -> v142  [label="True"];
  v142 -> v143;
  v143 -> v144;
  v144 -> v145;
  v141 -> v146  [label="False"];
  v146 -> v147;
  v147 -> v148;
  v148 -> v149;
  v149 -> v150;
  v150 -> v151  [label="True"];
  v151 -> v152;
  v150 -> v152  [label="False"];
  v152 -> v153;
  v153 -> v154  [label="True"];
  v153 -> v155  [label="False"];
  v155 -> v156;
  v156 -> v157  [label="True"];
  v157 -> v158;
  v156 -> v158  [label="False"];
  v158 -> v159;
  v159 -> v160  [label="True"];
  v160 -> v161;
  v161 -> v162;
  v162 -> v163  [label="True"];
  v163 -> v164;
  v162 -> v164  [label="False"];
  v164 -> v165;
  v165 -> v166  [label="True"];
  v166 -> v167;
  v165 -> v168  [label="False"];
  v168 -> v167;
  v167 -> v169;
  v159 -> v170  [label="False"];
  v170 -> v171;
  v171 -> v172;
  v172 -> v173  [label="True"];
  v173 -> v174;
  v172 -> v175  [label="False"];
  v175 -> v174;
  v174 -> v176;
  v176 -> v177  [label="True"];
  v177 -> v178;
  v176 -> v178  [label="False"];
  v178 -> v179;
  v179 -> v180  [label="True"];
  v180 -> v181;
  v179 -> v182  [label="False"];
  v182 -> v181;
  v181 -> v169;
  v169 -> v183;
  v183 -> v184  [label="True"];
  v184 -> v185;
  v185 -> v186;
  v183 -> v186  [label="False"];
  v186 -> v187;
  v187 -> v188  [label="True"];
  v188 -> v189;
  v189 -> v190;
  v187 -> v190  [label="False"];
  v190 -> v191;
  // end-of-graph
}
