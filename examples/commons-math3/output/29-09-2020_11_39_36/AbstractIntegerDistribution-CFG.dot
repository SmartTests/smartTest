digraph AbstractIntegerDistribution_CFG {
  // graph-vertices
  v1  [label="61:  AbstractIntegerDistribution ()"];
  v2  [label="64:  random = null"];
  v3  [label="71:  AbstractIntegerDistribution (RandomGenerator rng)"];
  v4  [label="72:  random = rng"];
  v5  [label="81:  double cumulativeProbability(int x0, int x1)"];
  v6  [label="82:  if (x1 < x0)"];
  v7  [label="83:  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, x0, x1, true)"];
  v8  [label="endif"];
  v9  [label="86:  return cumulativeProbability(x1) - cumulativeProbability(x0);"];
  v10  [label="100:  int inverseCumulativeProbability(final double p)"];
  v11  [label="101:  if (p < 0.0 || p > 1.0)"];
  v12  [label="102:  throw new OutOfRangeException(p, 0, 1)"];
  v13  [label="endif"];
  v14  [label="105:  int lower = getSupportLowerBound()"];
  v15  [label="106:  if (p == 0.0)"];
  v16  [label="107:  return lower;"];
  v17  [label="endif"];
  v18  [label="109:  if (lower == Integer.MIN_VALUE)"];
  v19  [label="110:  if (checkedCumulativeProbability(lower) >= p)"];
  v20  [label="111:  return lower;"];
  v21  [label="endif"];
  v22  [label="endif"];
  v23  [label="114:  lower -= 1"];
  v24  [label="118:  int upper = getSupportUpperBound()"];
  v25  [label="119:  if (p == 1.0)"];
  v26  [label="120:  return upper;"];
  v27  [label="endif"];
  v28  [label="125:  final double mu = getNumericalMean()"];
  v29  [label="126:  final double sigma = FastMath.sqrt(getNumericalVariance())"];
  v30  [label="127:  final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) || Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0)"];
  v31  [label="129:  if (chebyshevApplies)"];
  v32  [label="130:  double k = FastMath.sqrt((1.0 - p) / p)"];
  v33  [label="131:  double tmp = mu - k * sigma"];
  v34  [label="132:  if (tmp > lower)"];
  v35  [label="133:  lower = ((int) Math.ceil(tmp)) - 1"];
  v36  [label="endif"];
  v37  [label="135:  k = 1.0 / k"];
  v38  [label="136:  tmp = mu + k * sigma"];
  v39  [label="137:  if (tmp < upper)"];
  v40  [label="138:  upper = ((int) Math.ceil(tmp)) - 1"];
  v41  [label="endif"];
  v42  [label="endif"];
  v43  [label="142:  return solveInverseCumulativeProbability(p, lower, upper);"];
  v44  [label="157:  int solveInverseCumulativeProbability(final double p, int lower, int upper)"];
  v45  [label="158:  while (lower + 1 < upper)"];
  v46  [label="endwhile"];
  v47  [label="159:  int xm = (lower + upper) / 2"];
  v48  [label="160:  if (xm < lower || xm > upper)"];
  v49  [label="166:  xm = lower + (upper - lower) / 2"];
  v50  [label="endif"];
  v51  [label="169:  double pm = checkedCumulativeProbability(xm)"];
  v52  [label="170:  if (pm >= p)"];
  v53  [label="171:  upper = xm"];
  v54  [label="endif"];
  v55  [label="173:  lower = xm"];
  v56  [label="176:  return upper;"];
  v57  [label="180:  void reseedRandomGenerator(long seed)"];
  v58  [label="181:  random.setSeed(seed)"];
  v59  [label="182:  randomData.reSeed(seed)"];
  v60  [label="192:  int sample()"];
  v61  [label="193:  return inverseCumulativeProbability(random.nextDouble());"];
  v62  [label="202:  int[] sample(int sampleSize)"];
  v63  [label="203:  if (sampleSize <= 0)"];
  v64  [label="204:  throw new NotStrictlyPositiveException( LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize)"];
  v65  [label="endif"];
  v66  [label="207:  int[] out = new int[sampleSize]"];
  v67  [label="208:  for (  int i = 0 ; i < sampleSize ;   i++)"];
  v70  [label="endfor"];
  v71  [label="209:  out[i] = sample()"];
  v72  [label="211:  return out;"];
  v73  [label="225:  double checkedCumulativeProbability(int argument)"];
  v74  [label="227:  double result = Double.NaN"];
  v75  [label="228:  result = cumulativeProbability(argument)"];
  v76  [label="229:  if (Double.isNaN(result))"];
  v77  [label="230:  throw new MathInternalError(LocalizedFormats .DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN, argument)"];
  v78  [label="endif"];
  v79  [label="233:  return result;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v6 -> v7  [label="True"];
  v6 -> v8  [label="False"];
  v8 -> v9;
  v10 -> v11;
  v11 -> v12  [label="True"];
  v11 -> v13  [label="False"];
  v13 -> v14;
  v14 -> v15;
  v15 -> v16  [label="True"];
  v15 -> v17  [label="False"];
  v17 -> v18;
  v18 -> v19  [label="True"];
  v19 -> v20  [label="True"];
  v19 -> v21  [label="False"];
  v21 -> v22;
  v18 -> v23  [label="False"];
  v23 -> v22;
  v22 -> v24;
  v24 -> v25;
  v25 -> v26  [label="True"];
  v25 -> v27  [label="False"];
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v31;
  v31 -> v32  [label="True"];
  v32 -> v33;
  v33 -> v34;
  v34 -> v35  [label="True"];
  v35 -> v36;
  v34 -> v36  [label="False"];
  v36 -> v37;
  v37 -> v38;
  v38 -> v39;
  v39 -> v40  [label="True"];
  v40 -> v41;
  v39 -> v41  [label="False"];
  v41 -> v42;
  v31 -> v42  [label="False"];
  v42 -> v43;
  v44 -> v45;
  v45 -> v46  [label="False"];
  v45 -> v47  [label="True"];
  v47 -> v48;
  v48 -> v49  [label="True"];
  v49 -> v50;
  v48 -> v50  [label="False"];
  v50 -> v51;
  v51 -> v52;
  v52 -> v53  [label="True"];
  v53 -> v54;
  v52 -> v55  [label="False"];
  v55 -> v54;
  v54 -> v45;
  v46 -> v56;
  v57 -> v58;
  v58 -> v59;
  v60 -> v61;
  v62 -> v63;
  v63 -> v64  [label="True"];
  v63 -> v65  [label="False"];
  v65 -> v66;
  v66 -> v67;
  v67 -> v70  [label="False"];
  v67 -> v71  [label="True"];
  v71 -> v67;
  v70 -> v72;
  v73 -> v74;
  v74 -> v75;
  v75 -> v76;
  v76 -> v77  [label="True"];
  v76 -> v78  [label="False"];
  v78 -> v79;
  // end-of-graph
}
