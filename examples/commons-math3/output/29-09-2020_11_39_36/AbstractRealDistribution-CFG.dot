digraph AbstractRealDistribution_CFG {
  // graph-vertices
  v1  [label="67:  AbstractRealDistribution ()"];
  v2  [label="70:  random = null"];
  v3  [label="76:  AbstractRealDistribution (RandomGenerator rng)"];
  v4  [label="77:  random = rng"];
  v5  [label="90:  double cumulativeProbability(double x0, double x1)"];
  v6  [label="91:  return probability(x0, x1);"];
  v7  [label="110:  double probability(double x0, double x1)"];
  v8  [label="112:  if (x0 > x1)"];
  v9  [label="113:  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, x0, x1, true)"];
  v10  [label="endif"];
  v11  [label="116:  return cumulativeProbability(x1) - cumulativeProbability(x0);"];
  v12  [label="128:  double inverseCumulativeProbability(final double p)"];
  v13  [label="157:  if (p < 0.0 || p > 1.0)"];
  v14  [label="158:  throw new OutOfRangeException(p, 0, 1)"];
  v15  [label="endif"];
  v16  [label="161:  double lowerBound = getSupportLowerBound()"];
  v17  [label="162:  if (p == 0.0)"];
  v18  [label="163:  return lowerBound;"];
  v19  [label="endif"];
  v20  [label="166:  double upperBound = getSupportUpperBound()"];
  v21  [label="167:  if (p == 1.0)"];
  v22  [label="168:  return upperBound;"];
  v23  [label="endif"];
  v24  [label="171:  final double mu = getNumericalMean()"];
  v25  [label="172:  final double sig = FastMath.sqrt(getNumericalVariance())"];
  v26  [label="173:  final boolean chebyshevApplies"];
  v27  [label="174:  chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||  Double.isInfinite(sig) || Double.isNaN(sig))"];
  v28  [label="177:  if (lowerBound == Double.NEGATIVE_INFINITY)"];
  v29  [label="178:  if (chebyshevApplies)"];
  v30  [label="179:  lowerBound = mu - sig * FastMath.sqrt((1. - p) / p)"];
  v31  [label="endif"];
  v32  [label="181:  lowerBound = -1.0"];
  v33  [label="182:  while (cumulativeProbability(lowerBound) >= p)"];
  v34  [label="endwhile"];
  v35  [label="183:  lowerBound *= 2.0"];
  v36  [label="endif"];
  v37  [label="188:  if (upperBound == Double.POSITIVE_INFINITY)"];
  v38  [label="189:  if (chebyshevApplies)"];
  v39  [label="190:  upperBound = mu + sig * FastMath.sqrt(p / (1. - p))"];
  v40  [label="endif"];
  v41  [label="192:  upperBound = 1.0"];
  v42  [label="193:  while (cumulativeProbability(upperBound) < p)"];
  v43  [label="endwhile"];
  v44  [label="194:  upperBound *= 2.0"];
  v45  [label="endif"];
  v46  [label="199:  final UnivariateFunction toSolve = new UnivariateFunction() {  public double value(final double x) { return cumulativeProbability(x) - p; } }"];
  v47  [label="206:  double x = UnivariateSolverUtils.solve(toSolve,  lowerBound,  upperBound,  getSolverAbsoluteAccuracy())"];
  v48  [label="211:  if (!isSupportConnected())"];
  v49  [label="213:  final double dx = getSolverAbsoluteAccuracy()"];
  v50  [label="214:  if (x - dx >= getSupportLowerBound())"];
  v51  [label="215:  double px = cumulativeProbability(x)"];
  v52  [label="216:  if (cumulativeProbability(x - dx) == px)"];
  v53  [label="217:  upperBound = x"];
  v54  [label="218:  while (upperBound - lowerBound > dx)"];
  v55  [label="endwhile"];
  v56  [label="219:  final double midPoint = 0.5 * (lowerBound + upperBound)"];
  v57  [label="220:  if (cumulativeProbability(midPoint) < px)"];
  v58  [label="221:  lowerBound = midPoint"];
  v59  [label="endif"];
  v60  [label="223:  upperBound = midPoint"];
  v61  [label="226:  return upperBound;"];
  v62  [label="endif"];
  v63  [label="endif"];
  v64  [label="endif"];
  v65  [label="230:  return x;"];
  v66  [label="240:  double getSolverAbsoluteAccuracy()"];
  v67  [label="241:  return solverAbsoluteAccuracy;"];
  v68  [label="245:  void reseedRandomGenerator(long seed)"];
  v69  [label="246:  random.setSeed(seed)"];
  v70  [label="247:  randomData.reSeed(seed)"];
  v71  [label="258:  double sample()"];
  v72  [label="259:  return inverseCumulativeProbability(random.nextDouble());"];
  v73  [label="268:  double[] sample(int sampleSize)"];
  v74  [label="269:  if (sampleSize <= 0)"];
  v75  [label="270:  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize)"];
  v76  [label="endif"];
  v77  [label="273:  double[] out = new double[sampleSize]"];
  v78  [label="274:  for (  int i = 0 ; i < sampleSize ;   i++)"];
  v81  [label="endfor"];
  v82  [label="275:  out[i] = sample()"];
  v83  [label="277:  return out;"];
  v84  [label="286:  double probability(double x)"];
  v85  [label="287:  return 0d;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v7 -> v8;
  v8 -> v9  [label="True"];
  v8 -> v10  [label="False"];
  v10 -> v11;
  v12 -> v13;
  v13 -> v14  [label="True"];
  v13 -> v15  [label="False"];
  v15 -> v16;
  v16 -> v17;
  v17 -> v18  [label="True"];
  v17 -> v19  [label="False"];
  v19 -> v20;
  v20 -> v21;
  v21 -> v22  [label="True"];
  v21 -> v23  [label="False"];
  v23 -> v24;
  v24 -> v25;
  v25 -> v26;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29  [label="True"];
  v29 -> v30  [label="True"];
  v30 -> v31;
  v29 -> v32  [label="False"];
  v32 -> v33;
  v33 -> v34  [label="False"];
  v33 -> v35  [label="True"];
  v35 -> v33;
  v34 -> v31;
  v31 -> v36;
  v28 -> v36  [label="False"];
  v36 -> v37;
  v37 -> v38  [label="True"];
  v38 -> v39  [label="True"];
  v39 -> v40;
  v38 -> v41  [label="False"];
  v41 -> v42;
  v42 -> v43  [label="False"];
  v42 -> v44  [label="True"];
  v44 -> v42;
  v43 -> v40;
  v40 -> v45;
  v37 -> v45  [label="False"];
  v45 -> v46;
  v46 -> v47;
  v47 -> v48;
  v48 -> v49  [label="True"];
  v49 -> v50;
  v50 -> v51  [label="True"];
  v51 -> v52;
  v52 -> v53  [label="True"];
  v53 -> v54;
  v54 -> v55  [label="False"];
  v54 -> v56  [label="True"];
  v56 -> v57;
  v57 -> v58  [label="True"];
  v58 -> v59;
  v57 -> v60  [label="False"];
  v60 -> v59;
  v59 -> v54;
  v55 -> v61;
  v52 -> v62  [label="False"];
  v62 -> v63;
  v50 -> v63  [label="False"];
  v63 -> v64;
  v48 -> v64  [label="False"];
  v64 -> v65;
  v66 -> v67;
  v68 -> v69;
  v69 -> v70;
  v71 -> v72;
  v73 -> v74;
  v74 -> v75  [label="True"];
  v74 -> v76  [label="False"];
  v76 -> v77;
  v77 -> v78;
  v78 -> v81  [label="False"];
  v78 -> v82  [label="True"];
  v82 -> v78;
  v81 -> v83;
  v84 -> v85;
  // end-of-graph
}
