digraph BetaDistribution_CFG {
  // graph-vertices
  v1  [label="59:  BetaDistribution (double alpha, double beta)"];
  v2  [label="60:  this(alpha, beta, DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v3  [label="73:  BetaDistribution (double alpha, double beta, double inverseCumAccuracy)"];
  v4  [label="74:  this(new Well19937c(), alpha, beta, inverseCumAccuracy)"];
  v5  [label="85:  BetaDistribution (RandomGenerator rng, double alpha, double beta)"];
  v6  [label="86:  this(rng, alpha, beta, DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v7  [label="100:  BetaDistribution (RandomGenerator rng, double alpha, double beta, double inverseCumAccuracy)"];
  v8  [label="104:  super(rng)"];
  v9  [label="106:  this.alpha = alpha"];
  v10  [label="107:  this.beta = beta"];
  v11  [label="108:  z = Double.NaN"];
  v12  [label="109:  solverAbsoluteAccuracy = inverseCumAccuracy"];
  v13  [label="117:  double getAlpha()"];
  v14  [label="118:  return alpha;"];
  v15  [label="126:  double getBeta()"];
  v16  [label="127:  return beta;"];
  v17  [label="131:  void recomputeZ()"];
  v18  [label="132:  if (Double.isNaN(z))"];
  v19  [label="133:  z = Gamma.logGamma(alpha) + Gamma.logGamma(beta) - Gamma.logGamma(alpha + beta)"];
  v20  [label="endif"];
  v21  [label="138:  double density(double x)"];
  v22  [label="139:  recomputeZ()"];
  v23  [label="140:  if (x < 0 || x > 1)"];
  v24  [label="141:  return 0;"];
  v25  [label="endif"];
  v26  [label="142:  if (x == 0)"];
  v27  [label="143:  if (alpha < 1)"];
  v28  [label="144:  throw new NumberIsTooSmallException(LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, alpha, 1, false)"];
  v29  [label="endif"];
  v30  [label="146:  return 0;"];
  v31  [label="endif"];
  v32  [label="147:  if (x == 1)"];
  v33  [label="148:  if (beta < 1)"];
  v34  [label="149:  throw new NumberIsTooSmallException(LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, beta, 1, false)"];
  v35  [label="endif"];
  v36  [label="151:  return 0;"];
  v37  [label="endif"];
  v38  [label="153:  double logX = FastMath.log(x)"];
  v39  [label="154:  double log1mX = FastMath.log1p(-x)"];
  v40  [label="155:  return FastMath.exp((alpha - 1) * logX + (beta - 1) * log1mX - z);"];
  v41  [label="160:  double cumulativeProbability(double x)"];
  v42  [label="161:  if (x <= 0)"];
  v43  [label="162:  return 0;"];
  v44  [label="endif"];
  v45  [label="163:  if (x >= 1)"];
  v46  [label="164:  return 1;"];
  v47  [label="endif"];
  v48  [label="166:  return Beta.regularizedBeta(x, alpha, beta);"];
  v49  [label="178:  double getSolverAbsoluteAccuracy()"];
  v50  [label="179:  return solverAbsoluteAccuracy;"];
  v51  [label="188:  double getNumericalMean()"];
  v52  [label="189:  final double a = getAlpha()"];
  v53  [label="190:  return a / (a + getBeta());"];
  v54  [label="200:  double getNumericalVariance()"];
  v55  [label="201:  final double a = getAlpha()"];
  v56  [label="202:  final double b = getBeta()"];
  v57  [label="203:  final double alphabetasum = a + b"];
  v58  [label="204:  return (a * b) / ((alphabetasum * alphabetasum) * (alphabetasum + 1));"];
  v59  [label="214:  double getSupportLowerBound()"];
  v60  [label="215:  return 0;"];
  v61  [label="225:  double getSupportUpperBound()"];
  v62  [label="226:  return 1;"];
  v63  [label="230:  boolean isSupportLowerBoundInclusive()"];
  v64  [label="231:  return false;"];
  v65  [label="235:  boolean isSupportUpperBoundInclusive()"];
  v66  [label="236:  return false;"];
  v67  [label="246:  boolean isSupportConnected()"];
  v68  [label="247:  return true;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v7 -> v8;
  v8 -> v9;
  v9 -> v10;
  v10 -> v11;
  v11 -> v12;
  v13 -> v14;
  v15 -> v16;
  v17 -> v18;
  v18 -> v19  [label="True"];
  v19 -> v20;
  v18 -> v20  [label="False"];
  v21 -> v22;
  v22 -> v23;
  v23 -> v24  [label="True"];
  v23 -> v26  [label="False"];
  v26 -> v27  [label="True"];
  v27 -> v28  [label="True"];
  v27 -> v29  [label="False"];
  v29 -> v30;
  v26 -> v32  [label="False"];
  v32 -> v33  [label="True"];
  v33 -> v34  [label="True"];
  v33 -> v35  [label="False"];
  v35 -> v36;
  v32 -> v38  [label="False"];
  v38 -> v39;
  v39 -> v40;
  v37 -> v31;
  v31 -> v25;
  v41 -> v42;
  v42 -> v43  [label="True"];
  v42 -> v45  [label="False"];
  v45 -> v46  [label="True"];
  v45 -> v48  [label="False"];
  v47 -> v44;
  v49 -> v50;
  v51 -> v52;
  v52 -> v53;
  v54 -> v55;
  v55 -> v56;
  v56 -> v57;
  v57 -> v58;
  v59 -> v60;
  v61 -> v62;
  v63 -> v64;
  v65 -> v66;
  v67 -> v68;
  // end-of-graph
}
