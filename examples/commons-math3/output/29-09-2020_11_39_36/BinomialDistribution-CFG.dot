digraph BinomialDistribution_CFG {
  // graph-vertices
  v1  [label="51:  BinomialDistribution (int trials, double p)"];
  v2  [label="52:  this(new Well19937c(), trials, p)"];
  v3  [label="65:  BinomialDistribution (RandomGenerator rng, int trials, double p)"];
  v4  [label="68:  super(rng)"];
  v5  [label="70:  if (trials < 0)"];
  v6  [label="71:  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_TRIALS,  trials)"];
  v7  [label="endif"];
  v8  [label="74:  if (p < 0 || p > 1)"];
  v9  [label="75:  throw new OutOfRangeException(p, 0, 1)"];
  v10  [label="endif"];
  v11  [label="78:  probabilityOfSuccess = p"];
  v12  [label="79:  numberOfTrials = trials"];
  v13  [label="87:  int getNumberOfTrials()"];
  v14  [label="88:  return numberOfTrials;"];
  v15  [label="96:  double getProbabilityOfSuccess()"];
  v16  [label="97:  return probabilityOfSuccess;"];
  v17  [label="101:  double probability(int x)"];
  v18  [label="102:  double ret"];
  v19  [label="103:  if (x < 0 || x > numberOfTrials)"];
  v20  [label="104:  ret = 0.0"];
  v21  [label="endif"];
  v22  [label="106:  ret = FastMath.exp(SaddlePointExpansion.logBinomialProbability(x, numberOfTrials, probabilityOfSuccess, 1.0 - probabilityOfSuccess))"];
  v23  [label="110:  return ret;"];
  v24  [label="114:  double cumulativeProbability(int x)"];
  v25  [label="115:  double ret"];
  v26  [label="116:  if (x < 0)"];
  v27  [label="117:  ret = 0.0"];
  v28  [label="endif"];
  v29  [label="118:  if (x >= numberOfTrials)"];
  v30  [label="119:  ret = 1.0"];
  v31  [label="endif"];
  v32  [label="121:  ret = 1.0 - Beta.regularizedBeta(probabilityOfSuccess, x + 1.0, numberOfTrials - x)"];
  v33  [label="124:  return ret;"];
  v34  [label="133:  double getNumericalMean()"];
  v35  [label="134:  return numberOfTrials * probabilityOfSuccess;"];
  v36  [label="143:  double getNumericalVariance()"];
  v37  [label="144:  final double p = probabilityOfSuccess"];
  v38  [label="145:  return numberOfTrials * p * (1 - p);"];
  v39  [label="156:  int getSupportLowerBound()"];
  v40  [label="157:  return probabilityOfSuccess < 1.0 ? 0 : numberOfTrials;"];
  v41  [label="168:  int getSupportUpperBound()"];
  v42  [label="169:  return probabilityOfSuccess > 0.0 ? numberOfTrials : 0;"];
  v43  [label="179:  boolean isSupportConnected()"];
  v44  [label="180:  return true;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6  [label="True"];
  v5 -> v7  [label="False"];
  v7 -> v8;
  v8 -> v9  [label="True"];
  v8 -> v10  [label="False"];
  v10 -> v11;
  v11 -> v12;
  v13 -> v14;
  v15 -> v16;
  v17 -> v18;
  v18 -> v19;
  v19 -> v20  [label="True"];
  v20 -> v21;
  v19 -> v22  [label="False"];
  v22 -> v21;
  v21 -> v23;
  v24 -> v25;
  v25 -> v26;
  v26 -> v27  [label="True"];
  v27 -> v28;
  v26 -> v29  [label="False"];
  v29 -> v30  [label="True"];
  v30 -> v31;
  v29 -> v32  [label="False"];
  v32 -> v31;
  v31 -> v28;
  v28 -> v33;
  v34 -> v35;
  v36 -> v37;
  v37 -> v38;
  v39 -> v40;
  v41 -> v42;
  v43 -> v44;
  // end-of-graph
}
