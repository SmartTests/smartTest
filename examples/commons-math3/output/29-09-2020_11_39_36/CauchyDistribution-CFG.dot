digraph CauchyDistribution_CFG {
  // graph-vertices
  v1  [label="53:  CauchyDistribution ()"];
  v2  [label="54:  this(0, 1)"];
  v3  [label="63:  CauchyDistribution (double median, double scale)"];
  v4  [label="64:  this(median, scale, DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v5  [label="78:  CauchyDistribution (double median, double scale, double inverseCumAccuracy)"];
  v6  [label="80:  this(new Well19937c(), median, scale, inverseCumAccuracy)"];
  v7  [label="92:  CauchyDistribution (RandomGenerator rng, double median, double scale)"];
  v8  [label="93:  this(rng, median, scale, DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v9  [label="108:  CauchyDistribution (RandomGenerator rng, double median, double scale, double inverseCumAccuracy)"];
  v10  [label="112:  super(rng)"];
  v11  [label="113:  if (scale <= 0)"];
  v12  [label="114:  throw new NotStrictlyPositiveException(LocalizedFormats.SCALE, scale)"];
  v13  [label="endif"];
  v14  [label="116:  this.scale = scale"];
  v15  [label="117:  this.median = median"];
  v16  [label="118:  solverAbsoluteAccuracy = inverseCumAccuracy"];
  v17  [label="122:  double cumulativeProbability(double x)"];
  v18  [label="123:  return 0.5 + (FastMath.atan((x - median) / scale) / FastMath.PI);"];
  v19  [label="131:  double getMedian()"];
  v20  [label="132:  return median;"];
  v21  [label="140:  double getScale()"];
  v22  [label="141:  return scale;"];
  v23  [label="145:  double density(double x)"];
  v24  [label="146:  final double dev = x - median"];
  v25  [label="147:  return (1 / FastMath.PI) * (scale / (dev * dev + scale * scale));"];
  v26  [label="157:  double inverseCumulativeProbability(double p)"];
  v27  [label="158:  double ret"];
  v28  [label="159:  if (p < 0 || p > 1)"];
  v29  [label="160:  throw new OutOfRangeException(p, 0, 1)"];
  v30  [label="endif"];
  v31  [label="161:  if (p == 0)"];
  v32  [label="162:  ret = Double.NEGATIVE_INFINITY"];
  v33  [label="endif"];
  v34  [label="163:  if (p == 1)"];
  v35  [label="164:  ret = Double.POSITIVE_INFINITY"];
  v36  [label="endif"];
  v37  [label="166:  ret = median + scale * FastMath.tan(FastMath.PI * (p - .5))"];
  v38  [label="168:  return ret;"];
  v39  [label="173:  double getSolverAbsoluteAccuracy()"];
  v40  [label="174:  return solverAbsoluteAccuracy;"];
  v41  [label="184:  double getNumericalMean()"];
  v42  [label="185:  return Double.NaN;"];
  v43  [label="195:  double getNumericalVariance()"];
  v44  [label="196:  return Double.NaN;"];
  v45  [label="207:  double getSupportLowerBound()"];
  v46  [label="208:  return Double.NEGATIVE_INFINITY;"];
  v47  [label="219:  double getSupportUpperBound()"];
  v48  [label="220:  return Double.POSITIVE_INFINITY;"];
  v49  [label="224:  boolean isSupportLowerBoundInclusive()"];
  v50  [label="225:  return false;"];
  v51  [label="229:  boolean isSupportUpperBoundInclusive()"];
  v52  [label="230:  return false;"];
  v53  [label="240:  boolean isSupportConnected()"];
  v54  [label="241:  return true;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v7 -> v8;
  v9 -> v10;
  v10 -> v11;
  v11 -> v12  [label="True"];
  v11 -> v13  [label="False"];
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v17 -> v18;
  v19 -> v20;
  v21 -> v22;
  v23 -> v24;
  v24 -> v25;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29  [label="True"];
  v28 -> v31  [label="False"];
  v31 -> v32  [label="True"];
  v32 -> v33;
  v31 -> v34  [label="False"];
  v34 -> v35  [label="True"];
  v35 -> v36;
  v34 -> v37  [label="False"];
  v37 -> v36;
  v36 -> v33;
  v33 -> v30;
  v30 -> v38;
  v39 -> v40;
  v41 -> v42;
  v43 -> v44;
  v45 -> v46;
  v47 -> v48;
  v49 -> v50;
  v51 -> v52;
  v53 -> v54;
  // end-of-graph
}
