digraph EnumeratedIntegerDistribution_CFG {
  // graph-vertices
  v1  [label="65:  EnumeratedIntegerDistribution (final int[] singletons, final double[] probabilities)"];
  v2  [label="68:  this(new Well19937c(), singletons, probabilities)"];
  v3  [label="85:  EnumeratedIntegerDistribution (final RandomGenerator rng,  final int[] singletons, final double[] probabilities)"];
  v4  [label="89:  super(rng)"];
  v5  [label="90:  if (singletons.length != probabilities.length)"];
  v6  [label="91:  throw new DimensionMismatchException(probabilities.length, singletons.length)"];
  v7  [label="endif"];
  v8  [label="94:  final List<Pair<Integer, Double>> samples = new ArrayList<Pair<Integer, Double>>(singletons.length)"];
  v9  [label="96:  for (  int i = 0 ; i < singletons.length ;   i++)"];
  v12  [label="endfor"];
  v13  [label="97:  samples.add(new Pair<Integer, Double>(singletons[i], probabilities[i]))"];
  v14  [label="100:  innerDistribution = new EnumeratedDistribution<Integer>(rng, samples)"];
  v15  [label="106:  double probability(final int x)"];
  v16  [label="107:  return innerDistribution.probability(x);"];
  v17  [label="113:  double cumulativeProbability(final int x)"];
  v18  [label="114:  double probability = 0"];
  v19  [label="116:  for (final Pair<Integer, Double> sample : innerDistribution.getPmf())"];
  v20  [label="endfor"];
  v21  [label="117:  if (sample.getKey() <= x)"];
  v22  [label="118:  probability += sample.getValue()"];
  v23  [label="endif"];
  v24  [label="122:  return probability;"];
  v25  [label="130:  double getNumericalMean()"];
  v26  [label="131:  double mean = 0"];
  v27  [label="133:  for (final Pair<Integer, Double> sample : innerDistribution.getPmf())"];
  v28  [label="endfor"];
  v29  [label="134:  mean += sample.getValue() * sample.getKey()"];
  v30  [label="137:  return mean;"];
  v31  [label="145:  double getNumericalVariance()"];
  v32  [label="146:  double mean = 0"];
  v33  [label="147:  double meanOfSquares = 0"];
  v34  [label="149:  for (final Pair<Integer, Double> sample : innerDistribution.getPmf())"];
  v35  [label="endfor"];
  v36  [label="150:  mean += sample.getValue() * sample.getKey()"];
  v37  [label="151:  meanOfSquares += sample.getValue() * sample.getKey() * sample.getKey()"];
  v38  [label="154:  return meanOfSquares - mean * mean;"];
  v39  [label="164:  int getSupportLowerBound()"];
  v40  [label="165:  int min = Integer.MAX_VALUE"];
  v41  [label="166:  for (final Pair<Integer, Double> sample : innerDistribution.getPmf())"];
  v42  [label="endfor"];
  v43  [label="167:  if (sample.getKey() < min && sample.getValue() > 0)"];
  v44  [label="168:  min = sample.getKey()"];
  v45  [label="endif"];
  v46  [label="172:  return min;"];
  v47  [label="182:  int getSupportUpperBound()"];
  v48  [label="183:  int max = Integer.MIN_VALUE"];
  v49  [label="184:  for (final Pair<Integer, Double> sample : innerDistribution.getPmf())"];
  v50  [label="endfor"];
  v51  [label="185:  if (sample.getKey() > max && sample.getValue() > 0)"];
  v52  [label="186:  max = sample.getKey()"];
  v53  [label="endif"];
  v54  [label="190:  return max;"];
  v55  [label="200:  boolean isSupportConnected()"];
  v56  [label="201:  return true;"];
  v57  [label="208:  int sample()"];
  v58  [label="209:  return innerDistribution.sample();"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6  [label="True"];
  v5 -> v7  [label="False"];
  v7 -> v8;
  v8 -> v9;
  v9 -> v12  [label="False"];
  v9 -> v13  [label="True"];
  v13 -> v9;
  v12 -> v14;
  v15 -> v16;
  v17 -> v18;
  v18 -> v19;
  v19 -> v20  [label="False"];
  v19 -> v21  [label="True"];
  v21 -> v22  [label="True"];
  v22 -> v23;
  v21 -> v23  [label="False"];
  v23 -> v19;
  v20 -> v24;
  v25 -> v26;
  v26 -> v27;
  v27 -> v28  [label="False"];
  v27 -> v29  [label="True"];
  v29 -> v27;
  v28 -> v30;
  v31 -> v32;
  v32 -> v33;
  v33 -> v34;
  v34 -> v35  [label="False"];
  v34 -> v36  [label="True"];
  v36 -> v37;
  v37 -> v34;
  v35 -> v38;
  v39 -> v40;
  v40 -> v41;
  v41 -> v42  [label="False"];
  v41 -> v43  [label="True"];
  v43 -> v44  [label="True"];
  v44 -> v45;
  v43 -> v45  [label="False"];
  v45 -> v41;
  v42 -> v46;
  v47 -> v48;
  v48 -> v49;
  v49 -> v50  [label="False"];
  v49 -> v51  [label="True"];
  v51 -> v52  [label="True"];
  v52 -> v53;
  v51 -> v53  [label="False"];
  v53 -> v49;
  v50 -> v54;
  v55 -> v56;
  v57 -> v58;
  // end-of-graph
}
