digraph EnumeratedRealDistribution_CFG {
  // graph-vertices
  v1  [label="65:  EnumeratedRealDistribution (final double[] singletons, final double[] probabilities)"];
  v2  [label="68:  this(new Well19937c(), singletons, probabilities)"];
  v3  [label="85:  EnumeratedRealDistribution (final RandomGenerator rng, final double[] singletons, final double[] probabilities)"];
  v4  [label="89:  super(rng)"];
  v5  [label="90:  if (singletons.length != probabilities.length)"];
  v6  [label="91:  throw new DimensionMismatchException(probabilities.length, singletons.length)"];
  v7  [label="endif"];
  v8  [label="94:  List<Pair<Double, Double>> samples = new ArrayList<Pair<Double, Double>>(singletons.length)"];
  v9  [label="96:  for (  int i = 0 ; i < singletons.length ;   i++)"];
  v12  [label="endfor"];
  v13  [label="97:  samples.add(new Pair<Double, Double>(singletons[i], probabilities[i]))"];
  v14  [label="100:  innerDistribution = new EnumeratedDistribution<Double>(rng, samples)"];
  v15  [label="107:  double probability(final double x)"];
  v16  [label="108:  return innerDistribution.probability(x);"];
  v17  [label="120:  double density(final double x)"];
  v18  [label="121:  return probability(x);"];
  v19  [label="127:  double cumulativeProbability(final double x)"];
  v20  [label="128:  double probability = 0"];
  v21  [label="130:  for (final Pair<Double, Double> sample : innerDistribution.getPmf())"];
  v22  [label="endfor"];
  v23  [label="131:  if (sample.getKey() <= x)"];
  v24  [label="132:  probability += sample.getValue()"];
  v25  [label="endif"];
  v26  [label="136:  return probability;"];
  v27  [label="144:  double getNumericalMean()"];
  v28  [label="145:  double mean = 0"];
  v29  [label="147:  for (final Pair<Double, Double> sample : innerDistribution.getPmf())"];
  v30  [label="endfor"];
  v31  [label="148:  mean += sample.getValue() * sample.getKey()"];
  v32  [label="151:  return mean;"];
  v33  [label="159:  double getNumericalVariance()"];
  v34  [label="160:  double mean = 0"];
  v35  [label="161:  double meanOfSquares = 0"];
  v36  [label="163:  for (final Pair<Double, Double> sample : innerDistribution.getPmf())"];
  v37  [label="endfor"];
  v38  [label="164:  mean += sample.getValue() * sample.getKey()"];
  v39  [label="165:  meanOfSquares += sample.getValue() * sample.getKey() * sample.getKey()"];
  v40  [label="168:  return meanOfSquares - mean * mean;"];
  v41  [label="178:  double getSupportLowerBound()"];
  v42  [label="179:  double min = Double.POSITIVE_INFINITY"];
  v43  [label="180:  for (final Pair<Double, Double> sample : innerDistribution.getPmf())"];
  v44  [label="endfor"];
  v45  [label="181:  if (sample.getKey() < min && sample.getValue() > 0)"];
  v46  [label="182:  min = sample.getKey()"];
  v47  [label="endif"];
  v48  [label="186:  return min;"];
  v49  [label="196:  double getSupportUpperBound()"];
  v50  [label="197:  double max = Double.NEGATIVE_INFINITY"];
  v51  [label="198:  for (final Pair<Double, Double> sample : innerDistribution.getPmf())"];
  v52  [label="endfor"];
  v53  [label="199:  if (sample.getKey() > max && sample.getValue() > 0)"];
  v54  [label="200:  max = sample.getKey()"];
  v55  [label="endif"];
  v56  [label="204:  return max;"];
  v57  [label="214:  boolean isSupportLowerBoundInclusive()"];
  v58  [label="215:  return true;"];
  v59  [label="225:  boolean isSupportUpperBoundInclusive()"];
  v60  [label="226:  return true;"];
  v61  [label="236:  boolean isSupportConnected()"];
  v62  [label="237:  return true;"];
  v63  [label="244:  double sample()"];
  v64  [label="245:  return innerDistribution.sample();"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6  [label="True"];
  v5 -> v7  [label="False"];
  v7 -> v8;
  v8 -> v9;
  v9 -> v12  [label="False"];
  v9 -> v13  [label="True"];
  v13 -> v9;
  v12 -> v14;
  v15 -> v16;
  v17 -> v18;
  v19 -> v20;
  v20 -> v21;
  v21 -> v22  [label="False"];
  v21 -> v23  [label="True"];
  v23 -> v24  [label="True"];
  v24 -> v25;
  v23 -> v25  [label="False"];
  v25 -> v21;
  v22 -> v26;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30  [label="False"];
  v29 -> v31  [label="True"];
  v31 -> v29;
  v30 -> v32;
  v33 -> v34;
  v34 -> v35;
  v35 -> v36;
  v36 -> v37  [label="False"];
  v36 -> v38  [label="True"];
  v38 -> v39;
  v39 -> v36;
  v37 -> v40;
  v41 -> v42;
  v42 -> v43;
  v43 -> v44  [label="False"];
  v43 -> v45  [label="True"];
  v45 -> v46  [label="True"];
  v46 -> v47;
  v45 -> v47  [label="False"];
  v47 -> v43;
  v44 -> v48;
  v49 -> v50;
  v50 -> v51;
  v51 -> v52  [label="False"];
  v51 -> v53  [label="True"];
  v53 -> v54  [label="True"];
  v54 -> v55;
  v53 -> v55  [label="False"];
  v55 -> v51;
  v52 -> v56;
  v57 -> v58;
  v59 -> v60;
  v61 -> v62;
  v63 -> v64;
  // end-of-graph
}
