digraph ExponentialDistribution_CFG {
  // graph-vertices
  v1  [label="65:  static"];
  v2  [label="70:  final double LN2 = FastMath.log(2)"];
  v3  [label="71:  double qi = 0"];
  v4  [label="72:  int i = 1"];
  v5  [label="80:  final ResizableDoubleArray ra = new ResizableDoubleArray(20)"];
  v6  [label="82:  while (qi < 1)"];
  v7  [label="endwhile"];
  v8  [label="83:  qi += FastMath.pow(LN2, i) / CombinatoricsUtils.factorial(i)"];
  v9  [label="84:  ra.addElement(qi)"];
  v10  [label="85:  ++i"];
  v11  [label="88:  EXPONENTIAL_SA_QI = ra.getElements()"];
  v12  [label="95:  ExponentialDistribution (double mean)"];
  v13  [label="96:  this(mean, DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v14  [label="109:  ExponentialDistribution (double mean, double inverseCumAccuracy)"];
  v15  [label="110:  this(new Well19937c(), mean, inverseCumAccuracy)"];
  v16  [label="121:  ExponentialDistribution (RandomGenerator rng, double mean)"];
  v17  [label="123:  this(rng, mean, DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v18  [label="137:  ExponentialDistribution (RandomGenerator rng,  double mean,  double inverseCumAccuracy)"];
  v19  [label="141:  super(rng)"];
  v20  [label="143:  if (mean <= 0)"];
  v21  [label="144:  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean)"];
  v22  [label="endif"];
  v23  [label="146:  this.mean = mean"];
  v24  [label="147:  solverAbsoluteAccuracy = inverseCumAccuracy"];
  v25  [label="155:  double getMean()"];
  v26  [label="156:  return mean;"];
  v27  [label="160:  double density(double x)"];
  v28  [label="161:  if (x < 0)"];
  v29  [label="162:  return 0;"];
  v30  [label="endif"];
  v31  [label="164:  return FastMath.exp(-x / mean) / mean;"];
  v32  [label="177:  double cumulativeProbability(double x)"];
  v33  [label="178:  double ret"];
  v34  [label="179:  if (x <= 0.0)"];
  v35  [label="180:  ret = 0.0"];
  v36  [label="endif"];
  v37  [label="182:  ret = 1.0 - FastMath.exp(-x / mean)"];
  v38  [label="184:  return ret;"];
  v39  [label="194:  double inverseCumulativeProbability(double p)"];
  v40  [label="195:  double ret"];
  v41  [label="197:  if (p < 0.0 || p > 1.0)"];
  v42  [label="198:  throw new OutOfRangeException(p, 0.0, 1.0)"];
  v43  [label="endif"];
  v44  [label="199:  if (p == 1.0)"];
  v45  [label="200:  ret = Double.POSITIVE_INFINITY"];
  v46  [label="endif"];
  v47  [label="202:  ret = -mean * FastMath.log(1.0 - p)"];
  v48  [label="205:  return ret;"];
  v49  [label="220:  double sample()"];
  v50  [label="222:  double a = 0"];
  v51  [label="223:  double u = random.nextDouble()"];
  v52  [label="226:  while (u < 0.5)"];
  v53  [label="endwhile"];
  v54  [label="227:  a += EXPONENTIAL_SA_QI[0]"];
  v55  [label="228:  u *= 2"];
  v56  [label="232:  u += u - 1"];
  v57  [label="235:  if (u <= EXPONENTIAL_SA_QI[0])"];
  v58  [label="236:  return mean * (a + u);"];
  v59  [label="endif"];
  v60  [label="240:  int i = 0"];
  v61  [label="241:  double u2 = random.nextDouble()"];
  v62  [label="242:  double umin = u2"];
  v63  [label="245:  do"];
  v64  [label="254:  while (u > EXPONENTIAL_SA_QI[i])"];
  v65  [label="end-do-while"];
  v66  [label="246:  ++i"];
  v67  [label="247:  u2 = random.nextDouble()"];
  v68  [label="249:  if (u2 < umin)"];
  v69  [label="250:  umin = u2"];
  v70  [label="endif"];
  v71  [label="256:  return mean * (a + umin * EXPONENTIAL_SA_QI[0]);"];
  v72  [label="261:  double getSolverAbsoluteAccuracy()"];
  v73  [label="262:  return solverAbsoluteAccuracy;"];
  v74  [label="270:  double getNumericalMean()"];
  v75  [label="271:  return getMean();"];
  v76  [label="279:  double getNumericalVariance()"];
  v77  [label="280:  final double m = getMean()"];
  v78  [label="281:  return m * m;"];
  v79  [label="291:  double getSupportLowerBound()"];
  v80  [label="292:  return 0;"];
  v81  [label="303:  double getSupportUpperBound()"];
  v82  [label="304:  return Double.POSITIVE_INFINITY;"];
  v83  [label="308:  boolean isSupportLowerBoundInclusive()"];
  v84  [label="309:  return true;"];
  v85  [label="313:  boolean isSupportUpperBoundInclusive()"];
  v86  [label="314:  return false;"];
  v87  [label="324:  boolean isSupportConnected()"];
  v88  [label="325:  return true;"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7  [label="False"];
  v6 -> v8  [label="True"];
  v8 -> v9;
  v9 -> v10;
  v10 -> v6;
  v7 -> v11;
  v12 -> v13;
  v14 -> v15;
  v16 -> v17;
  v18 -> v19;
  v19 -> v20;
  v20 -> v21  [label="True"];
  v20 -> v22  [label="False"];
  v22 -> v23;
  v23 -> v24;
  v25 -> v26;
  v27 -> v28;
  v28 -> v29  [label="True"];
  v28 -> v30  [label="False"];
  v30 -> v31;
  v32 -> v33;
  v33 -> v34;
  v34 -> v35  [label="True"];
  v35 -> v36;
  v34 -> v37  [label="False"];
  v37 -> v36;
  v36 -> v38;
  v39 -> v40;
  v40 -> v41;
  v41 -> v42  [label="True"];
  v41 -> v44  [label="False"];
  v44 -> v45  [label="True"];
  v45 -> v46;
  v44 -> v47  [label="False"];
  v47 -> v46;
  v46 -> v43;
  v43 -> v48;
  v49 -> v50;
  v50 -> v51;
  v51 -> v52;
  v52 -> v53  [label="False"];
  v52 -> v54  [label="True"];
  v54 -> v55;
  v55 -> v52;
  v53 -> v56;
  v56 -> v57;
  v57 -> v58  [label="True"];
  v57 -> v59  [label="False"];
  v59 -> v60;
  v60 -> v61;
  v61 -> v62;
  v62 -> v63;
  v63 -> v66;
  v66 -> v67;
  v67 -> v68;
  v68 -> v69  [label="True"];
  v69 -> v70;
  v68 -> v70  [label="False"];
  v70 -> v64;
  v64 -> v63  [label="True"];
  v64 -> v65  [label="False"];
  v65 -> v71;
  v72 -> v73;
  v74 -> v75;
  v76 -> v77;
  v77 -> v78;
  v79 -> v80;
  v81 -> v82;
  v83 -> v84;
  v85 -> v86;
  v87 -> v88;
  // end-of-graph
}
