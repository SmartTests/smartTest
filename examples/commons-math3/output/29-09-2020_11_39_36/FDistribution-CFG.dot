digraph FDistribution_CFG {
  // graph-vertices
  v1  [label="62:  FDistribution (double numeratorDegreesOfFreedom,  double denominatorDegreesOfFreedom)"];
  v2  [label="65:  this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,  DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v3  [label="82:  FDistribution (double numeratorDegreesOfFreedom,  double denominatorDegreesOfFreedom,  double inverseCumAccuracy)"];
  v4  [label="86:  this(new Well19937c(), numeratorDegreesOfFreedom,  denominatorDegreesOfFreedom, inverseCumAccuracy)"];
  v5  [label="100:  FDistribution (RandomGenerator rng,  double numeratorDegreesOfFreedom,  double denominatorDegreesOfFreedom)"];
  v6  [label="104:  this(rng, numeratorDegreesOfFreedom, denominatorDegreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v7  [label="119:  FDistribution (RandomGenerator rng,  double numeratorDegreesOfFreedom,  double denominatorDegreesOfFreedom,  double inverseCumAccuracy)"];
  v8  [label="124:  super(rng)"];
  v9  [label="126:  if (numeratorDegreesOfFreedom <= 0)"];
  v10  [label="127:  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,  numeratorDegreesOfFreedom)"];
  v11  [label="endif"];
  v12  [label="130:  if (denominatorDegreesOfFreedom <= 0)"];
  v13  [label="131:  throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,  denominatorDegreesOfFreedom)"];
  v14  [label="endif"];
  v15  [label="134:  this.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom"];
  v16  [label="135:  this.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom"];
  v17  [label="136:  solverAbsoluteAccuracy = inverseCumAccuracy"];
  v18  [label="144:  double density(double x)"];
  v19  [label="145:  final double nhalf = numeratorDegreesOfFreedom / 2"];
  v20  [label="146:  final double mhalf = denominatorDegreesOfFreedom / 2"];
  v21  [label="147:  final double logx = FastMath.log(x)"];
  v22  [label="148:  final double logn = FastMath.log(numeratorDegreesOfFreedom)"];
  v23  [label="149:  final double logm = FastMath.log(denominatorDegreesOfFreedom)"];
  v24  [label="150:  final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +  denominatorDegreesOfFreedom)"];
  v25  [label="152:  return FastMath.exp(nhalf * logn + nhalf * logx - logx + mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf));"];
  v26  [label="168:  double cumulativeProbability(double x)"];
  v27  [label="169:  double ret"];
  v28  [label="170:  if (x <= 0)"];
  v29  [label="171:  ret = 0"];
  v30  [label="endif"];
  v31  [label="173:  double n = numeratorDegreesOfFreedom"];
  v32  [label="174:  double m = denominatorDegreesOfFreedom"];
  v33  [label="176:  ret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n, 0.5 * m)"];
  v34  [label="180:  return ret;"];
  v35  [label="188:  double getNumeratorDegreesOfFreedom()"];
  v36  [label="189:  return numeratorDegreesOfFreedom;"];
  v37  [label="197:  double getDenominatorDegreesOfFreedom()"];
  v38  [label="198:  return denominatorDegreesOfFreedom;"];
  v39  [label="203:  double getSolverAbsoluteAccuracy()"];
  v40  [label="204:  return solverAbsoluteAccuracy;"];
  v41  [label="216:  double getNumericalMean()"];
  v42  [label="217:  final double denominatorDF = getDenominatorDegreesOfFreedom()"];
  v43  [label="219:  if (denominatorDF > 2)"];
  v44  [label="220:  return denominatorDF / (denominatorDF - 2);"];
  v45  [label="endif"];
  v46  [label="223:  return Double.NaN;"];
  v47  [label="239:  double getNumericalVariance()"];
  v48  [label="240:  if (!numericalVarianceIsCalculated)"];
  v49  [label="241:  numericalVariance = calculateNumericalVariance()"];
  v50  [label="242:  numericalVarianceIsCalculated = true"];
  v51  [label="endif"];
  v52  [label="244:  return numericalVariance;"];
  v53  [label="252:  double calculateNumericalVariance()"];
  v54  [label="253:  final double denominatorDF = getDenominatorDegreesOfFreedom()"];
  v55  [label="255:  if (denominatorDF > 4)"];
  v56  [label="256:  final double numeratorDF = getNumeratorDegreesOfFreedom()"];
  v57  [label="257:  final double denomDFMinusTwo = denominatorDF - 2"];
  v58  [label="259:  return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /  ( (numeratorDF * (denomDFMinusTwo * denomDFMinusTwo) * (denominatorDF - 4)) );"];
  v59  [label="endif"];
  v60  [label="263:  return Double.NaN;"];
  v61  [label="273:  double getSupportLowerBound()"];
  v62  [label="274:  return 0;"];
  v63  [label="285:  double getSupportUpperBound()"];
  v64  [label="286:  return Double.POSITIVE_INFINITY;"];
  v65  [label="290:  boolean isSupportLowerBoundInclusive()"];
  v66  [label="291:  return false;"];
  v67  [label="295:  boolean isSupportUpperBoundInclusive()"];
  v68  [label="296:  return false;"];
  v69  [label="306:  boolean isSupportConnected()"];
  v70  [label="307:  return true;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v7 -> v8;
  v8 -> v9;
  v9 -> v10  [label="True"];
  v9 -> v11  [label="False"];
  v11 -> v12;
  v12 -> v13  [label="True"];
  v12 -> v14  [label="False"];
  v14 -> v15;
  v15 -> v16;
  v16 -> v17;
  v18 -> v19;
  v19 -> v20;
  v20 -> v21;
  v21 -> v22;
  v22 -> v23;
  v23 -> v24;
  v24 -> v25;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29  [label="True"];
  v29 -> v30;
  v28 -> v31  [label="False"];
  v31 -> v32;
  v32 -> v33;
  v33 -> v30;
  v30 -> v34;
  v35 -> v36;
  v37 -> v38;
  v39 -> v40;
  v41 -> v42;
  v42 -> v43;
  v43 -> v44  [label="True"];
  v43 -> v45  [label="False"];
  v45 -> v46;
  v47 -> v48;
  v48 -> v49  [label="True"];
  v49 -> v50;
  v50 -> v51;
  v48 -> v51  [label="False"];
  v51 -> v52;
  v53 -> v54;
  v54 -> v55;
  v55 -> v56  [label="True"];
  v56 -> v57;
  v57 -> v58;
  v55 -> v59  [label="False"];
  v59 -> v60;
  v61 -> v62;
  v63 -> v64;
  v65 -> v66;
  v67 -> v68;
  v69 -> v70;
  // end-of-graph
}
