digraph GammaDistribution_CFG {
  // graph-vertices
  v1  [label="92:  GammaDistribution (double shape, double scale)"];
  v2  [label="93:  this(shape, scale, DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v3  [label="109:  GammaDistribution (double shape, double scale, double inverseCumAccuracy)"];
  v4  [label="111:  this(new Well19937c(), shape, scale, inverseCumAccuracy)"];
  v5  [label="124:  GammaDistribution (RandomGenerator rng, double shape, double scale)"];
  v6  [label="126:  this(rng, shape, scale, DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v7  [label="142:  GammaDistribution (RandomGenerator rng,  double shape,  double scale,  double inverseCumAccuracy)"];
  v8  [label="147:  super(rng)"];
  v9  [label="149:  if (shape <= 0)"];
  v10  [label="150:  throw new NotStrictlyPositiveException(LocalizedFormats.SHAPE, shape)"];
  v11  [label="endif"];
  v12  [label="152:  if (scale <= 0)"];
  v13  [label="153:  throw new NotStrictlyPositiveException(LocalizedFormats.SCALE, scale)"];
  v14  [label="endif"];
  v15  [label="156:  this.shape = shape"];
  v16  [label="157:  this.scale = scale"];
  v17  [label="158:  this.solverAbsoluteAccuracy = inverseCumAccuracy"];
  v18  [label="159:  this.shiftedShape = shape + Gamma.LANCZOS_G + 0.5"];
  v19  [label="160:  final double aux = FastMath.E / (2.0 * FastMath.PI * shiftedShape)"];
  v20  [label="161:  this.densityPrefactor2 = shape * FastMath.sqrt(aux) / Gamma.lanczos(shape)"];
  v21  [label="162:  this.densityPrefactor1 = this.densityPrefactor2 / scale * FastMath.pow(shiftedShape, -shape) * FastMath.exp(shape + Gamma.LANCZOS_G)"];
  v22  [label="165:  this.minY = shape + Gamma.LANCZOS_G - FastMath.log(Double.MAX_VALUE)"];
  v23  [label="166:  this.maxLogY = FastMath.log(Double.MAX_VALUE) / (shape - 1.0)"];
  v24  [label="177:  double getAlpha()"];
  v25  [label="178:  return shape;"];
  v26  [label="187:  double getShape()"];
  v27  [label="188:  return shape;"];
  v28  [label="199:  double getBeta()"];
  v29  [label="200:  return scale;"];
  v30  [label="209:  double getScale()"];
  v31  [label="210:  return scale;"];
  v32  [label="214:  double density(double x)"];
  v33  [label="253:  if (x < 0)"];
  v34  [label="254:  return 0;"];
  v35  [label="endif"];
  v36  [label="256:  final double y = x / scale"];
  v37  [label="257:  if ((y <= minY) || (FastMath.log(y) >= maxLogY))"];
  v38  [label="261:  final double aux1 = (y - shiftedShape) / shiftedShape"];
  v39  [label="262:  final double aux2 = shape * (FastMath.log1p(aux1) - aux1)"];
  v40  [label="263:  final double aux3 = -y * (Gamma.LANCZOS_G + 0.5) / shiftedShape + Gamma.LANCZOS_G + aux2"];
  v41  [label="265:  return densityPrefactor2 / x * FastMath.exp(aux3);"];
  v42  [label="endif"];
  v43  [label="270:  return densityPrefactor1  * FastMath.exp(-y) * FastMath.pow(y, shape - 1);"];
  v44  [label="288:  double cumulativeProbability(double x)"];
  v45  [label="289:  double ret"];
  v46  [label="291:  if (x <= 0)"];
  v47  [label="292:  ret = 0"];
  v48  [label="endif"];
  v49  [label="294:  ret = Gamma.regularizedGammaP(shape, x / scale)"];
  v50  [label="297:  return ret;"];
  v51  [label="302:  double getSolverAbsoluteAccuracy()"];
  v52  [label="303:  return solverAbsoluteAccuracy;"];
  v53  [label="312:  double getNumericalMean()"];
  v54  [label="313:  return shape * scale;"];
  v55  [label="324:  double getNumericalVariance()"];
  v56  [label="325:  return shape * scale * scale;"];
  v57  [label="335:  double getSupportLowerBound()"];
  v58  [label="336:  return 0;"];
  v59  [label="347:  double getSupportUpperBound()"];
  v60  [label="348:  return Double.POSITIVE_INFINITY;"];
  v61  [label="352:  boolean isSupportLowerBoundInclusive()"];
  v62  [label="353:  return true;"];
  v63  [label="357:  boolean isSupportUpperBoundInclusive()"];
  v64  [label="358:  return false;"];
  v65  [label="368:  boolean isSupportConnected()"];
  v66  [label="369:  return true;"];
  v67  [label="388:  double sample()"];
  v68  [label="389:  if (shape < 1)"];
  v69  [label="392:  while (true)"];
  v70  [label="endwhile"];
  v71  [label="394:  final double u = random.nextDouble()"];
  v72  [label="395:  final double bGS = 1 + shape / FastMath.E"];
  v73  [label="396:  final double p = bGS * u"];
  v74  [label="398:  if (p <= 1)"];
  v75  [label="401:  final double x = FastMath.pow(p, 1 / shape)"];
  v76  [label="402:  final double u2 = random.nextDouble()"];
  v77  [label="404:  if (u2 > FastMath.exp(-x))"];
  v78  [label="406:  continue;"];
  v79  [label="endif"];
  v80  [label="408:  return scale * x;"];
  v81  [label="endif"];
  v82  [label="413:  final double x = -1 * FastMath.log((bGS - p) / shape)"];
  v83  [label="414:  final double u2 = random.nextDouble()"];
  v84  [label="416:  if (u2 > FastMath.pow(x, shape - 1))"];
  v85  [label="418:  continue;"];
  v86  [label="endif"];
  v87  [label="420:  return scale * x;"];
  v88  [label="endif"];
  v89  [label="428:  final double d = shape - 0.333333333333333333"];
  v90  [label="429:  final double c = 1 / (3 * FastMath.sqrt(d))"];
  v91  [label="431:  while (true)"];
  v92  [label="endwhile"];
  v93  [label="432:  final double x = random.nextGaussian()"];
  v94  [label="433:  final double v = (1 + c * x) * (1 + c * x) * (1 + c * x)"];
  v95  [label="435:  if (v <= 0)"];
  v96  [label="436:  continue;"];
  v97  [label="endif"];
  v98  [label="439:  final double x2 = x * x"];
  v99  [label="440:  final double u = random.nextDouble()"];
  v100  [label="443:  if (u < 1 - 0.0331 * x2 * x2)"];
  v101  [label="444:  return scale * d * v;"];
  v102  [label="endif"];
  v103  [label="447:  if (FastMath.log(u) < 0.5 * x2 + d * (1 - v + FastMath.log(v)))"];
  v104  [label="448:  return scale * d * v;"];
  v105  [label="endif"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v7 -> v8;
  v8 -> v9;
  v9 -> v10  [label="True"];
  v9 -> v11  [label="False"];
  v11 -> v12;
  v12 -> v13  [label="True"];
  v12 -> v14  [label="False"];
  v14 -> v15;
  v15 -> v16;
  v16 -> v17;
  v17 -> v18;
  v18 -> v19;
  v19 -> v20;
  v20 -> v21;
  v21 -> v22;
  v22 -> v23;
  v24 -> v25;
  v26 -> v27;
  v28 -> v29;
  v30 -> v31;
  v32 -> v33;
  v33 -> v34  [label="True"];
  v33 -> v35  [label="False"];
  v35 -> v36;
  v36 -> v37;
  v37 -> v38  [label="True"];
  v38 -> v39;
  v39 -> v40;
  v40 -> v41;
  v37 -> v42  [label="False"];
  v42 -> v43;
  v44 -> v45;
  v45 -> v46;
  v46 -> v47  [label="True"];
  v47 -> v48;
  v46 -> v49  [label="False"];
  v49 -> v48;
  v48 -> v50;
  v51 -> v52;
  v53 -> v54;
  v55 -> v56;
  v57 -> v58;
  v59 -> v60;
  v61 -> v62;
  v63 -> v64;
  v65 -> v66;
  v67 -> v68;
  v68 -> v69  [label="True"];
  v69 -> v70  [label="False"];
  v69 -> v71  [label="True"];
  v71 -> v72;
  v72 -> v73;
  v73 -> v74;
  v74 -> v75  [label="True"];
  v75 -> v76;
  v76 -> v77;
  v77 -> v78  [label="True"];
  v78 -> v69;
  v77 -> v80  [label="False"];
  v79 -> v81;
  v74 -> v82  [label="False"];
  v82 -> v83;
  v83 -> v84;
  v84 -> v85  [label="True"];
  v85 -> v69;
  v84 -> v87  [label="False"];
  v86 -> v81;
  v81 -> v69;
  v70 -> v88;
  v68 -> v88  [label="False"];
  v88 -> v89;
  v89 -> v90;
  v90 -> v91;
  v91 -> v92  [label="False"];
  v91 -> v93  [label="True"];
  v93 -> v94;
  v94 -> v95;
  v95 -> v96  [label="True"];
  v96 -> v91;
  v95 -> v97  [label="False"];
  v97 -> v98;
  v98 -> v99;
  v99 -> v100;
  v100 -> v101  [label="True"];
  v100 -> v102  [label="False"];
  v102 -> v103;
  v103 -> v104  [label="True"];
  v103 -> v105  [label="False"];
  v105 -> v91;
  // end-of-graph
}
