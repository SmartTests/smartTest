digraph GeometricDistribution_CFG {
  // graph-vertices
  v1  [label="46:  GeometricDistribution (double p)"];
  v2  [label="47:  this(new Well19937c(), p)"];
  v3  [label="57:  GeometricDistribution (RandomGenerator rng, double p)"];
  v4  [label="58:  super(rng)"];
  v5  [label="60:  if (p <= 0 || p > 1)"];
  v6  [label="61:  throw new OutOfRangeException(LocalizedFormats.OUT_OF_RANGE_LEFT, p, 0, 1)"];
  v7  [label="endif"];
  v8  [label="64:  probabilityOfSuccess = p"];
  v9  [label="72:  double getProbabilityOfSuccess()"];
  v10  [label="73:  return probabilityOfSuccess;"];
  v11  [label="77:  double probability(int x)"];
  v12  [label="78:  double ret"];
  v13  [label="79:  if (x < 0)"];
  v14  [label="80:  ret = 0.0"];
  v15  [label="endif"];
  v16  [label="82:  final double p = probabilityOfSuccess"];
  v17  [label="83:  ret = FastMath.pow(1 - p, x) * p"];
  v18  [label="85:  return ret;"];
  v19  [label="89:  double cumulativeProbability(int x)"];
  v20  [label="90:  double ret"];
  v21  [label="91:  if (x < 0)"];
  v22  [label="92:  ret = 0.0"];
  v23  [label="endif"];
  v24  [label="94:  final double p = probabilityOfSuccess"];
  v25  [label="95:  ret = 1.0 - FastMath.pow(1 - p, x + 1)"];
  v26  [label="97:  return ret;"];
  v27  [label="105:  double getNumericalMean()"];
  v28  [label="106:  final double p = probabilityOfSuccess"];
  v29  [label="107:  return (1 - p) / p;"];
  v30  [label="116:  double getNumericalVariance()"];
  v31  [label="117:  final double p = probabilityOfSuccess"];
  v32  [label="118:  return (1 - p) / (p * p);"];
  v33  [label="128:  int getSupportLowerBound()"];
  v34  [label="129:  return 0;"];
  v35  [label="140:  int getSupportUpperBound()"];
  v36  [label="141:  return Integer.MAX_VALUE;"];
  v37  [label="151:  boolean isSupportConnected()"];
  v38  [label="152:  return true;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6  [label="True"];
  v5 -> v7  [label="False"];
  v7 -> v8;
  v9 -> v10;
  v11 -> v12;
  v12 -> v13;
  v13 -> v14  [label="True"];
  v14 -> v15;
  v13 -> v16  [label="False"];
  v16 -> v17;
  v17 -> v15;
  v15 -> v18;
  v19 -> v20;
  v20 -> v21;
  v21 -> v22  [label="True"];
  v22 -> v23;
  v21 -> v24  [label="False"];
  v24 -> v25;
  v25 -> v23;
  v23 -> v26;
  v27 -> v28;
  v28 -> v29;
  v30 -> v31;
  v31 -> v32;
  v33 -> v34;
  v35 -> v36;
  v37 -> v38;
  // end-of-graph
}
