digraph HypergeometricDistribution_CFG {
  // graph-vertices
  v1  [label="61:  HypergeometricDistribution (int populationSize, int numberOfSuccesses, int sampleSize)"];
  v2  [label="63:  this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize)"];
  v3  [label="79:  HypergeometricDistribution (RandomGenerator rng, int populationSize, int numberOfSuccesses, int sampleSize)"];
  v4  [label="84:  super(rng)"];
  v5  [label="86:  if (populationSize <= 0)"];
  v6  [label="87:  throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,  populationSize)"];
  v7  [label="endif"];
  v8  [label="90:  if (numberOfSuccesses < 0)"];
  v9  [label="91:  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  numberOfSuccesses)"];
  v10  [label="endif"];
  v11  [label="94:  if (sampleSize < 0)"];
  v12  [label="95:  throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize)"];
  v13  [label="endif"];
  v14  [label="99:  if (numberOfSuccesses > populationSize)"];
  v15  [label="100:  throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, populationSize, true)"];
  v16  [label="endif"];
  v17  [label="103:  if (sampleSize > populationSize)"];
  v18  [label="104:  throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, sampleSize, populationSize, true)"];
  v19  [label="endif"];
  v20  [label="108:  this.numberOfSuccesses = numberOfSuccesses"];
  v21  [label="109:  this.populationSize = populationSize"];
  v22  [label="110:  this.sampleSize = sampleSize"];
  v23  [label="114:  double cumulativeProbability(int x)"];
  v24  [label="115:  double ret"];
  v25  [label="117:  int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize)"];
  v26  [label="118:  if (x < domain[0])"];
  v27  [label="119:  ret = 0.0"];
  v28  [label="endif"];
  v29  [label="120:  if (x >= domain[1])"];
  v30  [label="121:  ret = 1.0"];
  v31  [label="endif"];
  v32  [label="123:  ret = innerCumulativeProbability(domain[0], x, 1)"];
  v33  [label="126:  return ret;"];
  v34  [label="138:  int[] getDomain(int n, int m, int k)"];
  v35  [label="139:  return new int[] { getLowerDomain(n, m, k), getUpperDomain(m, k) };"];
  v36  [label="151:  int getLowerDomain(int n, int m, int k)"];
  v37  [label="152:  return FastMath.max(0, m - (n - k));"];
  v38  [label="160:  int getNumberOfSuccesses()"];
  v39  [label="161:  return numberOfSuccesses;"];
  v40  [label="169:  int getPopulationSize()"];
  v41  [label="170:  return populationSize;"];
  v42  [label="178:  int getSampleSize()"];
  v43  [label="179:  return sampleSize;"];
  v44  [label="190:  int getUpperDomain(int m, int k)"];
  v45  [label="191:  return FastMath.min(k, m);"];
  v46  [label="195:  double probability(int x)"];
  v47  [label="196:  double ret"];
  v48  [label="198:  int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize)"];
  v49  [label="199:  if (x < domain[0] || x > domain[1])"];
  v50  [label="200:  ret = 0.0"];
  v51  [label="endif"];
  v52  [label="202:  double p = (double) sampleSize / (double) populationSize"];
  v53  [label="203:  double q = (double) (populationSize - sampleSize) / (double) populationSize"];
  v54  [label="204:  double p1 = SaddlePointExpansion.logBinomialProbability(x, numberOfSuccesses, p, q)"];
  v55  [label="206:  double p2 = SaddlePointExpansion.logBinomialProbability(sampleSize - x, populationSize - numberOfSuccesses, p, q)"];
  v56  [label="209:  double p3 = SaddlePointExpansion.logBinomialProbability(sampleSize, populationSize, p, q)"];
  v57  [label="211:  ret = FastMath.exp(p1 + p2 - p3)"];
  v58  [label="214:  return ret;"];
  v59  [label="224:  double upperCumulativeProbability(int x)"];
  v60  [label="225:  double ret"];
  v61  [label="227:  final int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize)"];
  v62  [label="228:  if (x <= domain[0])"];
  v63  [label="229:  ret = 1.0"];
  v64  [label="endif"];
  v65  [label="230:  if (x > domain[1])"];
  v66  [label="231:  ret = 0.0"];
  v67  [label="endif"];
  v68  [label="233:  ret = innerCumulativeProbability(domain[1], x, -1)"];
  v69  [label="236:  return ret;"];
  v70  [label="252:  double innerCumulativeProbability(int x0, int x1, int dx)"];
  v71  [label="253:  double ret = probability(x0)"];
  v72  [label="254:  while (x0 != x1)"];
  v73  [label="endwhile"];
  v74  [label="255:  x0 += dx"];
  v75  [label="256:  ret += probability(x0)"];
  v76  [label="258:  return ret;"];
  v77  [label="267:  double getNumericalMean()"];
  v78  [label="268:  return getSampleSize() * (getNumberOfSuccesses() / (double) getPopulationSize());"];
  v79  [label="278:  double getNumericalVariance()"];
  v80  [label="279:  if (!numericalVarianceIsCalculated)"];
  v81  [label="280:  numericalVariance = calculateNumericalVariance()"];
  v82  [label="281:  numericalVarianceIsCalculated = true"];
  v83  [label="endif"];
  v84  [label="283:  return numericalVariance;"];
  v85  [label="291:  double calculateNumericalVariance()"];
  v86  [label="292:  final double N = getPopulationSize()"];
  v87  [label="293:  final double m = getNumberOfSuccesses()"];
  v88  [label="294:  final double n = getSampleSize()"];
  v89  [label="295:  return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));"];
  v90  [label="307:  int getSupportLowerBound()"];
  v91  [label="308:  return FastMath.max(0, getSampleSize() + getNumberOfSuccesses() - getPopulationSize());"];
  v92  [label="320:  int getSupportUpperBound()"];
  v93  [label="321:  return FastMath.min(getNumberOfSuccesses(), getSampleSize());"];
  v94  [label="331:  boolean isSupportConnected()"];
  v95  [label="332:  return true;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6  [label="True"];
  v5 -> v7  [label="False"];
  v7 -> v8;
  v8 -> v9  [label="True"];
  v8 -> v10  [label="False"];
  v10 -> v11;
  v11 -> v12  [label="True"];
  v11 -> v13  [label="False"];
  v13 -> v14;
  v14 -> v15  [label="True"];
  v14 -> v16  [label="False"];
  v16 -> v17;
  v17 -> v18  [label="True"];
  v17 -> v19  [label="False"];
  v19 -> v20;
  v20 -> v21;
  v21 -> v22;
  v23 -> v24;
  v24 -> v25;
  v25 -> v26;
  v26 -> v27  [label="True"];
  v27 -> v28;
  v26 -> v29  [label="False"];
  v29 -> v30  [label="True"];
  v30 -> v31;
  v29 -> v32  [label="False"];
  v32 -> v31;
  v31 -> v28;
  v28 -> v33;
  v34 -> v35;
  v36 -> v37;
  v38 -> v39;
  v40 -> v41;
  v42 -> v43;
  v44 -> v45;
  v46 -> v47;
  v47 -> v48;
  v48 -> v49;
  v49 -> v50  [label="True"];
  v50 -> v51;
  v49 -> v52  [label="False"];
  v52 -> v53;
  v53 -> v54;
  v54 -> v55;
  v55 -> v56;
  v56 -> v57;
  v57 -> v51;
  v51 -> v58;
  v59 -> v60;
  v60 -> v61;
  v61 -> v62;
  v62 -> v63  [label="True"];
  v63 -> v64;
  v62 -> v65  [label="False"];
  v65 -> v66  [label="True"];
  v66 -> v67;
  v65 -> v68  [label="False"];
  v68 -> v67;
  v67 -> v64;
  v64 -> v69;
  v70 -> v71;
  v71 -> v72;
  v72 -> v73  [label="False"];
  v72 -> v74  [label="True"];
  v74 -> v75;
  v75 -> v72;
  v73 -> v76;
  v77 -> v78;
  v79 -> v80;
  v80 -> v81  [label="True"];
  v81 -> v82;
  v82 -> v83;
  v80 -> v83  [label="False"];
  v83 -> v84;
  v85 -> v86;
  v86 -> v87;
  v87 -> v88;
  v88 -> v89;
  v90 -> v91;
  v92 -> v93;
  v94 -> v95;
  // end-of-graph
}
