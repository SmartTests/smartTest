digraph KolmogorovSmirnovDistribution_CFG {
  // graph-vertices
  v1  [label="84:  KolmogorovSmirnovDistribution (int n)"];
  v2  [label="86:  if (n <= 0)"];
  v3  [label="87:  throw new NotStrictlyPositiveException(LocalizedFormats.NOT_POSITIVE_NUMBER_OF_SAMPLES, n)"];
  v4  [label="endif"];
  v5  [label="90:  this.n = n"];
  v6  [label="108:  double cdf(double d)"];
  v7  [label="109:  return this.cdf(d, false);"];
  v8  [label="128:  double cdfExact(double d)"];
  v9  [label="129:  return this.cdf(d, true);"];
  v10  [label="149:  double cdf(double d, boolean exact)"];
  v11  [label="151:  final double ninv = 1 / ((double) n)"];
  v12  [label="152:  final double ninvhalf = 0.5 * ninv"];
  v13  [label="154:  if (d <= ninvhalf)"];
  v14  [label="156:  return 0;"];
  v15  [label="endif"];
  v16  [label="158:  if (ninvhalf < d && d <= ninv)"];
  v17  [label="160:  double res = 1"];
  v18  [label="161:  double f = 2 * d - ninv"];
  v19  [label="164:  for (  int i = 1 ; i <= n ;   ++i)"];
  v22  [label="endfor"];
  v23  [label="165:  res *= i * f"];
  v24  [label="168:  return res;"];
  v25  [label="endif"];
  v26  [label="170:  if (1 - ninv <= d && d < 1)"];
  v27  [label="172:  return 1 - 2 * Math.pow(1 - d, n);"];
  v28  [label="endif"];
  v29  [label="174:  if (1 <= d)"];
  v30  [label="176:  return 1;"];
  v31  [label="endif"];
  v32  [label="179:  return exact ? exactK(d) : roundedK(d);"];
  v33  [label="194:  double exactK(double d)"];
  v34  [label="196:  final int k = (int) Math.ceil(n * d)"];
  v35  [label="198:  final FieldMatrix<BigFraction> H = this.createH(d)"];
  v36  [label="199:  final FieldMatrix<BigFraction> Hpower = H.power(n)"];
  v37  [label="201:  BigFraction pFrac = Hpower.getEntry(k - 1, k - 1)"];
  v38  [label="203:  for (  int i = 1 ; i <= n ;   ++i)"];
  v41  [label="endfor"];
  v42  [label="204:  pFrac = pFrac.multiply(i).divide(n)"];
  v43  [label="212:  return pFrac.bigDecimalValue(20, BigDecimal.ROUND_HALF_UP).doubleValue();"];
  v44  [label="226:  double roundedK(double d)"];
  v45  [label="228:  final int k = (int) Math.ceil(n * d)"];
  v46  [label="229:  final FieldMatrix<BigFraction> HBigFraction = this.createH(d)"];
  v47  [label="230:  final int m = HBigFraction.getRowDimension()"];
  v48  [label="236:  final RealMatrix H = new Array2DRowRealMatrix(m, m)"];
  v49  [label="238:  for (  int i = 0 ; i < m ;   ++i)"];
  v52  [label="endfor"];
  v53  [label="239:  for (  int j = 0 ; j < m ;   ++j)"];
  v56  [label="endfor"];
  v57  [label="240:  H.setEntry(i, j, HBigFraction.getEntry(i, j).doubleValue())"];
  v58  [label="244:  final RealMatrix Hpower = H.power(n)"];
  v59  [label="246:  double pFrac = Hpower.getEntry(k - 1, k - 1)"];
  v60  [label="248:  for (  int i = 1 ; i <= n ;   ++i)"];
  v63  [label="endfor"];
  v64  [label="249:  pFrac *= (double) i / (double) n"];
  v65  [label="252:  return pFrac;"];
  v66  [label="266:  FieldMatrix<BigFraction> createH(double d)"];
  v67  [label="269:  int k = (int) Math.ceil(n * d)"];
  v68  [label="271:  int m = 2 * k - 1"];
  v69  [label="272:  double hDouble = k - n * d"];
  v70  [label="274:  if (hDouble >= 1)"];
  v71  [label="275:  throw new NumberIsTooLargeException(hDouble, 1.0, false)"];
  v72  [label="endif"];
  v73  [label="278:  BigFraction h = null"];
  v74  [label="280:  try"];
  v75  [label="end-try"];
  v76  [label="281:  h = new BigFraction(hDouble, 1.0e-20, 10000)"];
  v77  [label="end-catch"];
  v78  [label="282:  catch (FractionConversionException e1)"];
  v79  [label="283:  try"];
  v80  [label="end-try"];
  v81  [label="284:  h = new BigFraction(hDouble, 1.0e-10, 10000)"];
  v82  [label="end-catch"];
  v83  [label="285:  catch (FractionConversionException e2)"];
  v84  [label="286:  h = new BigFraction(hDouble, 1.0e-5, 10000)"];
  v85  [label="290:  final BigFraction[][] Hdata = new BigFraction[m][m]"];
  v86  [label="295:  for (  int i = 0 ; i < m ;   ++i)"];
  v89  [label="endfor"];
  v90  [label="296:  for (  int j = 0 ; j < m ;   ++j)"];
  v93  [label="endfor"];
  v94  [label="297:  if (i - j + 1 < 0)"];
  v95  [label="298:  Hdata[i][j] = BigFraction.ZERO"];
  v96  [label="endif"];
  v97  [label="300:  Hdata[i][j] = BigFraction.ONE"];
  v98  [label="309:  final BigFraction[] hPowers = new BigFraction[m]"];
  v99  [label="310:  hPowers[0] = h"];
  v100  [label="311:  for (  int i = 1 ; i < m ;   ++i)"];
  v103  [label="endfor"];
  v104  [label="312:  hPowers[i] = h.multiply(hPowers[i - 1])"];
  v105  [label="318:  for (  int i = 0 ; i < m ;   ++i)"];
  v108  [label="endfor"];
  v109  [label="319:  Hdata[i][0] = Hdata[i][0].subtract(hPowers[i])"];
  v110  [label="320:  Hdata[m - 1][i] = Hdata[m - 1][i].subtract(hPowers[m - i - 1])"];
  v111  [label="328:  if (h.compareTo(BigFraction.ONE_HALF) == 1)"];
  v112  [label="329:  Hdata[m - 1][0] = Hdata[m - 1][0].add(h.multiply(2).subtract(1).pow(m))"];
  v113  [label="endif"];
  v114  [label="343:  for (  int i = 0 ; i < m ;   ++i)"];
  v117  [label="endfor"];
  v118  [label="344:  for (  int j = 0 ; j < i + 1 ;   ++j)"];
  v121  [label="endfor"];
  v122  [label="345:  if (i - j + 1 > 0)"];
  v123  [label="346:  for (  int g = 2 ; g <= i - j + 1 ;   ++g)"];
  v126  [label="endfor"];
  v127  [label="347:  Hdata[i][j] = Hdata[i][j].divide(g)"];
  v128  [label="endif"];
  v129  [label="353:  return new Array2DRowFieldMatrix<BigFraction>(BigFractionField.getInstance(), Hdata);"];
  // graph-edges
  v1 -> v2;
  v2 -> v3  [label="True"];
  v2 -> v4  [label="False"];
  v4 -> v5;
  v6 -> v7;
  v8 -> v9;
  v10 -> v11;
  v11 -> v12;
  v12 -> v13;
  v13 -> v14  [label="True"];
  v13 -> v16  [label="False"];
  v16 -> v17  [label="True"];
  v17 -> v18;
  v18 -> v19;
  v19 -> v22  [label="False"];
  v19 -> v23  [label="True"];
  v23 -> v19;
  v22 -> v24;
  v16 -> v26  [label="False"];
  v26 -> v27  [label="True"];
  v26 -> v29  [label="False"];
  v29 -> v30  [label="True"];
  v29 -> v31  [label="False"];
  v31 -> v28;
  v28 -> v25;
  v25 -> v15;
  v15 -> v32;
  v33 -> v34;
  v34 -> v35;
  v35 -> v36;
  v36 -> v37;
  v37 -> v38;
  v38 -> v41  [label="False"];
  v38 -> v42  [label="True"];
  v42 -> v38;
  v41 -> v43;
  v44 -> v45;
  v45 -> v46;
  v46 -> v47;
  v47 -> v48;
  v48 -> v49;
  v49 -> v52  [label="False"];
  v49 -> v53  [label="True"];
  v53 -> v56  [label="False"];
  v53 -> v57  [label="True"];
  v57 -> v53;
  v56 -> v49;
  v52 -> v58;
  v58 -> v59;
  v59 -> v60;
  v60 -> v63  [label="False"];
  v60 -> v64  [label="True"];
  v64 -> v60;
  v63 -> v65;
  v66 -> v67;
  v67 -> v68;
  v68 -> v69;
  v69 -> v70;
  v70 -> v71  [label="True"];
  v70 -> v72  [label="False"];
  v72 -> v73;
  v73 -> v74;
  v74 -> v76;
  v76 -> v75;
  v75 -> v78  [label="Throws"];
  v78 -> v79;
  v79 -> v81;
  v81 -> v80;
  v80 -> v83  [label="Throws"];
  v83 -> v84;
  v84 -> v82;
  v82 -> v80;
  v80 -> v77;
  v77 -> v75;
  v75 -> v85;
  v85 -> v86;
  v86 -> v89  [label="False"];
  v86 -> v90  [label="True"];
  v90 -> v93  [label="False"];
  v90 -> v94  [label="True"];
  v94 -> v95  [label="True"];
  v95 -> v96;
  v94 -> v97  [label="False"];
  v97 -> v96;
  v96 -> v90;
  v93 -> v86;
  v89 -> v98;
  v98 -> v99;
  v99 -> v100;
  v100 -> v103  [label="False"];
  v100 -> v104  [label="True"];
  v104 -> v100;
  v103 -> v105;
  v105 -> v108  [label="False"];
  v105 -> v109  [label="True"];
  v109 -> v110;
  v110 -> v105;
  v108 -> v111;
  v111 -> v112  [label="True"];
  v112 -> v113;
  v111 -> v113  [label="False"];
  v113 -> v114;
  v114 -> v117  [label="False"];
  v114 -> v118  [label="True"];
  v118 -> v121  [label="False"];
  v118 -> v122  [label="True"];
  v122 -> v123  [label="True"];
  v123 -> v126  [label="False"];
  v123 -> v127  [label="True"];
  v127 -> v123;
  v126 -> v128;
  v122 -> v128  [label="False"];
  v128 -> v118;
  v121 -> v114;
  v117 -> v129;
  // end-of-graph
}
