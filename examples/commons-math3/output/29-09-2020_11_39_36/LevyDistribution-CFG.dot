digraph LevyDistribution_CFG {
  // graph-vertices
  v1  [label="51:  LevyDistribution (final RandomGenerator rng, final double mu, final double c)"];
  v2  [label="52:  super(rng)"];
  v3  [label="53:  this.mu  = mu"];
  v4  [label="54:  this.c = c"];
  v5  [label="55:  this.halfC = 0.5 * c"];
  v6  [label="72:  double density(final double x)"];
  v7  [label="73:  if (x < mu)"];
  v8  [label="74:  return Double.NaN;"];
  v9  [label="endif"];
  v10  [label="77:  final double delta = x - mu"];
  v11  [label="78:  final double f = halfC / delta"];
  v12  [label="79:  return FastMath.sqrt(f / FastMath.PI) * FastMath.exp(-f) /delta;"];
  v13  [label="90:  double cumulativeProbability(final double x)"];
  v14  [label="91:  if (x < mu)"];
  v15  [label="92:  return Double.NaN;"];
  v16  [label="endif"];
  v17  [label="94:  return Erf.erfc(FastMath.sqrt(halfC / (x - mu)));"];
  v18  [label="99:  double inverseCumulativeProbability(final double p)"];
  v19  [label="100:  if (p < 0.0 || p > 1.0)"];
  v20  [label="101:  throw new OutOfRangeException(p, 0, 1)"];
  v21  [label="endif"];
  v22  [label="103:  final double t = Erf.erfcInv(p)"];
  v23  [label="104:  return mu + halfC / (t * t);"];
  v24  [label="110:  double getScale()"];
  v25  [label="111:  return c;"];
  v26  [label="117:  double getLocation()"];
  v27  [label="118:  return mu;"];
  v28  [label="122:  double getNumericalMean()"];
  v29  [label="123:  return Double.POSITIVE_INFINITY;"];
  v30  [label="127:  double getNumericalVariance()"];
  v31  [label="128:  return Double.POSITIVE_INFINITY;"];
  v32  [label="132:  double getSupportLowerBound()"];
  v33  [label="133:  return mu;"];
  v34  [label="137:  double getSupportUpperBound()"];
  v35  [label="138:  return Double.POSITIVE_INFINITY;"];
  v36  [label="142:  boolean isSupportLowerBoundInclusive()"];
  v37  [label="145:  return false;"];
  v38  [label="149:  boolean isSupportUpperBoundInclusive()"];
  v39  [label="151:  return false;"];
  v40  [label="155:  boolean isSupportConnected()"];
  v41  [label="156:  return true;"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4;
  v4 -> v5;
  v6 -> v7;
  v7 -> v8  [label="True"];
  v7 -> v9  [label="False"];
  v9 -> v10;
  v10 -> v11;
  v11 -> v12;
  v13 -> v14;
  v14 -> v15  [label="True"];
  v14 -> v16  [label="False"];
  v16 -> v17;
  v18 -> v19;
  v19 -> v20  [label="True"];
  v19 -> v21  [label="False"];
  v21 -> v22;
  v22 -> v23;
  v24 -> v25;
  v26 -> v27;
  v28 -> v29;
  v30 -> v31;
  v32 -> v33;
  v34 -> v35;
  v36 -> v37;
  v38 -> v39;
  v40 -> v41;
  // end-of-graph
}
