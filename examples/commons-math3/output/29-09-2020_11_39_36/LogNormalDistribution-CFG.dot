digraph LogNormalDistribution_CFG {
  // graph-vertices
  v1  [label="85:  LogNormalDistribution ()"];
  v2  [label="86:  this(0, 1)"];
  v3  [label="96:  LogNormalDistribution (double scale, double shape)"];
  v4  [label="98:  this(scale, shape, DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v5  [label="110:  LogNormalDistribution (double scale, double shape, double inverseCumAccuracy)"];
  v6  [label="112:  this(new Well19937c(), scale, shape, inverseCumAccuracy)"];
  v7  [label="124:  LogNormalDistribution (RandomGenerator rng, double scale, double shape)"];
  v8  [label="126:  this(rng, scale, shape, DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v9  [label="139:  LogNormalDistribution (RandomGenerator rng,  double scale,  double shape,  double inverseCumAccuracy)"];
  v10  [label="144:  super(rng)"];
  v11  [label="146:  if (shape <= 0)"];
  v12  [label="147:  throw new NotStrictlyPositiveException(LocalizedFormats.SHAPE, shape)"];
  v13  [label="endif"];
  v14  [label="150:  this.scale = scale"];
  v15  [label="151:  this.shape = shape"];
  v16  [label="152:  this.solverAbsoluteAccuracy = inverseCumAccuracy"];
  v17  [label="160:  double getScale()"];
  v18  [label="161:  return scale;"];
  v19  [label="169:  double getShape()"];
  v20  [label="170:  return shape;"];
  v21  [label="184:  double density(double x)"];
  v22  [label="185:  if (x <= 0)"];
  v23  [label="186:  return 0;"];
  v24  [label="endif"];
  v25  [label="188:  final double x0 = FastMath.log(x) - scale"];
  v26  [label="189:  final double x1 = x0 / shape"];
  v27  [label="190:  return FastMath.exp(-0.5 * x1 * x1) / (shape * SQRT2PI * x);"];
  v28  [label="208:  double cumulativeProbability(double x)"];
  v29  [label="209:  if (x <= 0)"];
  v30  [label="210:  return 0;"];
  v31  [label="endif"];
  v32  [label="212:  final double dev = FastMath.log(x) - scale"];
  v33  [label="213:  if (FastMath.abs(dev) > 40 * shape)"];
  v34  [label="214:  return dev < 0 ? 0.0d : 1.0d;"];
  v35  [label="endif"];
  v36  [label="216:  return 0.5 + 0.5 * Erf.erf(dev / (shape * SQRT2));"];
  v37  [label="225:  double cumulativeProbability(double x0, double x1)"];
  v38  [label="227:  return probability(x0, x1);"];
  v39  [label="232:  double probability(double x0, double x1)"];
  v40  [label="235:  if (x0 > x1)"];
  v41  [label="236:  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, x0, x1, true)"];
  v42  [label="endif"];
  v43  [label="239:  if (x0 <= 0 || x1 <= 0)"];
  v44  [label="240:  return super.probability(x0, x1);"];
  v45  [label="endif"];
  v46  [label="242:  final double denom = shape * SQRT2"];
  v47  [label="243:  final double v0 = (FastMath.log(x0) - scale) / denom"];
  v48  [label="244:  final double v1 = (FastMath.log(x1) - scale) / denom"];
  v49  [label="245:  return 0.5 * Erf.erf(v0, v1);"];
  v50  [label="250:  double getSolverAbsoluteAccuracy()"];
  v51  [label="251:  return solverAbsoluteAccuracy;"];
  v52  [label="260:  double getNumericalMean()"];
  v53  [label="261:  double s = shape"];
  v54  [label="262:  return FastMath.exp(scale + (s * s / 2));"];
  v55  [label="271:  double getNumericalVariance()"];
  v56  [label="272:  final double s = shape"];
  v57  [label="273:  final double ss = s * s"];
  v58  [label="274:  return (FastMath.exp(ss) - 1) * FastMath.exp(2 * scale + ss);"];
  v59  [label="284:  double getSupportLowerBound()"];
  v60  [label="285:  return 0;"];
  v61  [label="297:  double getSupportUpperBound()"];
  v62  [label="298:  return Double.POSITIVE_INFINITY;"];
  v63  [label="302:  boolean isSupportLowerBoundInclusive()"];
  v64  [label="303:  return true;"];
  v65  [label="307:  boolean isSupportUpperBoundInclusive()"];
  v66  [label="308:  return false;"];
  v67  [label="318:  boolean isSupportConnected()"];
  v68  [label="319:  return true;"];
  v69  [label="324:  double sample()"];
  v70  [label="325:  final double n = random.nextGaussian()"];
  v71  [label="326:  return FastMath.exp(scale + shape * n);"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v7 -> v8;
  v9 -> v10;
  v10 -> v11;
  v11 -> v12  [label="True"];
  v11 -> v13  [label="False"];
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v17 -> v18;
  v19 -> v20;
  v21 -> v22;
  v22 -> v23  [label="True"];
  v22 -> v24  [label="False"];
  v24 -> v25;
  v25 -> v26;
  v26 -> v27;
  v28 -> v29;
  v29 -> v30  [label="True"];
  v29 -> v31  [label="False"];
  v31 -> v32;
  v32 -> v33;
  v33 -> v34  [label="True"];
  v33 -> v35  [label="False"];
  v35 -> v36;
  v37 -> v38;
  v39 -> v40;
  v40 -> v41  [label="True"];
  v40 -> v42  [label="False"];
  v42 -> v43;
  v43 -> v44  [label="True"];
  v43 -> v45  [label="False"];
  v45 -> v46;
  v46 -> v47;
  v47 -> v48;
  v48 -> v49;
  v50 -> v51;
  v52 -> v53;
  v53 -> v54;
  v55 -> v56;
  v56 -> v57;
  v57 -> v58;
  v59 -> v60;
  v61 -> v62;
  v63 -> v64;
  v65 -> v66;
  v67 -> v68;
  v69 -> v70;
  v70 -> v71;
  // end-of-graph
}
