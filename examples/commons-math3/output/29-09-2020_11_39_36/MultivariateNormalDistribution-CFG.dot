digraph MultivariateNormalDistribution_CFG {
  // graph-vertices
  v1  [label="71:  MultivariateNormalDistribution (final double[] means, final double[][] covariances)"];
  v2  [label="76:  this(new Well19937c(), means, covariances)"];
  v3  [label="97:  MultivariateNormalDistribution (RandomGenerator rng, final double[] means, final double[][] covariances)"];
  v4  [label="103:  super(rng, means.length)"];
  v5  [label="105:  final int dim = means.length"];
  v6  [label="107:  if (covariances.length != dim)"];
  v7  [label="108:  throw new DimensionMismatchException(covariances.length, dim)"];
  v8  [label="endif"];
  v9  [label="111:  for (  int i = 0 ; i < dim ;   i++)"];
  v12  [label="endfor"];
  v13  [label="112:  if (dim != covariances[i].length)"];
  v14  [label="113:  throw new DimensionMismatchException(covariances[i].length, dim)"];
  v15  [label="endif"];
  v16  [label="117:  this.means = MathArrays.copyOf(means)"];
  v17  [label="119:  covarianceMatrix = new Array2DRowRealMatrix(covariances)"];
  v18  [label="122:  final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix)"];
  v19  [label="125:  covarianceMatrixInverse = covMatDec.getSolver().getInverse()"];
  v20  [label="127:  covarianceMatrixDeterminant = covMatDec.getDeterminant()"];
  v21  [label="130:  final double[] covMatEigenvalues = covMatDec.getRealEigenvalues()"];
  v22  [label="132:  for (  int i = 0 ; i < covMatEigenvalues.length ;   i++)"];
  v25  [label="endfor"];
  v26  [label="133:  if (covMatEigenvalues[i] < 0)"];
  v27  [label="134:  throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0)"];
  v28  [label="endif"];
  v29  [label="139:  final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim)"];
  v30  [label="140:  for (  int v = 0 ; v < dim ;   v++)"];
  v33  [label="endfor"];
  v34  [label="141:  final double[] evec = covMatDec.getEigenvector(v).toArray()"];
  v35  [label="142:  covMatEigenvectors.setColumn(v, evec)"];
  v36  [label="145:  final RealMatrix tmpMatrix = covMatEigenvectors.transpose()"];
  v37  [label="148:  for (  int row = 0 ; row < dim ;   row++)"];
  v40  [label="endfor"];
  v41  [label="149:  final double factor = FastMath.sqrt(covMatEigenvalues[row])"];
  v42  [label="150:  for (  int col = 0 ; col < dim ;   col++)"];
  v45  [label="endfor"];
  v46  [label="151:  tmpMatrix.multiplyEntry(row, col, factor)"];
  v47  [label="155:  samplingMatrix = covMatEigenvectors.multiply(tmpMatrix)"];
  v48  [label="163:  double[] getMeans()"];
  v49  [label="164:  return MathArrays.copyOf(means);"];
  v50  [label="172:  RealMatrix getCovariances()"];
  v51  [label="173:  return covarianceMatrix.copy();"];
  v52  [label="177:  double density(final double[] vals)"];
  v53  [label="178:  final int dim = getDimension()"];
  v54  [label="179:  if (vals.length != dim)"];
  v55  [label="180:  throw new DimensionMismatchException(vals.length, dim)"];
  v56  [label="endif"];
  v57  [label="183:  return FastMath.pow(2 * FastMath.PI, -0.5 * dim) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals);"];
  v58  [label="194:  double[] getStandardDeviations()"];
  v59  [label="195:  final int dim = getDimension()"];
  v60  [label="196:  final double[] std = new double[dim]"];
  v61  [label="197:  final double[][] s = covarianceMatrix.getData()"];
  v62  [label="198:  for (  int i = 0 ; i < dim ;   i++)"];
  v65  [label="endfor"];
  v66  [label="199:  std[i] = FastMath.sqrt(s[i][i])"];
  v67  [label="201:  return std;"];
  v68  [label="206:  double[] sample()"];
  v69  [label="207:  final int dim = getDimension()"];
  v70  [label="208:  final double[] normalVals = new double[dim]"];
  v71  [label="210:  for (  int i = 0 ; i < dim ;   i++)"];
  v74  [label="endfor"];
  v75  [label="211:  normalVals[i] = random.nextGaussian()"];
  v76  [label="214:  final double[] vals = samplingMatrix.operate(normalVals)"];
  v77  [label="216:  for (  int i = 0 ; i < dim ;   i++)"];
  v80  [label="endfor"];
  v81  [label="217:  vals[i] += means[i]"];
  v82  [label="220:  return vals;"];
  v83  [label="229:  double getExponentTerm(final double[] values)"];
  v84  [label="230:  final double[] centered = new double[values.length]"];
  v85  [label="231:  for (  int i = 0 ; i < centered.length ;   i++)"];
  v88  [label="endfor"];
  v89  [label="232:  centered[i] = values[i] - getMeans()[i]"];
  v90  [label="234:  final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered)"];
  v91  [label="235:  double sum = 0"];
  v92  [label="236:  for (  int i = 0 ; i < preMultiplied.length ;   i++)"];
  v95  [label="endfor"];
  v96  [label="237:  sum += preMultiplied[i] * centered[i]"];
  v97  [label="239:  return FastMath.exp(-0.5 * sum);"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7  [label="True"];
  v6 -> v8  [label="False"];
  v8 -> v9;
  v9 -> v12  [label="False"];
  v9 -> v13  [label="True"];
  v13 -> v14  [label="True"];
  v13 -> v15  [label="False"];
  v15 -> v9;
  v12 -> v16;
  v16 -> v17;
  v17 -> v18;
  v18 -> v19;
  v19 -> v20;
  v20 -> v21;
  v21 -> v22;
  v22 -> v25  [label="False"];
  v22 -> v26  [label="True"];
  v26 -> v27  [label="True"];
  v26 -> v28  [label="False"];
  v28 -> v22;
  v25 -> v29;
  v29 -> v30;
  v30 -> v33  [label="False"];
  v30 -> v34  [label="True"];
  v34 -> v35;
  v35 -> v30;
  v33 -> v36;
  v36 -> v37;
  v37 -> v40  [label="False"];
  v37 -> v41  [label="True"];
  v41 -> v42;
  v42 -> v45  [label="False"];
  v42 -> v46  [label="True"];
  v46 -> v42;
  v45 -> v37;
  v40 -> v47;
  v48 -> v49;
  v50 -> v51;
  v52 -> v53;
  v53 -> v54;
  v54 -> v55  [label="True"];
  v54 -> v56  [label="False"];
  v56 -> v57;
  v58 -> v59;
  v59 -> v60;
  v60 -> v61;
  v61 -> v62;
  v62 -> v65  [label="False"];
  v62 -> v66  [label="True"];
  v66 -> v62;
  v65 -> v67;
  v68 -> v69;
  v69 -> v70;
  v70 -> v71;
  v71 -> v74  [label="False"];
  v71 -> v75  [label="True"];
  v75 -> v71;
  v74 -> v76;
  v76 -> v77;
  v77 -> v80  [label="False"];
  v77 -> v81  [label="True"];
  v81 -> v77;
  v80 -> v82;
  v83 -> v84;
  v84 -> v85;
  v85 -> v88  [label="False"];
  v85 -> v89  [label="True"];
  v89 -> v85;
  v88 -> v90;
  v90 -> v91;
  v91 -> v92;
  v92 -> v95  [label="False"];
  v92 -> v96  [label="True"];
  v96 -> v92;
  v95 -> v97;
  // end-of-graph
}
