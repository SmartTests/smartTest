digraph NormalDistribution_CFG {
  // graph-vertices
  v1  [label="59:  NormalDistribution ()"];
  v2  [label="60:  this(0, 1)"];
  v3  [label="70:  NormalDistribution (double mean, double sd)"];
  v4  [label="72:  this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v5  [label="85:  NormalDistribution (double mean, double sd, double inverseCumAccuracy)"];
  v6  [label="87:  this(new Well19937c(), mean, sd, inverseCumAccuracy)"];
  v7  [label="99:  NormalDistribution (RandomGenerator rng, double mean, double sd)"];
  v8  [label="101:  this(rng, mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v9  [label="114:  NormalDistribution (RandomGenerator rng, double mean, double sd, double inverseCumAccuracy)"];
  v10  [label="119:  super(rng)"];
  v11  [label="121:  if (sd <= 0)"];
  v12  [label="122:  throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd)"];
  v13  [label="endif"];
  v14  [label="125:  this.mean = mean"];
  v15  [label="126:  standardDeviation = sd"];
  v16  [label="127:  solverAbsoluteAccuracy = inverseCumAccuracy"];
  v17  [label="135:  double getMean()"];
  v18  [label="136:  return mean;"];
  v19  [label="144:  double getStandardDeviation()"];
  v20  [label="145:  return standardDeviation;"];
  v21  [label="149:  double density(double x)"];
  v22  [label="150:  final double x0 = x - mean"];
  v23  [label="151:  final double x1 = x0 / standardDeviation"];
  v24  [label="152:  return FastMath.exp(-0.5 * x1 * x1) / (standardDeviation * SQRT2PI);"];
  v25  [label="162:  double cumulativeProbability(double x)"];
  v26  [label="163:  final double dev = x - mean"];
  v27  [label="164:  if (FastMath.abs(dev) > 40 * standardDeviation)"];
  v28  [label="165:  return dev < 0 ? 0.0d : 1.0d;"];
  v29  [label="endif"];
  v30  [label="167:  return 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));"];
  v31  [label="174:  double inverseCumulativeProbability(final double p)"];
  v32  [label="175:  if (p < 0.0 || p > 1.0)"];
  v33  [label="176:  throw new OutOfRangeException(p, 0, 1)"];
  v34  [label="endif"];
  v35  [label="178:  return mean + standardDeviation * SQRT2 * Erf.erfInv(2 * p - 1);"];
  v36  [label="187:  double cumulativeProbability(double x0, double x1)"];
  v37  [label="189:  return probability(x0, x1);"];
  v38  [label="194:  double probability(double x0, double x1)"];
  v39  [label="197:  if (x0 > x1)"];
  v40  [label="198:  throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, x0, x1, true)"];
  v41  [label="endif"];
  v42  [label="201:  final double denom = standardDeviation * SQRT2"];
  v43  [label="202:  final double v0 = (x0 - mean) / denom"];
  v44  [label="203:  final double v1 = (x1 - mean) / denom"];
  v45  [label="204:  return 0.5 * Erf.erf(v0, v1);"];
  v46  [label="209:  double getSolverAbsoluteAccuracy()"];
  v47  [label="210:  return solverAbsoluteAccuracy;"];
  v48  [label="218:  double getNumericalMean()"];
  v49  [label="219:  return getMean();"];
  v50  [label="227:  double getNumericalVariance()"];
  v51  [label="228:  final double s = getStandardDeviation()"];
  v52  [label="229:  return s * s;"];
  v53  [label="241:  double getSupportLowerBound()"];
  v54  [label="242:  return Double.NEGATIVE_INFINITY;"];
  v55  [label="254:  double getSupportUpperBound()"];
  v56  [label="255:  return Double.POSITIVE_INFINITY;"];
  v57  [label="259:  boolean isSupportLowerBoundInclusive()"];
  v58  [label="260:  return false;"];
  v59  [label="264:  boolean isSupportUpperBoundInclusive()"];
  v60  [label="265:  return false;"];
  v61  [label="275:  boolean isSupportConnected()"];
  v62  [label="276:  return true;"];
  v63  [label="281:  double sample()"];
  v64  [label="282:  return standardDeviation * random.nextGaussian() + mean;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v7 -> v8;
  v9 -> v10;
  v10 -> v11;
  v11 -> v12  [label="True"];
  v11 -> v13  [label="False"];
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v17 -> v18;
  v19 -> v20;
  v21 -> v22;
  v22 -> v23;
  v23 -> v24;
  v25 -> v26;
  v26 -> v27;
  v27 -> v28  [label="True"];
  v27 -> v29  [label="False"];
  v29 -> v30;
  v31 -> v32;
  v32 -> v33  [label="True"];
  v32 -> v34  [label="False"];
  v34 -> v35;
  v36 -> v37;
  v38 -> v39;
  v39 -> v40  [label="True"];
  v39 -> v41  [label="False"];
  v41 -> v42;
  v42 -> v43;
  v43 -> v44;
  v44 -> v45;
  v46 -> v47;
  v48 -> v49;
  v50 -> v51;
  v51 -> v52;
  v53 -> v54;
  v55 -> v56;
  v57 -> v58;
  v59 -> v60;
  v61 -> v62;
  v63 -> v64;
  // end-of-graph
}
