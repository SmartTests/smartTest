digraph ParetoDistribution_CFG {
  // graph-vertices
  v1  [label="70:  ParetoDistribution ()"];
  v2  [label="71:  this(1, 1)"];
  v3  [label="81:  ParetoDistribution (double scale, double shape)"];
  v4  [label="83:  this(scale, shape, DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v5  [label="95:  ParetoDistribution (double scale, double shape, double inverseCumAccuracy)"];
  v6  [label="97:  this(new Well19937c(), scale, shape, inverseCumAccuracy)"];
  v7  [label="108:  ParetoDistribution (RandomGenerator rng, double scale, double shape)"];
  v8  [label="110:  this(rng, scale, shape, DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v9  [label="122:  ParetoDistribution (RandomGenerator rng, double scale, double shape, double inverseCumAccuracy)"];
  v10  [label="127:  super(rng)"];
  v11  [label="129:  if (scale <= 0)"];
  v12  [label="130:  throw new NotStrictlyPositiveException(LocalizedFormats.SCALE, scale)"];
  v13  [label="endif"];
  v14  [label="133:  if (shape <= 0)"];
  v15  [label="134:  throw new NotStrictlyPositiveException(LocalizedFormats.SHAPE, shape)"];
  v16  [label="endif"];
  v17  [label="137:  this.scale = scale"];
  v18  [label="138:  this.shape = shape"];
  v19  [label="139:  this.solverAbsoluteAccuracy = inverseCumAccuracy"];
  v20  [label="147:  double getScale()"];
  v21  [label="148:  return scale;"];
  v22  [label="156:  double getShape()"];
  v23  [label="157:  return shape;"];
  v24  [label="170:  double density(double x)"];
  v25  [label="171:  if (x < scale)"];
  v26  [label="172:  return 0;"];
  v27  [label="endif"];
  v28  [label="174:  return FastMath.pow(scale, shape) / FastMath.pow(x, shape + 1) * shape;"];
  v29  [label="186:  double cumulativeProbability(double x)"];
  v30  [label="187:  if (x <= scale)"];
  v31  [label="188:  return 0;"];
  v32  [label="endif"];
  v33  [label="190:  return 1 - FastMath.pow(scale / x, shape);"];
  v34  [label="200:  double cumulativeProbability(double x0, double x1)"];
  v35  [label="202:  return probability(x0, x1);"];
  v36  [label="207:  double getSolverAbsoluteAccuracy()"];
  v37  [label="208:  return solverAbsoluteAccuracy;"];
  v38  [label="220:  double getNumericalMean()"];
  v39  [label="221:  if (shape <= 1)"];
  v40  [label="222:  return Double.POSITIVE_INFINITY;"];
  v41  [label="endif"];
  v42  [label="224:  return shape * scale / (shape - 1);"];
  v43  [label="236:  double getNumericalVariance()"];
  v44  [label="237:  if (shape <= 2)"];
  v45  [label="238:  return Double.POSITIVE_INFINITY;"];
  v46  [label="endif"];
  v47  [label="240:  double s = shape - 1"];
  v48  [label="241:  return scale * scale * shape / (s * s) / (shape - 2);"];
  v49  [label="251:  double getSupportLowerBound()"];
  v50  [label="252:  return scale;"];
  v51  [label="262:  double getSupportUpperBound()"];
  v52  [label="263:  return Double.POSITIVE_INFINITY;"];
  v53  [label="267:  boolean isSupportLowerBoundInclusive()"];
  v54  [label="268:  return true;"];
  v55  [label="272:  boolean isSupportUpperBoundInclusive()"];
  v56  [label="273:  return false;"];
  v57  [label="283:  boolean isSupportConnected()"];
  v58  [label="284:  return true;"];
  v59  [label="289:  double sample()"];
  v60  [label="290:  final double n = random.nextDouble()"];
  v61  [label="291:  return scale / FastMath.pow(n, 1 / shape);"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v7 -> v8;
  v9 -> v10;
  v10 -> v11;
  v11 -> v12  [label="True"];
  v11 -> v13  [label="False"];
  v13 -> v14;
  v14 -> v15  [label="True"];
  v14 -> v16  [label="False"];
  v16 -> v17;
  v17 -> v18;
  v18 -> v19;
  v20 -> v21;
  v22 -> v23;
  v24 -> v25;
  v25 -> v26  [label="True"];
  v25 -> v27  [label="False"];
  v27 -> v28;
  v29 -> v30;
  v30 -> v31  [label="True"];
  v30 -> v32  [label="False"];
  v32 -> v33;
  v34 -> v35;
  v36 -> v37;
  v38 -> v39;
  v39 -> v40  [label="True"];
  v39 -> v41  [label="False"];
  v41 -> v42;
  v43 -> v44;
  v44 -> v45  [label="True"];
  v44 -> v46  [label="False"];
  v46 -> v47;
  v47 -> v48;
  v49 -> v50;
  v51 -> v52;
  v53 -> v54;
  v55 -> v56;
  v57 -> v58;
  v59 -> v60;
  v60 -> v61;
  // end-of-graph
}
