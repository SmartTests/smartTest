digraph PascalDistribution_CFG {
  // graph-vertices
  v1  [label="82:  PascalDistribution (int r, double p)"];
  v2  [label="84:  this(new Well19937c(), r, p)"];
  v3  [label="99:  PascalDistribution (RandomGenerator rng, int r, double p)"];
  v4  [label="103:  super(rng)"];
  v5  [label="105:  if (r <= 0)"];
  v6  [label="106:  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,  r)"];
  v7  [label="endif"];
  v8  [label="109:  if (p < 0 || p > 1)"];
  v9  [label="110:  throw new OutOfRangeException(p, 0, 1)"];
  v10  [label="endif"];
  v11  [label="113:  numberOfSuccesses = r"];
  v12  [label="114:  probabilityOfSuccess = p"];
  v13  [label="122:  int getNumberOfSuccesses()"];
  v14  [label="123:  return numberOfSuccesses;"];
  v15  [label="131:  double getProbabilityOfSuccess()"];
  v16  [label="132:  return probabilityOfSuccess;"];
  v17  [label="136:  double probability(int x)"];
  v18  [label="137:  double ret"];
  v19  [label="138:  if (x < 0)"];
  v20  [label="139:  ret = 0.0"];
  v21  [label="endif"];
  v22  [label="141:  ret = CombinatoricsUtils.binomialCoefficientDouble(x + numberOfSuccesses - 1, numberOfSuccesses - 1) * FastMath.pow(probabilityOfSuccess, numberOfSuccesses) * FastMath.pow(1.0 - probabilityOfSuccess, x)"];
  v23  [label="146:  return ret;"];
  v24  [label="150:  double cumulativeProbability(int x)"];
  v25  [label="151:  double ret"];
  v26  [label="152:  if (x < 0)"];
  v27  [label="153:  ret = 0.0"];
  v28  [label="endif"];
  v29  [label="155:  ret = Beta.regularizedBeta(probabilityOfSuccess, numberOfSuccesses, x + 1.0)"];
  v30  [label="158:  return ret;"];
  v31  [label="167:  double getNumericalMean()"];
  v32  [label="168:  final double p = getProbabilityOfSuccess()"];
  v33  [label="169:  final double r = getNumberOfSuccesses()"];
  v34  [label="170:  return (r * (1 - p)) / p;"];
  v35  [label="179:  double getNumericalVariance()"];
  v36  [label="180:  final double p = getProbabilityOfSuccess()"];
  v37  [label="181:  final double r = getNumberOfSuccesses()"];
  v38  [label="182:  return r * (1 - p) / (p * p);"];
  v39  [label="192:  int getSupportLowerBound()"];
  v40  [label="193:  return 0;"];
  v41  [label="205:  int getSupportUpperBound()"];
  v42  [label="206:  return Integer.MAX_VALUE;"];
  v43  [label="216:  boolean isSupportConnected()"];
  v44  [label="217:  return true;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6  [label="True"];
  v5 -> v7  [label="False"];
  v7 -> v8;
  v8 -> v9  [label="True"];
  v8 -> v10  [label="False"];
  v10 -> v11;
  v11 -> v12;
  v13 -> v14;
  v15 -> v16;
  v17 -> v18;
  v18 -> v19;
  v19 -> v20  [label="True"];
  v20 -> v21;
  v19 -> v22  [label="False"];
  v22 -> v21;
  v21 -> v23;
  v24 -> v25;
  v25 -> v26;
  v26 -> v27  [label="True"];
  v27 -> v28;
  v26 -> v29  [label="False"];
  v29 -> v28;
  v28 -> v30;
  v31 -> v32;
  v32 -> v33;
  v33 -> v34;
  v35 -> v36;
  v36 -> v37;
  v37 -> v38;
  v39 -> v40;
  v41 -> v42;
  v43 -> v44;
  // end-of-graph
}
