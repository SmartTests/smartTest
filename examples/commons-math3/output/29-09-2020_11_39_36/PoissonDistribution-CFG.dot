digraph PoissonDistribution_CFG {
  // graph-vertices
  v1  [label="73:  PoissonDistribution (double p)"];
  v2  [label="74:  this(p, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS)"];
  v3  [label="88:  PoissonDistribution (double p, double epsilon, int maxIterations)"];
  v4  [label="90:  this(new Well19937c(), p, epsilon, maxIterations)"];
  v5  [label="105:  PoissonDistribution (RandomGenerator rng,  double p,  double epsilon,  int maxIterations)"];
  v6  [label="110:  super(rng)"];
  v7  [label="112:  if (p <= 0)"];
  v8  [label="113:  throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, p)"];
  v9  [label="endif"];
  v10  [label="115:  mean = p"];
  v11  [label="116:  this.epsilon = epsilon"];
  v12  [label="117:  this.maxIterations = maxIterations"];
  v13  [label="120:  normal = new NormalDistribution(rng, p, FastMath.sqrt(p), NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v14  [label="122:  exponential = new ExponentialDistribution(rng, 1, ExponentialDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v15  [label="135:  PoissonDistribution (double p, double epsilon)"];
  v16  [label="137:  this(p, epsilon, DEFAULT_MAX_ITERATIONS)"];
  v17  [label="149:  PoissonDistribution (double p, int maxIterations)"];
  v18  [label="150:  this(p, DEFAULT_EPSILON, maxIterations)"];
  v19  [label="158:  double getMean()"];
  v20  [label="159:  return mean;"];
  v21  [label="163:  double probability(int x)"];
  v22  [label="164:  double ret"];
  v23  [label="165:  if (x < 0 || x == Integer.MAX_VALUE)"];
  v24  [label="166:  ret = 0.0"];
  v25  [label="endif"];
  v26  [label="167:  if (x == 0)"];
  v27  [label="168:  ret = FastMath.exp(-mean)"];
  v28  [label="endif"];
  v29  [label="170:  ret = FastMath.exp(-SaddlePointExpansion.getStirlingError(x) - SaddlePointExpansion.getDeviancePart(x, mean)) / FastMath.sqrt(MathUtils.TWO_PI * x)"];
  v30  [label="174:  return ret;"];
  v31  [label="178:  double cumulativeProbability(int x)"];
  v32  [label="179:  if (x < 0)"];
  v33  [label="180:  return 0;"];
  v34  [label="endif"];
  v35  [label="182:  if (x == Integer.MAX_VALUE)"];
  v36  [label="183:  return 1;"];
  v37  [label="endif"];
  v38  [label="185:  return Gamma.regularizedGammaQ((double) x + 1, mean, epsilon,  maxIterations);"];
  v39  [label="200:  double normalApproximateProbability(int x)"];
  v40  [label="202:  return normal.cumulativeProbability(x + 0.5);"];
  v41  [label="210:  double getNumericalMean()"];
  v42  [label="211:  return getMean();"];
  v43  [label="219:  double getNumericalVariance()"];
  v44  [label="220:  return getMean();"];
  v45  [label="230:  int getSupportLowerBound()"];
  v46  [label="231:  return 0;"];
  v47  [label="244:  int getSupportUpperBound()"];
  v48  [label="245:  return Integer.MAX_VALUE;"];
  v49  [label="255:  boolean isSupportConnected()"];
  v50  [label="256:  return true;"];
  v51  [label="282:  int sample()"];
  v52  [label="283:  return (int) FastMath.min(nextPoisson(mean), Integer.MAX_VALUE);"];
  v53  [label="290:  long nextPoisson(double meanPoisson)"];
  v54  [label="291:  final double pivot = 40.0d"];
  v55  [label="292:  if (meanPoisson < pivot)"];
  v56  [label="293:  double p = FastMath.exp(-meanPoisson)"];
  v57  [label="294:  long n = 0"];
  v58  [label="295:  double r = 1.0d"];
  v59  [label="296:  double rnd = 1.0d"];
  v60  [label="298:  while (n < 1000 * meanPoisson)"];
  v61  [label="endwhile"];
  v62  [label="299:  rnd = random.nextDouble()"];
  v63  [label="300:  r = r * rnd"];
  v64  [label="301:  if (r >= p)"];
  v65  [label="302:  n++"];
  v66  [label="endif"];
  v67  [label="304:  return n;"];
  v68  [label="307:  return n;"];
  v69  [label="endif"];
  v70  [label="309:  final double lambda = FastMath.floor(meanPoisson)"];
  v71  [label="310:  final double lambdaFractional = meanPoisson - lambda"];
  v72  [label="311:  final double logLambda = FastMath.log(lambda)"];
  v73  [label="312:  final double logLambdaFactorial = CombinatoricsUtils.factorialLog((int) lambda)"];
  v74  [label="313:  final long y2 = lambdaFractional < Double.MIN_VALUE ? 0 : nextPoisson(lambdaFractional)"];
  v75  [label="314:  final double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1))"];
  v76  [label="315:  final double halfDelta = delta / 2"];
  v77  [label="316:  final double twolpd = 2 * lambda + delta"];
  v78  [label="317:  final double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / 8 * lambda)"];
  v79  [label="318:  final double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd)"];
  v80  [label="319:  final double aSum = a1 + a2 + 1"];
  v81  [label="320:  final double p1 = a1 / aSum"];
  v82  [label="321:  final double p2 = a2 / aSum"];
  v83  [label="322:  final double c1 = 1 / (8 * lambda)"];
  v84  [label="324:  double x = 0"];
  v85  [label="325:  double y = 0"];
  v86  [label="326:  double v = 0"];
  v87  [label="327:  int a = 0"];
  v88  [label="328:  double t = 0"];
  v89  [label="329:  double qr = 0"];
  v90  [label="330:  double qa = 0"];
  v92  [label="331:  for (   ;  ;  ;  ;    ; )"];
  v93  [label="endfor"];
  v94  [label="332:  final double u = random.nextDouble()"];
  v95  [label="333:  if (u <= p1)"];
  v96  [label="334:  final double n = random.nextGaussian()"];
  v97  [label="335:  x = n * FastMath.sqrt(lambda + halfDelta) - 0.5d"];
  v98  [label="336:  if (x > delta || x < -lambda)"];
  v99  [label="337:  continue;"];
  v100  [label="endif"];
  v101  [label="339:  y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x)"];
  v102  [label="340:  final double e = exponential.sample()"];
  v103  [label="341:  v = -e - (n * n / 2) + c1"];
  v104  [label="endif"];
  v105  [label="343:  if (u > p1 + p2)"];
  v106  [label="344:  y = lambda"];
  v107  [label="345:  break;"];
  v108  [label="endif"];
  v109  [label="347:  x = delta + (twolpd / delta) * exponential.sample()"];
  v110  [label="348:  y = FastMath.ceil(x)"];
  v111  [label="349:  v = -exponential.sample() - delta * (x + 1) / twolpd"];
  v112  [label="352:  a = x < 0 ? 1 : 0"];
  v113  [label="353:  t = y * (y + 1) / (2 * lambda)"];
  v114  [label="354:  if (v < -t && a == 0)"];
  v115  [label="355:  y = lambda + y"];
  v116  [label="356:  break;"];
  v117  [label="endif"];
  v118  [label="358:  qr = t * ((2 * y + 1) / (6 * lambda) - 1)"];
  v119  [label="359:  qa = qr - (t * t) / (3 * (lambda + a * (y + 1)))"];
  v120  [label="360:  if (v < qa)"];
  v121  [label="361:  y = lambda + y"];
  v122  [label="362:  break;"];
  v123  [label="endif"];
  v124  [label="364:  if (v > qr)"];
  v125  [label="365:  continue;"];
  v126  [label="endif"];
  v127  [label="367:  if (v < y * logLambda - CombinatoricsUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial)"];
  v128  [label="368:  y = lambda + y"];
  v129  [label="369:  break;"];
  v130  [label="endif"];
  v131  [label="372:  return y2 + (long) y;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8  [label="True"];
  v7 -> v9  [label="False"];
  v9 -> v10;
  v10 -> v11;
  v11 -> v12;
  v12 -> v13;
  v13 -> v14;
  v15 -> v16;
  v17 -> v18;
  v19 -> v20;
  v21 -> v22;
  v22 -> v23;
  v23 -> v24  [label="True"];
  v24 -> v25;
  v23 -> v26  [label="False"];
  v26 -> v27  [label="True"];
  v27 -> v28;
  v26 -> v29  [label="False"];
  v29 -> v28;
  v28 -> v25;
  v25 -> v30;
  v31 -> v32;
  v32 -> v33  [label="True"];
  v32 -> v34  [label="False"];
  v34 -> v35;
  v35 -> v36  [label="True"];
  v35 -> v37  [label="False"];
  v37 -> v38;
  v39 -> v40;
  v41 -> v42;
  v43 -> v44;
  v45 -> v46;
  v47 -> v48;
  v49 -> v50;
  v51 -> v52;
  v53 -> v54;
  v54 -> v55;
  v55 -> v56  [label="True"];
  v56 -> v57;
  v57 -> v58;
  v58 -> v59;
  v59 -> v60;
  v60 -> v61  [label="False"];
  v60 -> v62  [label="True"];
  v62 -> v63;
  v63 -> v64;
  v64 -> v65  [label="True"];
  v65 -> v66;
  v64 -> v67  [label="False"];
  v66 -> v60;
  v61 -> v68;
  v55 -> v70  [label="False"];
  v70 -> v71;
  v71 -> v72;
  v72 -> v73;
  v73 -> v74;
  v74 -> v75;
  v75 -> v76;
  v76 -> v77;
  v77 -> v78;
  v78 -> v79;
  v79 -> v80;
  v80 -> v81;
  v81 -> v82;
  v82 -> v83;
  v83 -> v84;
  v84 -> v85;
  v85 -> v86;
  v86 -> v87;
  v87 -> v88;
  v88 -> v89;
  v89 -> v90;
  v90 -> v92;
  v92 -> v93  [label="False"];
  v92 -> v94  [label="True"];
  v94 -> v95;
  v95 -> v96  [label="True"];
  v96 -> v97;
  v97 -> v98;
  v98 -> v99  [label="True"];
  v99 -> v92;
  v98 -> v100  [label="False"];
  v100 -> v101;
  v101 -> v102;
  v102 -> v103;
  v103 -> v104;
  v95 -> v105  [label="False"];
  v105 -> v106  [label="True"];
  v106 -> v107;
  v107 -> v93;
  v105 -> v109  [label="False"];
  v109 -> v110;
  v110 -> v111;
  v111 -> v108;
  v108 -> v104;
  v104 -> v112;
  v112 -> v113;
  v113 -> v114;
  v114 -> v115  [label="True"];
  v115 -> v116;
  v116 -> v93;
  v114 -> v117  [label="False"];
  v117 -> v118;
  v118 -> v119;
  v119 -> v120;
  v120 -> v121  [label="True"];
  v121 -> v122;
  v122 -> v93;
  v120 -> v123  [label="False"];
  v123 -> v124;
  v124 -> v125  [label="True"];
  v125 -> v92;
  v124 -> v126  [label="False"];
  v126 -> v127;
  v127 -> v128  [label="True"];
  v128 -> v129;
  v129 -> v93;
  v127 -> v130  [label="False"];
  v130 -> v92;
  v93 -> v131;
  // end-of-graph
}
