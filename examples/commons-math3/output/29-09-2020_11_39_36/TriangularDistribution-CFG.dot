digraph TriangularDistribution_CFG {
  // graph-vertices
  v1  [label="59:  TriangularDistribution (double a, double c, double b)"];
  v2  [label="61:  this(new Well19937c(), a, c, b)"];
  v3  [label="75:  TriangularDistribution (RandomGenerator rng, double a, double c, double b)"];
  v4  [label="80:  super(rng)"];
  v5  [label="82:  if (a >= b)"];
  v6  [label="83:  throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, a, b, false)"];
  v7  [label="endif"];
  v8  [label="87:  if (c < a)"];
  v9  [label="88:  throw new NumberIsTooSmallException( LocalizedFormats.NUMBER_TOO_SMALL, c, a, true)"];
  v10  [label="endif"];
  v11  [label="91:  if (c > b)"];
  v12  [label="92:  throw new NumberIsTooLargeException( LocalizedFormats.NUMBER_TOO_LARGE, c, b, true)"];
  v13  [label="endif"];
  v14  [label="96:  this.a = a"];
  v15  [label="97:  this.c = c"];
  v16  [label="98:  this.b = b"];
  v17  [label="99:  solverAbsoluteAccuracy = FastMath.max(FastMath.ulp(a), FastMath.ulp(b))"];
  v18  [label="107:  double getMode()"];
  v19  [label="108:  return c;"];
  v20  [label="125:  double getSolverAbsoluteAccuracy()"];
  v21  [label="126:  return solverAbsoluteAccuracy;"];
  v22  [label="141:  double density(double x)"];
  v23  [label="142:  if (x < a)"];
  v24  [label="143:  return 0;"];
  v25  [label="endif"];
  v26  [label="145:  if (a <= x && x < c)"];
  v27  [label="146:  double divident = 2 * (x - a)"];
  v28  [label="147:  double divisor = (b - a) * (c - a)"];
  v29  [label="148:  return divident / divisor;"];
  v30  [label="endif"];
  v31  [label="150:  if (x == c)"];
  v32  [label="151:  return 2 / (b - a);"];
  v33  [label="endif"];
  v34  [label="153:  if (c < x && x <= b)"];
  v35  [label="154:  double divident = 2 * (b - x)"];
  v36  [label="155:  double divisor = (b - a) * (b - c)"];
  v37  [label="156:  return divident / divisor;"];
  v38  [label="endif"];
  v39  [label="158:  return 0;"];
  v40  [label="174:  double cumulativeProbability(double x)"];
  v41  [label="175:  if (x < a)"];
  v42  [label="176:  return 0;"];
  v43  [label="endif"];
  v44  [label="178:  if (a <= x && x < c)"];
  v45  [label="179:  double divident = (x - a) * (x - a)"];
  v46  [label="180:  double divisor = (b - a) * (c - a)"];
  v47  [label="181:  return divident / divisor;"];
  v48  [label="endif"];
  v49  [label="183:  if (x == c)"];
  v50  [label="184:  return (c - a) / (b - a);"];
  v51  [label="endif"];
  v52  [label="186:  if (c < x && x <= b)"];
  v53  [label="187:  double divident = (b - x) * (b - x)"];
  v54  [label="188:  double divisor = (b - a) * (b - c)"];
  v55  [label="189:  return 1 - (divident / divisor);"];
  v56  [label="endif"];
  v57  [label="191:  return 1;"];
  v58  [label="200:  double getNumericalMean()"];
  v59  [label="201:  return (a + b + c) / 3;"];
  v60  [label="210:  double getNumericalVariance()"];
  v61  [label="211:  return (a * a + b * b + c * c - a * b - a * c - b * c) / 18;"];
  v62  [label="222:  double getSupportLowerBound()"];
  v63  [label="223:  return a;"];
  v64  [label="234:  double getSupportUpperBound()"];
  v65  [label="235:  return b;"];
  v66  [label="239:  boolean isSupportLowerBoundInclusive()"];
  v67  [label="240:  return true;"];
  v68  [label="244:  boolean isSupportUpperBoundInclusive()"];
  v69  [label="245:  return true;"];
  v70  [label="255:  boolean isSupportConnected()"];
  v71  [label="256:  return true;"];
  v72  [label="260:  double inverseCumulativeProbability(double p)"];
  v73  [label="262:  if (p < 0 || p > 1)"];
  v74  [label="263:  throw new OutOfRangeException(p, 0, 1)"];
  v75  [label="endif"];
  v76  [label="265:  if (p == 0)"];
  v77  [label="266:  return a;"];
  v78  [label="endif"];
  v79  [label="268:  if (p == 1)"];
  v80  [label="269:  return b;"];
  v81  [label="endif"];
  v82  [label="271:  if (p < (c - a) / (b - a))"];
  v83  [label="272:  return a + FastMath.sqrt(p * (b - a) * (c - a));"];
  v84  [label="endif"];
  v85  [label="274:  return b - FastMath.sqrt((1 - p) * (b - a) * (b - c));"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6  [label="True"];
  v5 -> v7  [label="False"];
  v7 -> v8;
  v8 -> v9  [label="True"];
  v8 -> v10  [label="False"];
  v10 -> v11;
  v11 -> v12  [label="True"];
  v11 -> v13  [label="False"];
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v17;
  v18 -> v19;
  v20 -> v21;
  v22 -> v23;
  v23 -> v24  [label="True"];
  v23 -> v25  [label="False"];
  v25 -> v26;
  v26 -> v27  [label="True"];
  v27 -> v28;
  v28 -> v29;
  v26 -> v30  [label="False"];
  v30 -> v31;
  v31 -> v32  [label="True"];
  v31 -> v33  [label="False"];
  v33 -> v34;
  v34 -> v35  [label="True"];
  v35 -> v36;
  v36 -> v37;
  v34 -> v38  [label="False"];
  v38 -> v39;
  v40 -> v41;
  v41 -> v42  [label="True"];
  v41 -> v43  [label="False"];
  v43 -> v44;
  v44 -> v45  [label="True"];
  v45 -> v46;
  v46 -> v47;
  v44 -> v48  [label="False"];
  v48 -> v49;
  v49 -> v50  [label="True"];
  v49 -> v51  [label="False"];
  v51 -> v52;
  v52 -> v53  [label="True"];
  v53 -> v54;
  v54 -> v55;
  v52 -> v56  [label="False"];
  v56 -> v57;
  v58 -> v59;
  v60 -> v61;
  v62 -> v63;
  v64 -> v65;
  v66 -> v67;
  v68 -> v69;
  v70 -> v71;
  v72 -> v73;
  v73 -> v74  [label="True"];
  v73 -> v75  [label="False"];
  v75 -> v76;
  v76 -> v77  [label="True"];
  v76 -> v78  [label="False"];
  v78 -> v79;
  v79 -> v80  [label="True"];
  v79 -> v81  [label="False"];
  v81 -> v82;
  v82 -> v83  [label="True"];
  v82 -> v84  [label="False"];
  v84 -> v85;
  // end-of-graph
}
