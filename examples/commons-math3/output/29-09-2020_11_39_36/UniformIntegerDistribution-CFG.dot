digraph UniformIntegerDistribution_CFG {
  // graph-vertices
  v1  [label="50:  UniformIntegerDistribution (int lower, int upper)"];
  v2  [label="52:  this(new Well19937c(), lower, upper)"];
  v3  [label="65:  UniformIntegerDistribution (RandomGenerator rng, int lower, int upper)"];
  v4  [label="69:  super(rng)"];
  v5  [label="71:  if (lower >= upper)"];
  v6  [label="72:  throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false)"];
  v7  [label="endif"];
  v8  [label="76:  this.lower = lower"];
  v9  [label="77:  this.upper = upper"];
  v10  [label="81:  double probability(int x)"];
  v11  [label="82:  if (x < lower || x > upper)"];
  v12  [label="83:  return 0;"];
  v13  [label="endif"];
  v14  [label="85:  return 1.0 / (upper - lower + 1);"];
  v15  [label="89:  double cumulativeProbability(int x)"];
  v16  [label="90:  if (x < lower)"];
  v17  [label="91:  return 0;"];
  v18  [label="endif"];
  v19  [label="93:  if (x > upper)"];
  v20  [label="94:  return 1;"];
  v21  [label="endif"];
  v22  [label="96:  return (x - lower + 1.0) / (upper - lower + 1.0);"];
  v23  [label="105:  double getNumericalMean()"];
  v24  [label="106:  return 0.5 * (lower + upper);"];
  v25  [label="115:  double getNumericalVariance()"];
  v26  [label="116:  double n = upper - lower + 1"];
  v27  [label="117:  return (n * n - 1) / 12.0;"];
  v28  [label="128:  int getSupportLowerBound()"];
  v29  [label="129:  return lower;"];
  v30  [label="140:  int getSupportUpperBound()"];
  v31  [label="141:  return upper;"];
  v32  [label="151:  boolean isSupportConnected()"];
  v33  [label="152:  return true;"];
  v34  [label="157:  int sample()"];
  v35  [label="158:  final int max = (upper - lower) + 1"];
  v36  [label="159:  if (max <= 0)"];
  v37  [label="163:  while (true)"];
  v38  [label="endwhile"];
  v39  [label="164:  final int r = random.nextInt()"];
  v40  [label="165:  if (r >= lower && r <= upper)"];
  v41  [label="167:  return r;"];
  v42  [label="endif"];
  v43  [label="endif"];
  v44  [label="172:  return lower + random.nextInt(max);"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6  [label="True"];
  v5 -> v7  [label="False"];
  v7 -> v8;
  v8 -> v9;
  v10 -> v11;
  v11 -> v12  [label="True"];
  v11 -> v13  [label="False"];
  v13 -> v14;
  v15 -> v16;
  v16 -> v17  [label="True"];
  v16 -> v18  [label="False"];
  v18 -> v19;
  v19 -> v20  [label="True"];
  v19 -> v21  [label="False"];
  v21 -> v22;
  v23 -> v24;
  v25 -> v26;
  v26 -> v27;
  v28 -> v29;
  v30 -> v31;
  v32 -> v33;
  v34 -> v35;
  v35 -> v36;
  v36 -> v37  [label="True"];
  v37 -> v38  [label="False"];
  v37 -> v39  [label="True"];
  v39 -> v40;
  v40 -> v41  [label="True"];
  v40 -> v42  [label="False"];
  v42 -> v37;
  v38 -> v43;
  v36 -> v44  [label="False"];
  // end-of-graph
}
