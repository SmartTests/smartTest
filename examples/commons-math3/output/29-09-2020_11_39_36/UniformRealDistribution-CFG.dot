digraph UniformRealDistribution_CFG {
  // graph-vertices
  v1  [label="52:  UniformRealDistribution ()"];
  v2  [label="53:  this(0, 1)"];
  v3  [label="64:  UniformRealDistribution (double lower, double upper)"];
  v4  [label="66:  this(new Well19937c(), lower, upper)"];
  v5  [label="80:  UniformRealDistribution (double lower, double upper, double inverseCumAccuracy)"];
  v6  [label="82:  this(new Well19937c(), lower, upper)"];
  v7  [label="99:  UniformRealDistribution (RandomGenerator rng,  double lower,  double upper,  double inverseCumAccuracy)"];
  v8  [label="103:  this(rng, lower, upper)"];
  v9  [label="115:  UniformRealDistribution (RandomGenerator rng,  double lower,  double upper)"];
  v10  [label="119:  super(rng)"];
  v11  [label="120:  if (lower >= upper)"];
  v12  [label="121:  throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false)"];
  v13  [label="endif"];
  v14  [label="126:  this.lower = lower"];
  v15  [label="127:  this.upper = upper"];
  v16  [label="131:  double density(double x)"];
  v17  [label="132:  if (x < lower || x > upper)"];
  v18  [label="133:  return 0.0;"];
  v19  [label="endif"];
  v20  [label="135:  return 1 / (upper - lower);"];
  v21  [label="139:  double cumulativeProbability(double x)"];
  v22  [label="140:  if (x <= lower)"];
  v23  [label="141:  return 0;"];
  v24  [label="endif"];
  v25  [label="143:  if (x >= upper)"];
  v26  [label="144:  return 1;"];
  v27  [label="endif"];
  v28  [label="146:  return (x - lower) / (upper - lower);"];
  v29  [label="150:  double inverseCumulativeProbability(final double p)"];
  v30  [label="152:  if (p < 0.0 || p > 1.0)"];
  v31  [label="153:  throw new OutOfRangeException(p, 0, 1)"];
  v32  [label="endif"];
  v33  [label="155:  return p * (upper - lower) + lower;"];
  v34  [label="164:  double getNumericalMean()"];
  v35  [label="165:  return 0.5 * (lower + upper);"];
  v36  [label="174:  double getNumericalVariance()"];
  v37  [label="175:  double ul = upper - lower"];
  v38  [label="176:  return ul * ul / 12;"];
  v39  [label="187:  double getSupportLowerBound()"];
  v40  [label="188:  return lower;"];
  v41  [label="199:  double getSupportUpperBound()"];
  v42  [label="200:  return upper;"];
  v43  [label="204:  boolean isSupportLowerBoundInclusive()"];
  v44  [label="205:  return true;"];
  v45  [label="209:  boolean isSupportUpperBoundInclusive()"];
  v46  [label="210:  return true;"];
  v47  [label="220:  boolean isSupportConnected()"];
  v48  [label="221:  return true;"];
  v49  [label="226:  double sample()"];
  v50  [label="227:  final double u = random.nextDouble()"];
  v51  [label="228:  return u * upper + (1 - u) * lower;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v7 -> v8;
  v9 -> v10;
  v10 -> v11;
  v11 -> v12  [label="True"];
  v11 -> v13  [label="False"];
  v13 -> v14;
  v14 -> v15;
  v16 -> v17;
  v17 -> v18  [label="True"];
  v17 -> v19  [label="False"];
  v19 -> v20;
  v21 -> v22;
  v22 -> v23  [label="True"];
  v22 -> v24  [label="False"];
  v24 -> v25;
  v25 -> v26  [label="True"];
  v25 -> v27  [label="False"];
  v27 -> v28;
  v29 -> v30;
  v30 -> v31  [label="True"];
  v30 -> v32  [label="False"];
  v32 -> v33;
  v34 -> v35;
  v36 -> v37;
  v37 -> v38;
  v39 -> v40;
  v41 -> v42;
  v43 -> v44;
  v45 -> v46;
  v47 -> v48;
  v49 -> v50;
  v50 -> v51;
  // end-of-graph
}
