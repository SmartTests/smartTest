digraph WeibullDistribution_CFG {
  // graph-vertices
  v1  [label="71:  WeibullDistribution (double alpha, double beta)"];
  v2  [label="73:  this(alpha, beta, DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v3  [label="89:  WeibullDistribution (double alpha, double beta,  double inverseCumAccuracy)"];
  v4  [label="91:  this(new Well19937c(), alpha, beta, inverseCumAccuracy)"];
  v5  [label="103:  WeibullDistribution (RandomGenerator rng, double alpha, double beta)"];
  v6  [label="105:  this(rng, alpha, beta, DEFAULT_INVERSE_ABSOLUTE_ACCURACY)"];
  v7  [label="120:  WeibullDistribution (RandomGenerator rng,  double alpha,  double beta,  double inverseCumAccuracy)"];
  v8  [label="125:  super(rng)"];
  v9  [label="127:  if (alpha <= 0)"];
  v10  [label="128:  throw new NotStrictlyPositiveException(LocalizedFormats.SHAPE,  alpha)"];
  v11  [label="endif"];
  v12  [label="131:  if (beta <= 0)"];
  v13  [label="132:  throw new NotStrictlyPositiveException(LocalizedFormats.SCALE,  beta)"];
  v14  [label="endif"];
  v15  [label="135:  scale = beta"];
  v16  [label="136:  shape = alpha"];
  v17  [label="137:  solverAbsoluteAccuracy = inverseCumAccuracy"];
  v18  [label="145:  double getShape()"];
  v19  [label="146:  return shape;"];
  v20  [label="154:  double getScale()"];
  v21  [label="155:  return scale;"];
  v22  [label="159:  double density(double x)"];
  v23  [label="160:  if (x < 0)"];
  v24  [label="161:  return 0;"];
  v25  [label="endif"];
  v26  [label="164:  final double xscale = x / scale"];
  v27  [label="165:  final double xscalepow = FastMath.pow(xscale, shape - 1)"];
  v28  [label="172:  final double xscalepowshape = xscalepow * xscale"];
  v29  [label="174:  return (shape / scale) * xscalepow * FastMath.exp(-xscalepowshape);"];
  v30  [label="178:  double cumulativeProbability(double x)"];
  v31  [label="179:  double ret"];
  v32  [label="180:  if (x <= 0.0)"];
  v33  [label="181:  ret = 0.0"];
  v34  [label="endif"];
  v35  [label="183:  ret = 1.0 - FastMath.exp(-FastMath.pow(x / scale, shape))"];
  v36  [label="185:  return ret;"];
  v37  [label="195:  double inverseCumulativeProbability(double p)"];
  v38  [label="196:  double ret"];
  v39  [label="197:  if (p < 0.0 || p > 1.0)"];
  v40  [label="198:  throw new OutOfRangeException(p, 0.0, 1.0)"];
  v41  [label="endif"];
  v42  [label="199:  if (p == 0)"];
  v43  [label="200:  ret = 0.0"];
  v44  [label="endif"];
  v45  [label="201:  if (p == 1)"];
  v46  [label="202:  ret = Double.POSITIVE_INFINITY"];
  v47  [label="endif"];
  v48  [label="204:  ret = scale * FastMath.pow(-FastMath.log(1.0 - p), 1.0 / shape)"];
  v49  [label="206:  return ret;"];
  v50  [label="217:  double getSolverAbsoluteAccuracy()"];
  v51  [label="218:  return solverAbsoluteAccuracy;"];
  v52  [label="227:  double getNumericalMean()"];
  v53  [label="228:  if (!numericalMeanIsCalculated)"];
  v54  [label="229:  numericalMean = calculateNumericalMean()"];
  v55  [label="230:  numericalMeanIsCalculated = true"];
  v56  [label="endif"];
  v57  [label="232:  return numericalMean;"];
  v58  [label="240:  double calculateNumericalMean()"];
  v59  [label="241:  final double sh = getShape()"];
  v60  [label="242:  final double sc = getScale()"];
  v61  [label="244:  return sc * FastMath.exp(Gamma.logGamma(1 + (1 / sh)));"];
  v62  [label="253:  double getNumericalVariance()"];
  v63  [label="254:  if (!numericalVarianceIsCalculated)"];
  v64  [label="255:  numericalVariance = calculateNumericalVariance()"];
  v65  [label="256:  numericalVarianceIsCalculated = true"];
  v66  [label="endif"];
  v67  [label="258:  return numericalVariance;"];
  v68  [label="266:  double calculateNumericalVariance()"];
  v69  [label="267:  final double sh = getShape()"];
  v70  [label="268:  final double sc = getScale()"];
  v71  [label="269:  final double mn = getNumericalMean()"];
  v72  [label="271:  return (sc * sc) * FastMath.exp(Gamma.logGamma(1 + (2 / sh))) -  (mn * mn);"];
  v73  [label="282:  double getSupportLowerBound()"];
  v74  [label="283:  return 0;"];
  v75  [label="295:  double getSupportUpperBound()"];
  v76  [label="296:  return Double.POSITIVE_INFINITY;"];
  v77  [label="300:  boolean isSupportLowerBoundInclusive()"];
  v78  [label="301:  return true;"];
  v79  [label="305:  boolean isSupportUpperBoundInclusive()"];
  v80  [label="306:  return false;"];
  v81  [label="316:  boolean isSupportConnected()"];
  v82  [label="317:  return true;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v7 -> v8;
  v8 -> v9;
  v9 -> v10  [label="True"];
  v9 -> v11  [label="False"];
  v11 -> v12;
  v12 -> v13  [label="True"];
  v12 -> v14  [label="False"];
  v14 -> v15;
  v15 -> v16;
  v16 -> v17;
  v18 -> v19;
  v20 -> v21;
  v22 -> v23;
  v23 -> v24  [label="True"];
  v23 -> v25  [label="False"];
  v25 -> v26;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v30 -> v31;
  v31 -> v32;
  v32 -> v33  [label="True"];
  v33 -> v34;
  v32 -> v35  [label="False"];
  v35 -> v34;
  v34 -> v36;
  v37 -> v38;
  v38 -> v39;
  v39 -> v40  [label="True"];
  v39 -> v42  [label="False"];
  v42 -> v43  [label="True"];
  v43 -> v44;
  v42 -> v45  [label="False"];
  v45 -> v46  [label="True"];
  v46 -> v47;
  v45 -> v48  [label="False"];
  v48 -> v47;
  v47 -> v44;
  v44 -> v41;
  v41 -> v49;
  v50 -> v51;
  v52 -> v53;
  v53 -> v54  [label="True"];
  v54 -> v55;
  v55 -> v56;
  v53 -> v56  [label="False"];
  v56 -> v57;
  v58 -> v59;
  v59 -> v60;
  v60 -> v61;
  v62 -> v63;
  v63 -> v64  [label="True"];
  v64 -> v65;
  v65 -> v66;
  v63 -> v66  [label="False"];
  v66 -> v67;
  v68 -> v69;
  v69 -> v70;
  v70 -> v71;
  v71 -> v72;
  v73 -> v74;
  v75 -> v76;
  v77 -> v78;
  v79 -> v80;
  v81 -> v82;
  // end-of-graph
}
