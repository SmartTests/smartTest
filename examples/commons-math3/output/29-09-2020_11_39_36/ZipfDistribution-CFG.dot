digraph ZipfDistribution_CFG {
  // graph-vertices
  v1  [label="57:  ZipfDistribution (final int numberOfElements, final double exponent)"];
  v2  [label="58:  this(new Well19937c(), numberOfElements, exponent)"];
  v3  [label="71:  ZipfDistribution (RandomGenerator rng, int numberOfElements, double exponent)"];
  v4  [label="75:  super(rng)"];
  v5  [label="77:  if (numberOfElements <= 0)"];
  v6  [label="78:  throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,  numberOfElements)"];
  v7  [label="endif"];
  v8  [label="81:  if (exponent <= 0)"];
  v9  [label="82:  throw new NotStrictlyPositiveException(LocalizedFormats.EXPONENT,  exponent)"];
  v10  [label="endif"];
  v11  [label="86:  this.numberOfElements = numberOfElements"];
  v12  [label="87:  this.exponent = exponent"];
  v13  [label="95:  int getNumberOfElements()"];
  v14  [label="96:  return numberOfElements;"];
  v15  [label="104:  double getExponent()"];
  v16  [label="105:  return exponent;"];
  v17  [label="109:  double probability(final int x)"];
  v18  [label="110:  if (x <= 0 || x > numberOfElements)"];
  v19  [label="111:  return 0.0;"];
  v20  [label="endif"];
  v21  [label="114:  return (1.0 / FastMath.pow(x, exponent)) / generalizedHarmonic(numberOfElements, exponent);"];
  v22  [label="118:  double cumulativeProbability(final int x)"];
  v23  [label="119:  if (x <= 0)"];
  v24  [label="120:  return 0.0;"];
  v25  [label="endif"];
  v26  [label="121:  if (x >= numberOfElements)"];
  v27  [label="122:  return 1.0;"];
  v28  [label="endif"];
  v29  [label="125:  return generalizedHarmonic(x, exponent) / generalizedHarmonic(numberOfElements, exponent);"];
  v30  [label="138:  double getNumericalMean()"];
  v31  [label="139:  if (!numericalMeanIsCalculated)"];
  v32  [label="140:  numericalMean = calculateNumericalMean()"];
  v33  [label="141:  numericalMeanIsCalculated = true"];
  v34  [label="endif"];
  v35  [label="143:  return numericalMean;"];
  v36  [label="151:  double calculateNumericalMean()"];
  v37  [label="152:  final int N = getNumberOfElements()"];
  v38  [label="153:  final double s = getExponent()"];
  v39  [label="155:  final double Hs1 = generalizedHarmonic(N, s - 1)"];
  v40  [label="156:  final double Hs = generalizedHarmonic(N, s)"];
  v41  [label="158:  return Hs1 / Hs;"];
  v42  [label="172:  double getNumericalVariance()"];
  v43  [label="173:  if (!numericalVarianceIsCalculated)"];
  v44  [label="174:  numericalVariance = calculateNumericalVariance()"];
  v45  [label="175:  numericalVarianceIsCalculated = true"];
  v46  [label="endif"];
  v47  [label="177:  return numericalVariance;"];
  v48  [label="185:  double calculateNumericalVariance()"];
  v49  [label="186:  final int N = getNumberOfElements()"];
  v50  [label="187:  final double s = getExponent()"];
  v51  [label="189:  final double Hs2 = generalizedHarmonic(N, s - 2)"];
  v52  [label="190:  final double Hs1 = generalizedHarmonic(N, s - 1)"];
  v53  [label="191:  final double Hs = generalizedHarmonic(N, s)"];
  v54  [label="193:  return (Hs2 / Hs) - ((Hs1 * Hs1) / (Hs * Hs));"];
  v55  [label="205:  double generalizedHarmonic(final int n, final double m)"];
  v56  [label="206:  double value = 0"];
  v57  [label="207:  for (  int k = n ; k > 0 ;   --k)"];
  v60  [label="endfor"];
  v61  [label="208:  value += 1.0 / FastMath.pow(k, m)"];
  v62  [label="210:  return value;"];
  v63  [label="220:  int getSupportLowerBound()"];
  v64  [label="221:  return 1;"];
  v65  [label="231:  int getSupportUpperBound()"];
  v66  [label="232:  return getNumberOfElements();"];
  v67  [label="242:  boolean isSupportConnected()"];
  v68  [label="243:  return true;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6  [label="True"];
  v5 -> v7  [label="False"];
  v7 -> v8;
  v8 -> v9  [label="True"];
  v8 -> v10  [label="False"];
  v10 -> v11;
  v11 -> v12;
  v13 -> v14;
  v15 -> v16;
  v17 -> v18;
  v18 -> v19  [label="True"];
  v18 -> v20  [label="False"];
  v20 -> v21;
  v22 -> v23;
  v23 -> v24  [label="True"];
  v23 -> v26  [label="False"];
  v26 -> v27  [label="True"];
  v26 -> v28  [label="False"];
  v28 -> v25;
  v25 -> v29;
  v30 -> v31;
  v31 -> v32  [label="True"];
  v32 -> v33;
  v33 -> v34;
  v31 -> v34  [label="False"];
  v34 -> v35;
  v36 -> v37;
  v37 -> v38;
  v38 -> v39;
  v39 -> v40;
  v40 -> v41;
  v42 -> v43;
  v43 -> v44  [label="True"];
  v44 -> v45;
  v45 -> v46;
  v43 -> v46  [label="False"];
  v46 -> v47;
  v48 -> v49;
  v49 -> v50;
  v50 -> v51;
  v51 -> v52;
  v52 -> v53;
  v53 -> v54;
  v55 -> v56;
  v56 -> v57;
  v57 -> v60  [label="False"];
  v57 -> v61  [label="True"];
  v61 -> v57;
  v60 -> v62;
  v63 -> v64;
  v65 -> v66;
  v67 -> v68;
  // end-of-graph
}
