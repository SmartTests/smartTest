digraph PolynomialFunction_CFG {
  // graph-vertices
  v1  [label="67:  PolynomialFunction (double c[])"];
  v2  [label="69:  super()"];
  v3  [label="70:  MathUtils.checkNotNull(c)"];
  v4  [label="71:  int n = c.length"];
  v5  [label="72:  if (n == 0)"];
  v6  [label="73:  throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY)"];
  v7  [label="endif"];
  v8  [label="75:  while ((n > 1))"];
  v9  [label="endwhile"];
  v10  [label="76:  --n"];
  v11  [label="78:  this.coefficients = new double[n]"];
  v12  [label="79:  System.arraycopy(c, 0, this.coefficients, 0, n)"];
  v13  [label="93:  double value(double x)"];
  v14  [label="94:  return evaluate(coefficients, x);"];
  v15  [label="102:  int degree()"];
  v16  [label="103:  return coefficients.length - 1;"];
  v17  [label="114:  double[] getCoefficients()"];
  v18  [label="115:  return coefficients.clone();"];
  v19  [label="128:  double evaluate(double[] coefficients, double argument)"];
  v20  [label="130:  MathUtils.checkNotNull(coefficients)"];
  v21  [label="131:  int n = coefficients.length"];
  v22  [label="132:  if (n == 0)"];
  v23  [label="133:  throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY)"];
  v24  [label="endif"];
  v25  [label="135:  double result = coefficients[n - 1]"];
  v26  [label="136:  for (  int j = n - 2 ; j >= 0 ;   j--)"];
  v29  [label="endfor"];
  v30  [label="137:  result = argument * result + coefficients[j]"];
  v31  [label="139:  return result;"];
  v32  [label="148:  DerivativeStructure value(final DerivativeStructure t)"];
  v33  [label="150:  MathUtils.checkNotNull(coefficients)"];
  v34  [label="151:  int n = coefficients.length"];
  v35  [label="152:  if (n == 0)"];
  v36  [label="153:  throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY)"];
  v37  [label="endif"];
  v38  [label="155:  DerivativeStructure result = new DerivativeStructure(t.getFreeParameters(), t.getOrder(), coefficients[n - 1])"];
  v39  [label="157:  for (  int j = n - 2 ; j >= 0 ;   j--)"];
  v42  [label="endfor"];
  v43  [label="158:  result = result.multiply(t).add(coefficients[j])"];
  v44  [label="160:  return result;"];
  v45  [label="169:  PolynomialFunction add(final PolynomialFunction p)"];
  v46  [label="171:  final int lowLength  = FastMath.min(coefficients.length, p.coefficients.length)"];
  v47  [label="172:  final int highLength = FastMath.max(coefficients.length, p.coefficients.length)"];
  v48  [label="175:  double[] newCoefficients = new double[highLength]"];
  v49  [label="176:  for (  int i = 0 ; i < lowLength ;   ++i)"];
  v52  [label="endfor"];
  v53  [label="177:  newCoefficients[i] = coefficients[i] + p.coefficients[i]"];
  v54  [label="179:  System.arraycopy((coefficients.length < p.coefficients.length) ?  p.coefficients : coefficients,  lowLength,  newCoefficients, lowLength,  highLength - lowLength)"];
  v55  [label="185:  return new PolynomialFunction(newCoefficients);"];
  v56  [label="194:  PolynomialFunction subtract(final PolynomialFunction p)"];
  v57  [label="196:  int lowLength  = FastMath.min(coefficients.length, p.coefficients.length)"];
  v58  [label="197:  int highLength = FastMath.max(coefficients.length, p.coefficients.length)"];
  v59  [label="200:  double[] newCoefficients = new double[highLength]"];
  v60  [label="201:  for (  int i = 0 ; i < lowLength ;   ++i)"];
  v63  [label="endfor"];
  v64  [label="202:  newCoefficients[i] = coefficients[i] - p.coefficients[i]"];
  v65  [label="204:  if (coefficients.length < p.coefficients.length)"];
  v66  [label="205:  for (  int i = lowLength ; i < highLength ;   ++i)"];
  v69  [label="endfor"];
  v70  [label="206:  newCoefficients[i] = -p.coefficients[i]"];
  v71  [label="endif"];
  v72  [label="209:  System.arraycopy(coefficients, lowLength, newCoefficients, lowLength,  highLength - lowLength)"];
  v73  [label="213:  return new PolynomialFunction(newCoefficients);"];
  v74  [label="221:  PolynomialFunction negate()"];
  v75  [label="222:  double[] newCoefficients = new double[coefficients.length]"];
  v76  [label="223:  for (  int i = 0 ; i < coefficients.length ;   ++i)"];
  v79  [label="endfor"];
  v80  [label="224:  newCoefficients[i] = -coefficients[i]"];
  v81  [label="226:  return new PolynomialFunction(newCoefficients);"];
  v82  [label="235:  PolynomialFunction multiply(final PolynomialFunction p)"];
  v83  [label="236:  double[] newCoefficients = new double[coefficients.length + p.coefficients.length - 1]"];
  v84  [label="238:  for (  int i = 0 ; i < newCoefficients.length ;   ++i)"];
  v87  [label="endfor"];
  v88  [label="239:  newCoefficients[i] = 0.0"];
  v89  [label="240:  int j = FastMath.max(0, i + 1 - p.coefficients.length)"];
  v90  [label="241:  for (j < FastMath.min(coefficients.length, i + 1))"];
  v91  [label="242:  ++j"];
  v92  [label="endfor"];
  v93  [label="243:  newCoefficients[i] += coefficients[j] * p.coefficients[i-j]"];
  v94  [label="247:  return new PolynomialFunction(newCoefficients);"];
  v95  [label="258:  double[] differentiate(double[] coefficients)"];
  v96  [label="260:  MathUtils.checkNotNull(coefficients)"];
  v97  [label="261:  int n = coefficients.length"];
  v98  [label="262:  if (n == 0)"];
  v99  [label="263:  throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY)"];
  v100  [label="endif"];
  v101  [label="265:  if (n == 1)"];
  v102  [label="266:  return new double[]{0};"];
  v103  [label="endif"];
  v104  [label="268:  double[] result = new double[n - 1]"];
  v105  [label="269:  for (  int i = n - 1 ; i > 0 ;   i--)"];
  v108  [label="endfor"];
  v109  [label="270:  result[i - 1] = i * coefficients[i]"];
  v110  [label="272:  return result;"];
  v111  [label="280:  PolynomialFunction polynomialDerivative()"];
  v112  [label="281:  return new PolynomialFunction(differentiate(coefficients));"];
  v113  [label="289:  UnivariateFunction derivative()"];
  v114  [label="290:  return polynomialDerivative();"];
  v115  [label="309:  String toString()"];
  v116  [label="310:  StringBuilder s = new StringBuilder()"];
  v117  [label="311:  if (coefficients[0] == 0.0)"];
  v118  [label="312:  if (coefficients.length == 1)"];
  v119  [label="313:  return '0';"];
  v120  [label="endif"];
  v121  [label="endif"];
  v122  [label="316:  s.append(toString(coefficients[0]))"];
  v123  [label="319:  for (  int i = 1 ; i < coefficients.length ;   ++i)"];
  v126  [label="endfor"];
  v127  [label="320:  if (coefficients[i] != 0)"];
  v128  [label="321:  if (s.length() > 0)"];
  v129  [label="322:  if (coefficients[i] < 0)"];
  v130  [label="323:  s.append(' - ')"];
  v131  [label="endif"];
  v132  [label="325:  s.append(' + ')"];
  v133  [label="endif"];
  v134  [label="328:  if (coefficients[i] < 0)"];
  v135  [label="329:  s.append('-')"];
  v136  [label="endif"];
  v137  [label="333:  double absAi = FastMath.abs(coefficients[i])"];
  v138  [label="334:  if ((absAi - 1) != 0)"];
  v139  [label="335:  s.append(toString(absAi))"];
  v140  [label="336:  s.append(' ')"];
  v141  [label="endif"];
  v142  [label="339:  s.append('x')"];
  v143  [label="340:  if (i > 1)"];
  v144  [label="341:  s.append('^')"];
  v145  [label="342:  s.append(Integer.toString(i))"];
  v146  [label="endif"];
  v147  [label="endif"];
  v148  [label="347:  return s.toString();"];
  v149  [label="356:  String toString(double coeff)"];
  v150  [label="357:  final String c = Double.toString(coeff)"];
  v151  [label="358:  if (c.endsWith('.0'))"];
  v152  [label="359:  return c.substring(0, c.length() - 2);"];
  v153  [label="endif"];
  v154  [label="361:  return c;"];
  v155  [label="367:  int hashCode()"];
  v156  [label="368:  final int prime = 31"];
  v157  [label="369:  int result = 1"];
  v158  [label="370:  result = prime * result + Arrays.hashCode(coefficients)"];
  v159  [label="371:  return result;"];
  v160  [label="376:  boolean equals(Object obj)"];
  v161  [label="377:  if (this == obj)"];
  v162  [label="378:  return true;"];
  v163  [label="endif"];
  v164  [label="380:  if (!(obj instanceof PolynomialFunction))"];
  v165  [label="381:  return false;"];
  v166  [label="endif"];
  v167  [label="383:  PolynomialFunction other = (PolynomialFunction) obj"];
  v168  [label="384:  if (!Arrays.equals(coefficients, other.coefficients))"];
  v169  [label="385:  return false;"];
  v170  [label="endif"];
  v171  [label="387:  return true;"];
  v172  [label="397:  double[] gradient(double x, double ... parameters)"];
  v173  [label="398:  final double[] gradient = new double[parameters.length]"];
  v174  [label="399:  double xn = 1.0"];
  v175  [label="400:  for (  int i = 0 ; i < parameters.length ;   ++i)"];
  v178  [label="endfor"];
  v179  [label="401:  gradient[i] = xn"];
  v180  [label="402:  xn *= x"];
  v181  [label="404:  return gradient;"];
  v182  [label="408:  double value(final double x, final double ... parameters)"];
  v183  [label="410:  return PolynomialFunction.evaluate(parameters, x);"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6  [label="True"];
  v5 -> v7  [label="False"];
  v7 -> v8;
  v8 -> v9  [label="False"];
  v8 -> v10  [label="True"];
  v10 -> v8;
  v9 -> v11;
  v11 -> v12;
  v13 -> v14;
  v15 -> v16;
  v17 -> v18;
  v19 -> v20;
  v20 -> v21;
  v21 -> v22;
  v22 -> v23  [label="True"];
  v22 -> v24  [label="False"];
  v24 -> v25;
  v25 -> v26;
  v26 -> v29  [label="False"];
  v26 -> v30  [label="True"];
  v30 -> v26;
  v29 -> v31;
  v32 -> v33;
  v33 -> v34;
  v34 -> v35;
  v35 -> v36  [label="True"];
  v35 -> v37  [label="False"];
  v37 -> v38;
  v38 -> v39;
  v39 -> v42  [label="False"];
  v39 -> v43  [label="True"];
  v43 -> v39;
  v42 -> v44;
  v45 -> v46;
  v46 -> v47;
  v47 -> v48;
  v48 -> v49;
  v49 -> v52  [label="False"];
  v49 -> v53  [label="True"];
  v53 -> v49;
  v52 -> v54;
  v54 -> v55;
  v56 -> v57;
  v57 -> v58;
  v58 -> v59;
  v59 -> v60;
  v60 -> v63  [label="False"];
  v60 -> v64  [label="True"];
  v64 -> v60;
  v63 -> v65;
  v65 -> v66  [label="True"];
  v66 -> v69  [label="False"];
  v66 -> v70  [label="True"];
  v70 -> v66;
  v69 -> v71;
  v65 -> v72  [label="False"];
  v72 -> v71;
  v71 -> v73;
  v74 -> v75;
  v75 -> v76;
  v76 -> v79  [label="False"];
  v76 -> v80  [label="True"];
  v80 -> v76;
  v79 -> v81;
  v82 -> v83;
  v83 -> v84;
  v84 -> v87  [label="False"];
  v84 -> v88  [label="True"];
  v88 -> v89;
  v89 -> v90;
  v90 -> v92  [label="False"];
  v90 -> v93  [label="True"];
  v93 -> v91;
  v91 -> v90;
  v92 -> v84;
  v87 -> v94;
  v95 -> v96;
  v96 -> v97;
  v97 -> v98;
  v98 -> v99  [label="True"];
  v98 -> v100  [label="False"];
  v100 -> v101;
  v101 -> v102  [label="True"];
  v101 -> v103  [label="False"];
  v103 -> v104;
  v104 -> v105;
  v105 -> v108  [label="False"];
  v105 -> v109  [label="True"];
  v109 -> v105;
  v108 -> v110;
  v111 -> v112;
  v113 -> v114;
  v115 -> v116;
  v116 -> v117;
  v117 -> v118  [label="True"];
  v118 -> v119  [label="True"];
  v118 -> v120  [label="False"];
  v120 -> v121;
  v117 -> v122  [label="False"];
  v122 -> v121;
  v121 -> v123;
  v123 -> v126  [label="False"];
  v123 -> v127  [label="True"];
  v127 -> v128  [label="True"];
  v128 -> v129  [label="True"];
  v129 -> v130  [label="True"];
  v130 -> v131;
  v129 -> v132  [label="False"];
  v132 -> v131;
  v131 -> v133;
  v128 -> v134  [label="False"];
  v134 -> v135  [label="True"];
  v135 -> v136;
  v134 -> v136  [label="False"];
  v136 -> v133;
  v133 -> v137;
  v137 -> v138;
  v138 -> v139  [label="True"];
  v139 -> v140;
  v140 -> v141;
  v138 -> v141  [label="False"];
  v141 -> v142;
  v142 -> v143;
  v143 -> v144  [label="True"];
  v144 -> v145;
  v145 -> v146;
  v143 -> v146  [label="False"];
  v146 -> v147;
  v127 -> v147  [label="False"];
  v147 -> v123;
  v126 -> v148;
  v149 -> v150;
  v150 -> v151;
  v151 -> v152  [label="True"];
  v151 -> v154  [label="False"];
  v155 -> v156;
  v156 -> v157;
  v157 -> v158;
  v158 -> v159;
  v160 -> v161;
  v161 -> v162  [label="True"];
  v161 -> v163  [label="False"];
  v163 -> v164;
  v164 -> v165  [label="True"];
  v164 -> v166  [label="False"];
  v166 -> v167;
  v167 -> v168;
  v168 -> v169  [label="True"];
  v168 -> v170  [label="False"];
  v170 -> v171;
  v172 -> v173;
  v173 -> v174;
  v174 -> v175;
  v175 -> v178  [label="False"];
  v175 -> v179  [label="True"];
  v179 -> v180;
  v180 -> v175;
  v178 -> v181;
  v182 -> v183;
  // end-of-graph
}
