digraph PolynomialsUtils_CFG {
  // graph-vertices
  v1  [label="51:  static"];
  v2  [label="55:  CHEBYSHEV_COEFFICIENTS = null"];
  v3  [label="56:  CHEBYSHEV_COEFFICIENTS.add(BigFraction.ONE)"];
  v4  [label="57:  CHEBYSHEV_COEFFICIENTS.add(BigFraction.ZERO)"];
  v5  [label="58:  CHEBYSHEV_COEFFICIENTS.add(BigFraction.ONE)"];
  v6  [label="62:  HERMITE_COEFFICIENTS = new ArrayList<BigFraction>()"];
  v7  [label="63:  HERMITE_COEFFICIENTS.add(BigFraction.ONE)"];
  v8  [label="64:  HERMITE_COEFFICIENTS.add(BigFraction.ZERO)"];
  v9  [label="65:  HERMITE_COEFFICIENTS.add(BigFraction.TWO)"];
  v10  [label="69:  LAGUERRE_COEFFICIENTS = new ArrayList<BigFraction>()"];
  v11  [label="70:  LAGUERRE_COEFFICIENTS.add(BigFraction.ONE)"];
  v12  [label="71:  LAGUERRE_COEFFICIENTS.add(BigFraction.ONE)"];
  v13  [label="72:  LAGUERRE_COEFFICIENTS.add(BigFraction.MINUS_ONE)"];
  v14  [label="76:  LEGENDRE_COEFFICIENTS = new ArrayList<BigFraction>()"];
  v15  [label="77:  LEGENDRE_COEFFICIENTS.add(BigFraction.ONE)"];
  v16  [label="78:  LEGENDRE_COEFFICIENTS.add(BigFraction.ZERO)"];
  v17  [label="79:  LEGENDRE_COEFFICIENTS.add(BigFraction.ONE)"];
  v18  [label="82:  JACOBI_COEFFICIENTS = new HashMap<JacobiKey, List<BigFraction>>()"];
  v19  [label="89:  PolynomialsUtils ()"];
  v20  [label="105:  PolynomialFunction createChebyshevPolynomial(final int degree)"];
  v21  [label="106:  return buildPolynomial(degree, CHEBYSHEV_COEFFICIENTS, new RecurrenceCoefficientsGenerator() { private final BigFraction[] coeffs = { BigFraction.ZERO, BigFraction.TWO, BigFraction.ONE }; /** {@inheritDoc} */ public BigFraction[] generate(int k) { return coeffs; } });"];
  v22  [label="130:  PolynomialFunction createHermitePolynomial(final int degree)"];
  v23  [label="131:  return buildPolynomial(degree, HERMITE_COEFFICIENTS, new RecurrenceCoefficientsGenerator() { /** {@inheritDoc} */ public BigFraction[] generate(int k) { return new BigFraction[] { BigFraction.ZERO, BigFraction.TWO, new BigFraction(2 * k)}; } });"];
  v24  [label="156:  PolynomialFunction createLaguerrePolynomial(final int degree)"];
  v25  [label="157:  return buildPolynomial(degree, LAGUERRE_COEFFICIENTS, new RecurrenceCoefficientsGenerator() { /** {@inheritDoc} */ public BigFraction[] generate(int k) { final int kP1 = k + 1; return new BigFraction[] { new BigFraction(2 * k + 1, kP1), new BigFraction(-1, kP1), new BigFraction(k, kP1)}; } });"];
  v26  [label="183:  PolynomialFunction createLegendrePolynomial(final int degree)"];
  v27  [label="184:  return buildPolynomial(degree, LEGENDRE_COEFFICIENTS,  new RecurrenceCoefficientsGenerator() { /** {@inheritDoc} */ public BigFraction[] generate(int k) { final int kP1 = k + 1; return new BigFraction[] { BigFraction.ZERO, new BigFraction(k + kP1, kP1), new BigFraction(k, kP1)}; } });"];
  v28  [label="214:  PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)"];
  v29  [label="217:  final JacobiKey key = new JacobiKey(v, w)"];
  v30  [label="219:  if (!JACOBI_COEFFICIENTS.containsKey(key))"];
  v31  [label="222:  final List<BigFraction> list = new ArrayList<BigFraction>()"];
  v32  [label="223:  JACOBI_COEFFICIENTS.put(key, list)"];
  v33  [label="226:  list.add(BigFraction.ONE)"];
  v34  [label="229:  list.add(new BigFraction(v - w, 2))"];
  v35  [label="230:  list.add(new BigFraction(2 + v + w, 2))"];
  v36  [label="endif"];
  v37  [label="234:  return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),  new RecurrenceCoefficientsGenerator() { /** {@inheritDoc} */ public BigFraction[] generate(int k) { k++; final int kvw  = k + v + w; final int twoKvw = kvw + k; final int twoKvwM1 = twoKvw - 1; final int twoKvwM2 = twoKvw - 2; final int den  = 2 * k *  kvw * twoKvwM2;  return new BigFraction[] { new BigFraction(twoKvwM1 * (v * v - w * w), den), new BigFraction(twoKvwM1 * twoKvw * twoKvwM2, den), new BigFraction(2 * (k + v - 1) * (k + w - 1) * twoKvw, den) }; } });"];
  v38  [label="268:  JacobiKey (final int v, final int w)"];
  v39  [label="269:  this.v = v"];
  v40  [label="270:  this.w = w"];
  v41  [label="277:  int hashCode()"];
  v42  [label="278:  return (v << 16) ^ w;"];
  v43  [label="286:  boolean equals(final Object key)"];
  v44  [label="288:  if ((key == null) || !(key instanceof JacobiKey))"];
  v45  [label="289:  return false;"];
  v46  [label="endif"];
  v47  [label="292:  final JacobiKey otherK = (JacobiKey) key"];
  v48  [label="293:  return (v == otherK.v) && (w == otherK.w);"];
  v49  [label="322:  double[] shift(final double[] coefficients,  final double shift)"];
  v50  [label="324:  final int dp1 = coefficients.length"];
  v51  [label="325:  final double[] newCoefficients = new double[dp1]"];
  v52  [label="328:  final int[][] coeff = new int[dp1][dp1]"];
  v53  [label="329:  for (  int i = 0 ; i < dp1 ;   i++)"];
  v56  [label="endfor"];
  v57  [label="330:  for (  int j = 0 ; j <= i ;   j++)"];
  v60  [label="endfor"];
  v61  [label="331:  coeff[i][j] = (int) CombinatoricsUtils.binomialCoefficient(i, j)"];
  v62  [label="336:  for (  int i = 0 ; i < dp1 ;   i++)"];
  v65  [label="endfor"];
  v66  [label="337:  newCoefficients[0] += coefficients[i] * FastMath.pow(shift, i)"];
  v67  [label="341:  final int d = dp1 - 1"];
  v68  [label="342:  for (  int i = 0 ; i < d ;   i++)"];
  v71  [label="endfor"];
  v72  [label="343:  for (  int j = i ; j < d ;   j++)"];
  v75  [label="endfor"];
  v76  [label="344:  newCoefficients[i + 1] += coeff[j + 1][j - i] * coefficients[j + 1] * FastMath.pow(shift, j - i)"];
  v77  [label="349:  return newCoefficients;"];
  v78  [label="359:  PolynomialFunction buildPolynomial(final int degree, final List<BigFraction> coefficients, final RecurrenceCoefficientsGenerator generator)"];
  v79  [label="363:  final int maxDegree = (int) FastMath.floor(FastMath.sqrt(2 * coefficients.size())) - 1"];
  v80  [label="364:  synchronized (PolynomialsUtils.class)"];
  v81  [label="365:  if (degree > maxDegree)"];
  v82  [label="366:  computeUpToDegree(degree, maxDegree, generator, coefficients)"];
  v83  [label="endif"];
  v84  [label="end-synchronized"];
  v85  [label="378:  final int start = degree * (degree + 1) / 2"];
  v86  [label="380:  final double[] a = new double[degree + 1]"];
  v87  [label="381:  for (  int i = 0 ; i <= degree ;   ++i)"];
  v90  [label="endfor"];
  v91  [label="382:  a[i] = coefficients.get(start + i).doubleValue()"];
  v92  [label="386:  return new PolynomialFunction(a);"];
  v93  [label="396:  void computeUpToDegree(final int degree, final int maxDegree, final RecurrenceCoefficientsGenerator generator, final List<BigFraction> coefficients)"];
  v94  [label="400:  int startK = (maxDegree - 1) * maxDegree / 2"];
  v95  [label="401:  for (  int k = maxDegree ; k < degree ;   ++k)"];
  v98  [label="endfor"];
  v99  [label="404:  int startKm1 = startK"];
  v100  [label="405:  startK += k"];
  v101  [label="408:  BigFraction[] ai = generator.generate(k)"];
  v102  [label="410:  BigFraction ck = coefficients.get(startK)"];
  v103  [label="411:  BigFraction ckm1 = coefficients.get(startKm1)"];
  v104  [label="414:  coefficients.add(ck.multiply(ai[0]).subtract(ckm1.multiply(ai[2])))"];
  v105  [label="417:  for (  int i = 1 ; i < k ;   ++i)"];
  v108  [label="endfor"];
  v109  [label="418:  final BigFraction ckPrev = ck"];
  v110  [label="419:  ck = coefficients.get(startK + i)"];
  v111  [label="420:  ckm1 = coefficients.get(startKm1 + i)"];
  v112  [label="421:  coefficients.add(ck.multiply(ai[0]).add(ckPrev.multiply(ai[1])).subtract(ckm1.multiply(ai[2])))"];
  v113  [label="425:  final BigFraction ckPrev = ck"];
  v114  [label="426:  ck = coefficients.get(startK + k)"];
  v115  [label="427:  coefficients.add(ck.multiply(ai[0]).add(ckPrev.multiply(ai[1])))"];
  v116  [label="430:  coefficients.add(ck.multiply(ai[1]))"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8;
  v8 -> v9;
  v9 -> v10;
  v10 -> v11;
  v11 -> v12;
  v12 -> v13;
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v17;
  v17 -> v18;
  v20 -> v21;
  v22 -> v23;
  v24 -> v25;
  v26 -> v27;
  v28 -> v29;
  v29 -> v30;
  v30 -> v31  [label="True"];
  v31 -> v32;
  v32 -> v33;
  v33 -> v34;
  v34 -> v35;
  v35 -> v36;
  v30 -> v36  [label="False"];
  v36 -> v37;
  v38 -> v39;
  v39 -> v40;
  v41 -> v42;
  v43 -> v44;
  v44 -> v45  [label="True"];
  v44 -> v46  [label="False"];
  v46 -> v47;
  v47 -> v48;
  v49 -> v50;
  v50 -> v51;
  v51 -> v52;
  v52 -> v53;
  v53 -> v56  [label="False"];
  v53 -> v57  [label="True"];
  v57 -> v60  [label="False"];
  v57 -> v61  [label="True"];
  v61 -> v57;
  v60 -> v53;
  v56 -> v62;
  v62 -> v65  [label="False"];
  v62 -> v66  [label="True"];
  v66 -> v62;
  v65 -> v67;
  v67 -> v68;
  v68 -> v71  [label="False"];
  v68 -> v72  [label="True"];
  v72 -> v75  [label="False"];
  v72 -> v76  [label="True"];
  v76 -> v72;
  v75 -> v68;
  v71 -> v77;
  v78 -> v79;
  v79 -> v80;
  v80 -> v81;
  v81 -> v82  [label="True"];
  v82 -> v83;
  v81 -> v83  [label="False"];
  v83 -> v84;
  v84 -> v85;
  v85 -> v86;
  v86 -> v87;
  v87 -> v90  [label="False"];
  v87 -> v91  [label="True"];
  v91 -> v87;
  v90 -> v92;
  v93 -> v94;
  v94 -> v95;
  v95 -> v98  [label="False"];
  v95 -> v99  [label="True"];
  v99 -> v100;
  v100 -> v101;
  v101 -> v102;
  v102 -> v103;
  v103 -> v104;
  v104 -> v105;
  v105 -> v108  [label="False"];
  v105 -> v109  [label="True"];
  v109 -> v110;
  v110 -> v111;
  v111 -> v112;
  v112 -> v105;
  v108 -> v113;
  v113 -> v114;
  v114 -> v115;
  v115 -> v116;
  v116 -> v95;
  // end-of-graph
}
