digraph BicubicSplineInterpolator_CFG {
  // graph-vertices
  v1  [label="38:  BicubicSplineInterpolatingFunction interpolate(final double[] xval, final double[] yval, final double[][] fval)"];
  v2  [label="43:  if (xval.length == 1 || yval.length == 0 || fval.length == 0)"];
  v3  [label="44:  throw new NoDataException()"];
  v4  [label="endif"];
  v5  [label="46:  if (xval.length != fval.length)"];
  v6  [label="47:  throw new DimensionMismatchException(xval.length, fval.length)"];
  v7  [label="endif"];
  v8  [label="50:  MathArrays.checkOrder(xval)"];
  v9  [label="51:  MathArrays.checkOrder(yval)"];
  v10  [label="53:  final int xLen = xval.length"];
  v11  [label="54:  final int yLen = yval.length"];
  v12  [label="60:  final double[][] fX = new double[yLen][xLen]"];
  v13  [label="61:  for (  int i = 0 ; i < xLen ;   i++)"];
  v16  [label="endfor"];
  v17  [label="62:  if (fval[i].length != yLen)"];
  v18  [label="63:  throw new DimensionMismatchException(fval[i].length, yLen)"];
  v19  [label="endif"];
  v20  [label="66:  for (  int j = 0 ; j < yLen ;   j++)"];
  v23  [label="endfor"];
  v24  [label="67:  fX[j][i] = fval[i][j]"];
  v25  [label="71:  final SplineInterpolator spInterpolator = new SplineInterpolator()"];
  v26  [label="75:  final PolynomialSplineFunction[] ySplineX = new PolynomialSplineFunction[yLen]"];
  v27  [label="76:  for (  int j = 0 ; j < yLen ;   j++)"];
  v30  [label="endfor"];
  v31  [label="77:  ySplineX[j] = spInterpolator.interpolate(xval, fX[j])"];
  v32  [label="82:  final PolynomialSplineFunction[] xSplineY = new PolynomialSplineFunction[xLen]"];
  v33  [label="83:  for (  int i = 0 ; i < xLen ;   i++)"];
  v36  [label="endfor"];
  v37  [label="84:  xSplineY[i] = spInterpolator.interpolate(yval, fval[i])"];
  v38  [label="88:  final double[][] dFdX = new double[xLen][yLen]"];
  v39  [label="89:  for (  int j = 0 ; j < yLen ;   j++)"];
  v42  [label="endfor"];
  v43  [label="90:  final UnivariateFunction f = ySplineX[j].derivative()"];
  v44  [label="91:  for (  int i = 0 ; i < xLen ;   i++)"];
  v47  [label="endfor"];
  v48  [label="92:  dFdX[i][j] = f.value(xval[i])"];
  v49  [label="97:  final double[][] dFdY = new double[xLen][yLen]"];
  v50  [label="98:  for (  int i = 0 ; i < xLen ;   i++)"];
  v53  [label="endfor"];
  v54  [label="99:  final UnivariateFunction f = xSplineY[i].derivative()"];
  v55  [label="100:  for (  int j = 0 ; j < yLen ;   j++)"];
  v58  [label="endfor"];
  v59  [label="101:  dFdY[i][j] = f.value(yval[j])"];
  v60  [label="106:  final double[][] d2FdXdY = new double[xLen][yLen]"];
  v61  [label="107:  for (  int i = 0 ; i < xLen ;   i++)"];
  v64  [label="endfor"];
  v65  [label="108:  final int nI = nextIndex(i, xLen)"];
  v66  [label="109:  final int pI = previousIndex(i)"];
  v67  [label="110:  for (  int j = 0 ; j < yLen ;   j++)"];
  v70  [label="endfor"];
  v71  [label="111:  final int nJ = nextIndex(j, yLen)"];
  v72  [label="112:  final int pJ = previousIndex(j)"];
  v73  [label="113:  d2FdXdY[i][j] = (fval[nI][nJ] - fval[nI][pJ] -  fval[pI][nJ] + fval[pI][pJ]) / ((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ]))"];
  v74  [label="120:  return new BicubicSplineInterpolatingFunction(xval, yval, fval, dFdX, dFdY, d2FdXdY);"];
  v75  [label="132:  int nextIndex(int i, int max)"];
  v76  [label="133:  final int index = i + 1"];
  v77  [label="134:  return index < max ? index : index - 1;"];
  v78  [label="144:  int previousIndex(int i)"];
  v79  [label="145:  final int index = i - 1"];
  v80  [label="146:  return index >= 0 ? index : 0;"];
  // graph-edges
  v1 -> v2;
  v2 -> v3  [label="True"];
  v2 -> v4  [label="False"];
  v4 -> v5;
  v5 -> v6  [label="True"];
  v5 -> v7  [label="False"];
  v7 -> v8;
  v8 -> v9;
  v9 -> v10;
  v10 -> v11;
  v11 -> v12;
  v12 -> v13;
  v13 -> v16  [label="False"];
  v13 -> v17  [label="True"];
  v17 -> v18  [label="True"];
  v17 -> v19  [label="False"];
  v19 -> v20;
  v20 -> v23  [label="False"];
  v20 -> v24  [label="True"];
  v24 -> v20;
  v23 -> v13;
  v16 -> v25;
  v25 -> v26;
  v26 -> v27;
  v27 -> v30  [label="False"];
  v27 -> v31  [label="True"];
  v31 -> v27;
  v30 -> v32;
  v32 -> v33;
  v33 -> v36  [label="False"];
  v33 -> v37  [label="True"];
  v37 -> v33;
  v36 -> v38;
  v38 -> v39;
  v39 -> v42  [label="False"];
  v39 -> v43  [label="True"];
  v43 -> v44;
  v44 -> v47  [label="False"];
  v44 -> v48  [label="True"];
  v48 -> v44;
  v47 -> v39;
  v42 -> v49;
  v49 -> v50;
  v50 -> v53  [label="False"];
  v50 -> v54  [label="True"];
  v54 -> v55;
  v55 -> v58  [label="False"];
  v55 -> v59  [label="True"];
  v59 -> v55;
  v58 -> v50;
  v53 -> v60;
  v60 -> v61;
  v61 -> v64  [label="False"];
  v61 -> v65  [label="True"];
  v65 -> v66;
  v66 -> v67;
  v67 -> v70  [label="False"];
  v67 -> v71  [label="True"];
  v71 -> v72;
  v72 -> v73;
  v73 -> v67;
  v70 -> v61;
  v64 -> v74;
  v75 -> v76;
  v76 -> v77;
  v78 -> v79;
  v79 -> v80;
  // end-of-graph
}
