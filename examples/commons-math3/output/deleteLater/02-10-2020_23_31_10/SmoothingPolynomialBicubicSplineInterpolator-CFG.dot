digraph SmoothingPolynomialBicubicSplineInterpolator_CFG {
  // graph-vertices
  v1  [label="53:  SmoothingPolynomialBicubicSplineInterpolator ()"];
  v2  [label="54:  this(3)"];
  v3  [label="61:  SmoothingPolynomialBicubicSplineInterpolator (int degree)"];
  v4  [label="63:  this(degree, degree)"];
  v5  [label="73:  SmoothingPolynomialBicubicSplineInterpolator (int xDegree, int yDegree)"];
  v6  [label="75:  if (xDegree < 0)"];
  v7  [label="76:  throw new NotPositiveException(xDegree)"];
  v8  [label="endif"];
  v9  [label="78:  if (yDegree < 0)"];
  v10  [label="79:  throw new NotPositiveException(yDegree)"];
  v11  [label="endif"];
  v12  [label="81:  this.xDegree = xDegree"];
  v13  [label="82:  this.yDegree = yDegree"];
  v14  [label="84:  final double safeFactor = 1e2"];
  v15  [label="85:  final SimpleVectorValueChecker checker = new SimpleVectorValueChecker(safeFactor * Precision.EPSILON,  safeFactor * Precision.SAFE_MIN)"];
  v16  [label="88:  xFitter = new PolynomialFitter(new GaussNewtonOptimizer(false, checker))"];
  v17  [label="89:  yFitter = new PolynomialFitter(new GaussNewtonOptimizer(false, checker))"];
  v18  [label="96:  BicubicSplineInterpolatingFunction interpolate(final double[] xval, final double[] yval, final double[][] fval)"];
  v19  [label="101:  if (xval.length == 0 || yval.length == 0 || fval.length == 0)"];
  v20  [label="102:  throw new NoDataException()"];
  v21  [label="endif"];
  v22  [label="104:  if (xval.length != fval.length)"];
  v23  [label="105:  throw new DimensionMismatchException(xval.length, fval.length)"];
  v24  [label="endif"];
  v25  [label="108:  final int xLen = xval.length"];
  v26  [label="109:  final int yLen = yval.length"];
  v27  [label="111:  for (  int i = 0 ; i < xLen ;   i++)"];
  v30  [label="endfor"];
  v31  [label="112:  if (fval[i].length != yLen)"];
  v32  [label="113:  throw new DimensionMismatchException(fval[i].length, yLen)"];
  v33  [label="endif"];
  v34  [label="117:  MathArrays.checkOrder(xval)"];
  v35  [label="118:  MathArrays.checkOrder(yval)"];
  v36  [label="122:  final PolynomialFunction[] yPolyX = new PolynomialFunction[yLen]"];
  v37  [label="123:  for (  int j = 0 ; j < yLen ;   j++)"];
  v40  [label="endfor"];
  v41  [label="124:  xFitter.clearObservations()"];
  v42  [label="125:  for (  int i = 0 ; i < xLen ;   i++)"];
  v45  [label="endfor"];
  v46  [label="126:  xFitter.addObservedPoint(1, xval[i], fval[i][j])"];
  v47  [label="131:  yPolyX[j] = new PolynomialFunction(xFitter.fit(new double[xDegree + 1]))"];
  v48  [label="136:  final double[][] fval_1 = new double[xLen][yLen]"];
  v49  [label="137:  for (  int j = 0 ; j < yLen ;   j++)"];
  v52  [label="endfor"];
  v53  [label="138:  final PolynomialFunction f = yPolyX[j]"];
  v54  [label="139:  for (  int i = 0 ; i < xLen ;   i++)"];
  v57  [label="endfor"];
  v58  [label="140:  fval_1[i][j] = f.value(xval[i])"];
  v59  [label="146:  final PolynomialFunction[] xPolyY = new PolynomialFunction[xLen]"];
  v60  [label="147:  for (  int i = 0 ; i < xLen ;   i++)"];
  v63  [label="endfor"];
  v64  [label="148:  yFitter.clearObservations()"];
  v65  [label="149:  for (  int j = 0 ; j < yLen ;   j++)"];
  v68  [label="endfor"];
  v69  [label="150:  yFitter.addObservedPoint(1, yval[j], fval_1[i][j])"];
  v70  [label="155:  xPolyY[i] = new PolynomialFunction(yFitter.fit(new double[yDegree + 1]))"];
  v71  [label="160:  final double[][] fval_2 = new double[xLen][yLen]"];
  v72  [label="161:  for (  int i = 0 ; i < xLen ;   i++)"];
  v75  [label="endfor"];
  v76  [label="162:  final PolynomialFunction f = xPolyY[i]"];
  v77  [label="163:  for (  int j = 0 ; j < yLen ;   j++)"];
  v80  [label="endfor"];
  v81  [label="164:  fval_2[i][j] = f.value(yval[j])"];
  v82  [label="168:  return super.interpolate(xval, yval, fval_2);"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v5 -> v6;
  v6 -> v7  [label="True"];
  v6 -> v8  [label="False"];
  v8 -> v9;
  v9 -> v10  [label="True"];
  v9 -> v11  [label="False"];
  v11 -> v12;
  v12 -> v13;
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v17;
  v18 -> v19;
  v19 -> v20  [label="True"];
  v19 -> v21  [label="False"];
  v21 -> v22;
  v22 -> v23  [label="True"];
  v22 -> v24  [label="False"];
  v24 -> v25;
  v25 -> v26;
  v26 -> v27;
  v27 -> v30  [label="False"];
  v27 -> v31  [label="True"];
  v31 -> v32  [label="True"];
  v31 -> v33  [label="False"];
  v33 -> v27;
  v30 -> v34;
  v34 -> v35;
  v35 -> v36;
  v36 -> v37;
  v37 -> v40  [label="False"];
  v37 -> v41  [label="True"];
  v41 -> v42;
  v42 -> v45  [label="False"];
  v42 -> v46  [label="True"];
  v46 -> v42;
  v45 -> v47;
  v47 -> v37;
  v40 -> v48;
  v48 -> v49;
  v49 -> v52  [label="False"];
  v49 -> v53  [label="True"];
  v53 -> v54;
  v54 -> v57  [label="False"];
  v54 -> v58  [label="True"];
  v58 -> v54;
  v57 -> v49;
  v52 -> v59;
  v59 -> v60;
  v60 -> v63  [label="False"];
  v60 -> v64  [label="True"];
  v64 -> v65;
  v65 -> v68  [label="False"];
  v65 -> v69  [label="True"];
  v69 -> v65;
  v68 -> v70;
  v70 -> v60;
  v63 -> v71;
  v71 -> v72;
  v72 -> v75  [label="False"];
  v72 -> v76  [label="True"];
  v76 -> v77;
  v77 -> v80  [label="False"];
  v77 -> v81  [label="True"];
  v81 -> v77;
  v80 -> v72;
  v75 -> v82;
  // end-of-graph
}
