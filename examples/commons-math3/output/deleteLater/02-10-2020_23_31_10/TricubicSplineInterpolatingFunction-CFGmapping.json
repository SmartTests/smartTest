[
  {
    "v1": {
      "line": "137",
      "statement": "TricubicSplineInterpolatingFunction (double[] x,  double[] y,  double[] z,  double[][][] f,  double[][][] dFdX,  double[][][] dFdY,  double[][][] dFdZ,  double[][][] d2FdXdY,  double[][][] d2FdXdZ,  double[][][] d2FdYdZ,  double[][][] d3FdXdYdZ)"
    }
  },
  {
    "v2": {
      "line": "151",
      "statement": "final int xLen = x.length"
    }
  },
  {
    "v3": {
      "line": "152",
      "statement": "final int yLen = y.length"
    }
  },
  {
    "v4": {
      "line": "153",
      "statement": "final int zLen = z.length"
    }
  },
  {
    "v5": {
      "line": "155",
      "statement": "if (xLen == 0 || yLen == 0 || z.length == 0 || f.length == 0 || f[0].length == 0)"
    }
  },
  {
    "v6": {
      "line": "156",
      "statement": "throw new NoDataException()"
    }
  },
  {
    "v7": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v8": {
      "line": "158",
      "statement": "if (xLen != f.length)"
    }
  },
  {
    "v9": {
      "line": "159",
      "statement": "throw new DimensionMismatchException(xLen, f.length)"
    }
  },
  {
    "v10": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v11": {
      "line": "161",
      "statement": "if (xLen != dFdX.length)"
    }
  },
  {
    "v12": {
      "line": "162",
      "statement": "throw new DimensionMismatchException(xLen, dFdX.length)"
    }
  },
  {
    "v13": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v14": {
      "line": "164",
      "statement": "if (xLen != dFdY.length)"
    }
  },
  {
    "v15": {
      "line": "165",
      "statement": "throw new DimensionMismatchException(xLen, dFdY.length)"
    }
  },
  {
    "v16": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v17": {
      "line": "167",
      "statement": "if (xLen != dFdZ.length)"
    }
  },
  {
    "v18": {
      "line": "168",
      "statement": "throw new DimensionMismatchException(xLen, dFdZ.length)"
    }
  },
  {
    "v19": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v20": {
      "line": "170",
      "statement": "if (xLen != d2FdXdY.length)"
    }
  },
  {
    "v21": {
      "line": "171",
      "statement": "throw new DimensionMismatchException(xLen, d2FdXdY.length)"
    }
  },
  {
    "v22": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v23": {
      "line": "173",
      "statement": "if (xLen != d2FdXdZ.length)"
    }
  },
  {
    "v24": {
      "line": "174",
      "statement": "throw new DimensionMismatchException(xLen, d2FdXdZ.length)"
    }
  },
  {
    "v25": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v26": {
      "line": "176",
      "statement": "if (xLen != d2FdYdZ.length)"
    }
  },
  {
    "v27": {
      "line": "177",
      "statement": "throw new DimensionMismatchException(xLen, d2FdYdZ.length)"
    }
  },
  {
    "v28": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v29": {
      "line": "179",
      "statement": "if (xLen != d3FdXdYdZ.length)"
    }
  },
  {
    "v30": {
      "line": "180",
      "statement": "throw new DimensionMismatchException(xLen, d3FdXdYdZ.length)"
    }
  },
  {
    "v31": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v32": {
      "line": "183",
      "statement": "MathArrays.checkOrder(x)"
    }
  },
  {
    "v33": {
      "line": "184",
      "statement": "MathArrays.checkOrder(y)"
    }
  },
  {
    "v34": {
      "line": "185",
      "statement": "MathArrays.checkOrder(z)"
    }
  },
  {
    "v35": {
      "line": "187",
      "statement": "xval = x.clone()"
    }
  },
  {
    "v36": {
      "line": "188",
      "statement": "yval = y.clone()"
    }
  },
  {
    "v37": {
      "line": "189",
      "statement": "zval = z.clone()"
    }
  },
  {
    "v38": {
      "line": "191",
      "statement": "final int lastI = xLen - 1"
    }
  },
  {
    "v39": {
      "line": "192",
      "statement": "final int lastJ = yLen - 1"
    }
  },
  {
    "v40": {
      "line": "193",
      "statement": "final int lastK = zLen - 1"
    }
  },
  {
    "v41": {
      "line": "194",
      "statement": "splines = new TricubicSplineFunction[lastI][lastJ][lastK"
    }
  },
  {
    "v42": {
      "line": "196",
      "statement": "for (  int i = 0 ; i < lastI ;   i++)"
    }
  },
  {
    "v45": {
      "line": 0,
      "statement": "\"endfor"
    }
  },
  {
    "v46": {
      "line": "197",
      "statement": "if (f[i].length != yLen)"
    }
  },
  {
    "v47": {
      "line": "198",
      "statement": "throw new DimensionMismatchException(f[i].length, yLen)"
    }
  },
  {
    "v48": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v49": {
      "line": "200",
      "statement": "if (dFdX[i].length != yLen)"
    }
  },
  {
    "v50": {
      "line": "201",
      "statement": "throw new DimensionMismatchException(dFdX[i].length, yLen)"
    }
  },
  {
    "v51": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v52": {
      "line": "203",
      "statement": "if (dFdY[i].length != yLen)"
    }
  },
  {
    "v53": {
      "line": "204",
      "statement": "throw new DimensionMismatchException(dFdY[i].length, yLen)"
    }
  },
  {
    "v54": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v55": {
      "line": "206",
      "statement": "if (dFdZ[i].length != yLen)"
    }
  },
  {
    "v56": {
      "line": "207",
      "statement": "throw new DimensionMismatchException(dFdZ[i].length, yLen)"
    }
  },
  {
    "v57": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v58": {
      "line": "209",
      "statement": "if (d2FdXdY[i].length != yLen)"
    }
  },
  {
    "v59": {
      "line": "210",
      "statement": "throw new DimensionMismatchException(d2FdXdY[i].length, yLen)"
    }
  },
  {
    "v60": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v61": {
      "line": "212",
      "statement": "if (d2FdXdZ[i].length != yLen)"
    }
  },
  {
    "v62": {
      "line": "213",
      "statement": "throw new DimensionMismatchException(d2FdXdZ[i].length, yLen)"
    }
  },
  {
    "v63": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v64": {
      "line": "215",
      "statement": "if (d2FdYdZ[i].length != yLen)"
    }
  },
  {
    "v65": {
      "line": "216",
      "statement": "throw new DimensionMismatchException(d2FdYdZ[i].length, yLen)"
    }
  },
  {
    "v66": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v67": {
      "line": "218",
      "statement": "if (d3FdXdYdZ[i].length != yLen)"
    }
  },
  {
    "v68": {
      "line": "219",
      "statement": "throw new DimensionMismatchException(d3FdXdYdZ[i].length, yLen)"
    }
  },
  {
    "v69": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v70": {
      "line": "222",
      "statement": "final int ip1 = i + 1"
    }
  },
  {
    "v71": {
      "line": "223",
      "statement": "for (  int j = 0 ; j < lastJ ;   j++)"
    }
  },
  {
    "v74": {
      "line": 0,
      "statement": "\"endfor"
    }
  },
  {
    "v75": {
      "line": "224",
      "statement": "if (f[i][j].length != zLen)"
    }
  },
  {
    "v76": {
      "line": "225",
      "statement": "throw new DimensionMismatchException(f[i][j].length, zLen)"
    }
  },
  {
    "v77": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v78": {
      "line": "227",
      "statement": "if (dFdX[i][j].length != zLen)"
    }
  },
  {
    "v79": {
      "line": "228",
      "statement": "throw new DimensionMismatchException(dFdX[i][j].length, zLen)"
    }
  },
  {
    "v80": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v81": {
      "line": "230",
      "statement": "if (dFdY[i][j].length != zLen)"
    }
  },
  {
    "v82": {
      "line": "231",
      "statement": "throw new DimensionMismatchException(dFdY[i][j].length, zLen)"
    }
  },
  {
    "v83": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v84": {
      "line": "233",
      "statement": "if (dFdZ[i][j].length != zLen)"
    }
  },
  {
    "v85": {
      "line": "234",
      "statement": "throw new DimensionMismatchException(dFdZ[i][j].length, zLen)"
    }
  },
  {
    "v86": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v87": {
      "line": "236",
      "statement": "if (d2FdXdY[i][j].length != zLen)"
    }
  },
  {
    "v88": {
      "line": "237",
      "statement": "throw new DimensionMismatchException(d2FdXdY[i][j].length, zLen)"
    }
  },
  {
    "v89": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v90": {
      "line": "239",
      "statement": "if (d2FdXdZ[i][j].length != zLen)"
    }
  },
  {
    "v91": {
      "line": "240",
      "statement": "throw new DimensionMismatchException(d2FdXdZ[i][j].length, zLen)"
    }
  },
  {
    "v92": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v93": {
      "line": "242",
      "statement": "if (d2FdYdZ[i][j].length != zLen)"
    }
  },
  {
    "v94": {
      "line": "243",
      "statement": "throw new DimensionMismatchException(d2FdYdZ[i][j].length, zLen)"
    }
  },
  {
    "v95": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v96": {
      "line": "245",
      "statement": "if (d3FdXdYdZ[i][j].length != zLen)"
    }
  },
  {
    "v97": {
      "line": "246",
      "statement": "throw new DimensionMismatchException(d3FdXdYdZ[i][j].length, zLen)"
    }
  },
  {
    "v98": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v99": {
      "line": "249",
      "statement": "final int jp1 = j + 1"
    }
  },
  {
    "v100": {
      "line": "250",
      "statement": "for (  int k = 0 ; k < lastK ;   k++)"
    }
  },
  {
    "v103": {
      "line": 0,
      "statement": "\"endfor"
    }
  },
  {
    "v104": {
      "line": "251",
      "statement": "final int kp1 = k + 1"
    }
  },
  {
    "v105": {
      "line": "253",
      "statement": "final double[] beta = new double[] { f[i][j][k], f[ip1][j][k], f[i][jp1][k], f[ip1][jp1][k], f[i][j][kp1], f[ip1][j][kp1], f[i][jp1][kp1], f[ip1][jp1][kp1],  dFdX[i][j][k], dFdX[ip1][j][k], dFdX[i][jp1][k], dFdX[ip1][jp1][k], dFdX[i][j][kp1], dFdX[ip1][j][kp1], dFdX[i][jp1][kp1], dFdX[ip1][jp1][kp1],  dFdY[i][j][k], dFdY[ip1][j][k], dFdY[i][jp1][k], dFdY[ip1][jp1][k], dFdY[i][j][kp1], dFdY[ip1][j][kp1], dFdY[i][jp1][kp1], dFdY[ip1][jp1][kp1],  dFdZ[i][j][k], dFdZ[ip1][j][k], dFdZ[i][jp1][k], dFdZ[ip1][jp1][k], dFdZ[i][j][kp1], dFdZ[ip1][j][kp1], dFdZ[i][jp1][kp1], dFdZ[ip1][jp1][kp1],  d2FdXdY[i][j][k], d2FdXdY[ip1][j][k], d2FdXdY[i][jp1][k], d2FdXdY[ip1][jp1][k], d2FdXdY[i][j][kp1], d2FdXdY[ip1][j][kp1], d2FdXdY[i][jp1][kp1], d2FdXdY[ip1][jp1][kp1],  d2FdXdZ[i][j][k], d2FdXdZ[ip1][j][k], d2FdXdZ[i][jp1][k], d2FdXdZ[ip1][jp1][k], d2FdXdZ[i][j][kp1], d2FdXdZ[ip1][j][kp1], d2FdXdZ[i][jp1][kp1], d2FdXdZ[ip1][jp1][kp1],  d2FdYdZ[i][j][k], d2FdYdZ[ip1][j][k], d2FdYdZ[i][jp1][k], d2FdYdZ[ip1][jp1][k], d2FdYdZ[i][j][kp1], d2FdYdZ[ip1][j][kp1], d2FdYdZ[i][jp1][kp1], d2FdYdZ[ip1][jp1][kp1],  d3FdXdYdZ[i][j][k], d3FdXdYdZ[ip1][j][k], d3FdXdYdZ[i][jp1][k], d3FdXdYdZ[ip1][jp1][k], d3FdXdYdZ[i][j][kp1], d3FdXdYdZ[ip1][j][kp1], d3FdXdYdZ[i][jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1], }"
    }
  },
  {
    "v106": {
      "line": "295",
      "statement": "splines[i][j][k] = new TricubicSplineFunction(computeSplineCoefficients(beta))"
    }
  },
  {
    "v107": {
      "line": "306",
      "statement": "double value(double x, double y, double z)"
    }
  },
  {
    "v108": {
      "line": "308",
      "statement": "final int i = searchIndex(x, xval)"
    }
  },
  {
    "v109": {
      "line": "309",
      "statement": "if (i == -1)"
    }
  },
  {
    "v110": {
      "line": "310",
      "statement": "throw new OutOfRangeException(x, xval[0], xval[xval.length - 1])"
    }
  },
  {
    "v111": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v112": {
      "line": "312",
      "statement": "final int j = searchIndex(y, yval)"
    }
  },
  {
    "v113": {
      "line": "313",
      "statement": "if (j == -1)"
    }
  },
  {
    "v114": {
      "line": "314",
      "statement": "throw new OutOfRangeException(y, yval[0], yval[yval.length - 1])"
    }
  },
  {
    "v115": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v116": {
      "line": "316",
      "statement": "final int k = searchIndex(z, zval)"
    }
  },
  {
    "v117": {
      "line": "317",
      "statement": "if (k == -1)"
    }
  },
  {
    "v118": {
      "line": "318",
      "statement": "throw new OutOfRangeException(z, zval[0], zval[zval.length - 1])"
    }
  },
  {
    "v119": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v120": {
      "line": "321",
      "statement": "final double xN = (x - xval[i]) / (xval[i + 1] - xval[i])"
    }
  },
  {
    "v121": {
      "line": "322",
      "statement": "final double yN = (y - yval[j]) / (yval[j + 1] - yval[j])"
    }
  },
  {
    "v122": {
      "line": "323",
      "statement": "final double zN = (z - zval[k]) / (zval[k + 1] - zval[k])"
    }
  },
  {
    "v123": {
      "line": "325",
      "statement": "return splines[i][j][k].value(xN, yN, zN)"
    }
  },
  {
    "v124": {
      "line": "334",
      "statement": "int searchIndex(double c, double[] val)"
    }
  },
  {
    "v125": {
      "line": "335",
      "statement": "if (c < val[0])"
    }
  },
  {
    "v126": {
      "line": "336",
      "statement": "return -1"
    }
  },
  {
    "v127": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v128": {
      "line": "339",
      "statement": "final int max = val.length"
    }
  },
  {
    "v129": {
      "line": "340",
      "statement": "for (  int i = 1 ; i < max ;   i++)"
    }
  },
  {
    "v132": {
      "line": 0,
      "statement": "\"endfor"
    }
  },
  {
    "v133": {
      "line": "341",
      "statement": "if (c <= val[i])"
    }
  },
  {
    "v134": {
      "line": "342",
      "statement": "return i - 1"
    }
  },
  {
    "v135": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v136": {
      "line": "346",
      "statement": "return -1"
    }
  },
  {
    "v137": {
      "line": "397",
      "statement": "double[] computeSplineCoefficients(double[] beta)"
    }
  },
  {
    "v138": {
      "line": "398",
      "statement": "final int sz = 64"
    }
  },
  {
    "v139": {
      "line": "399",
      "statement": "final double[] a = new double[sz"
    }
  },
  {
    "v140": {
      "line": "401",
      "statement": "for (  int i = 0 ; i < sz ;   i++)"
    }
  },
  {
    "v143": {
      "line": 0,
      "statement": "\"endfor"
    }
  },
  {
    "v144": {
      "line": "402",
      "statement": "double result = 0"
    }
  },
  {
    "v145": {
      "line": "403",
      "statement": "final double[] row = AINV[i"
    }
  },
  {
    "v146": {
      "line": "404",
      "statement": "for (  int j = 0 ; j < sz ;   j++)"
    }
  },
  {
    "v149": {
      "line": 0,
      "statement": "\"endfor"
    }
  },
  {
    "v150": {
      "line": "405",
      "statement": "result += row[j] * beta[j"
    }
  },
  {
    "v151": {
      "line": "407",
      "statement": "a[i] = result"
    }
  },
  {
    "v152": {
      "line": "410",
      "statement": "return a"
    }
  },
  {
    "v153": {
      "line": "429",
      "statement": "TricubicSplineFunction (double[] aV)"
    }
  },
  {
    "v154": {
      "line": "430",
      "statement": "for (  int i = 0 ; i < N ;   i++)"
    }
  },
  {
    "v157": {
      "line": 0,
      "statement": "\"endfor"
    }
  },
  {
    "v158": {
      "line": "431",
      "statement": "for (  int j = 0 ; j < N ;   j++)"
    }
  },
  {
    "v161": {
      "line": 0,
      "statement": "\"endfor"
    }
  },
  {
    "v162": {
      "line": "432",
      "statement": "for (  int k = 0 ; k < N ;   k++)"
    }
  },
  {
    "v165": {
      "line": 0,
      "statement": "\"endfor"
    }
  },
  {
    "v166": {
      "line": "433",
      "statement": "a[i][j][k] = aV[i + N * (j + N * k)"
    }
  },
  {
    "v167": {
      "line": "447",
      "statement": "double value(double x, double y, double z)"
    }
  },
  {
    "v168": {
      "line": "449",
      "statement": "if (x < 0 || x > 1)"
    }
  },
  {
    "v169": {
      "line": "450",
      "statement": "throw new OutOfRangeException(x, 0, 1)"
    }
  },
  {
    "v170": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v171": {
      "line": "452",
      "statement": "if (y < 0 || y > 1)"
    }
  },
  {
    "v172": {
      "line": "453",
      "statement": "throw new OutOfRangeException(y, 0, 1)"
    }
  },
  {
    "v173": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v174": {
      "line": "455",
      "statement": "if (z < 0 || z > 1)"
    }
  },
  {
    "v175": {
      "line": "456",
      "statement": "throw new OutOfRangeException(z, 0, 1)"
    }
  },
  {
    "v176": {
      "line": 0,
      "statement": "\"endif"
    }
  },
  {
    "v177": {
      "line": "459",
      "statement": "final double x2 = x * x"
    }
  },
  {
    "v178": {
      "line": "460",
      "statement": "final double x3 = x2 * x"
    }
  },
  {
    "v179": {
      "line": "461",
      "statement": "final double[] pX = { 1, x, x2, x3 }"
    }
  },
  {
    "v180": {
      "line": "463",
      "statement": "final double y2 = y * y"
    }
  },
  {
    "v181": {
      "line": "464",
      "statement": "final double y3 = y2 * y"
    }
  },
  {
    "v182": {
      "line": "465",
      "statement": "final double[] pY = { 1, y, y2, y3 }"
    }
  },
  {
    "v183": {
      "line": "467",
      "statement": "final double z2 = z * z"
    }
  },
  {
    "v184": {
      "line": "468",
      "statement": "final double z3 = z2 * z"
    }
  },
  {
    "v185": {
      "line": "469",
      "statement": "final double[] pZ = { 1, z, z2, z3 }"
    }
  },
  {
    "v186": {
      "line": "471",
      "statement": "double result = 0"
    }
  },
  {
    "v187": {
      "line": "472",
      "statement": "for (  int i = 0 ; i < N ;   i++)"
    }
  },
  {
    "v190": {
      "line": 0,
      "statement": "\"endfor"
    }
  },
  {
    "v191": {
      "line": "473",
      "statement": "for (  int j = 0 ; j < N ;   j++)"
    }
  },
  {
    "v194": {
      "line": 0,
      "statement": "\"endfor"
    }
  },
  {
    "v195": {
      "line": "474",
      "statement": "for (  int k = 0 ; k < N ;   k++)"
    }
  },
  {
    "v198": {
      "line": 0,
      "statement": "\"endfor"
    }
  },
  {
    "v199": {
      "line": "475",
      "statement": "result += a[i][j][k] * pX[i] * pY[j] * pZ[k"
    }
  },
  {
    "v200": {
      "line": "480",
      "statement": "return result"
    }
  }
]