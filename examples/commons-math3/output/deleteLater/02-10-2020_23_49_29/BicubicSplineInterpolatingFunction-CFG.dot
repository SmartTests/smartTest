digraph BicubicSplineInterpolatingFunction_CFG {
  // graph-vertices
  v1  [label="95:  BicubicSplineInterpolatingFunction (double[] x, double[] y, double[][] f, double[][] dFdX, double[][] dFdY, double[][] d2FdXdY)"];
  v2  [label="104:  final int xLen = x.length"];
  v3  [label="105:  final int yLen = y.length"];
  v4  [label="107:  if (xLen == 0 || yLen == 0 || f.length == 0 || f[0].length == 0)"];
  v5  [label="108:  throw new NoDataException()"];
  v6  [label="endif"];
  v7  [label="110:  if (xLen != f.length)"];
  v8  [label="111:  throw new DimensionMismatchException(xLen, f.length)"];
  v9  [label="endif"];
  v10  [label="113:  if (xLen != dFdX.length)"];
  v11  [label="114:  throw new DimensionMismatchException(xLen, dFdX.length)"];
  v12  [label="endif"];
  v13  [label="116:  if (xLen != dFdY.length)"];
  v14  [label="117:  throw new DimensionMismatchException(xLen, dFdY.length)"];
  v15  [label="endif"];
  v16  [label="119:  if (xLen != d2FdXdY.length)"];
  v17  [label="120:  throw new DimensionMismatchException(xLen, d2FdXdY.length)"];
  v18  [label="endif"];
  v19  [label="123:  MathArrays.checkOrder(x)"];
  v20  [label="124:  MathArrays.checkOrder(y)"];
  v21  [label="126:  xval = x.clone()"];
  v22  [label="127:  yval = y.clone()"];
  v23  [label="129:  final int lastI = xLen - 1"];
  v24  [label="130:  final int lastJ = yLen - 1"];
  v25  [label="131:  splines = new BicubicSplineFunction[lastI][lastJ]"];
  v26  [label="133:  for (  int i = 0 ; i < lastI ;   i++)"];
  v29  [label="endfor"];
  v30  [label="134:  if (f[i].length != yLen)"];
  v31  [label="135:  throw new DimensionMismatchException(f[i].length, yLen)"];
  v32  [label="endif"];
  v33  [label="137:  if (dFdX[i].length != yLen)"];
  v34  [label="138:  throw new DimensionMismatchException(dFdX[i].length, yLen)"];
  v35  [label="endif"];
  v36  [label="140:  if (dFdY[i].length != yLen)"];
  v37  [label="141:  throw new DimensionMismatchException(dFdY[i].length, yLen)"];
  v38  [label="endif"];
  v39  [label="143:  if (d2FdXdY[i].length != yLen)"];
  v40  [label="144:  throw new DimensionMismatchException(d2FdXdY[i].length, yLen)"];
  v41  [label="endif"];
  v42  [label="146:  final int ip1 = i + 1"];
  v43  [label="147:  for (  int j = 0 ; j < lastJ ;   j++)"];
  v46  [label="endfor"];
  v47  [label="148:  final int jp1 = j + 1"];
  v48  [label="149:  final double[] beta = new double[] { f[i][j], f[ip1][j], f[i][jp1], f[ip1][jp1], dFdX[i][j], dFdX[ip1][j], dFdX[i][jp1], dFdX[ip1][jp1], dFdY[i][j], dFdY[ip1][j], dFdY[i][jp1], dFdY[ip1][jp1], d2FdXdY[i][j], d2FdXdY[ip1][j], d2FdXdY[i][jp1], d2FdXdY[ip1][jp1] }"];
  v49  [label="156:  splines[i][j] = new BicubicSplineFunction(computeSplineCoefficients(beta))"];
  v50  [label="164:  double value(double x, double y)"];
  v51  [label="166:  final int i = searchIndex(x, xval)"];
  v52  [label="167:  final int j = searchIndex(y, yval)"];
  v53  [label="169:  final double xN = (x - xval[i]) / (xval[i + 1] - xval[i])"];
  v54  [label="170:  final double yN = (y - yval[j]) / (yval[j + 1] - yval[j])"];
  v55  [label="172:  return splines[i][j].value(xN, yN);"];
  v56  [label="183:  boolean isValidPoint(double x, double y)"];
  v57  [label="184:  if (x < xval[0] || x > xval[xval.length - 1] || y < yval[0] || y > yval[yval.length - 1])"];
  v58  [label="188:  return false;"];
  v59  [label="endif"];
  v60  [label="190:  return true;"];
  v61  [label="203:  double partialDerivativeX(double x, double y)"];
  v62  [label="205:  return partialDerivative(0, x, y);"];
  v63  [label="216:  double partialDerivativeY(double x, double y)"];
  v64  [label="218:  return partialDerivative(1, x, y);"];
  v65  [label="229:  double partialDerivativeXX(double x, double y)"];
  v66  [label="231:  return partialDerivative(2, x, y);"];
  v67  [label="242:  double partialDerivativeYY(double x, double y)"];
  v68  [label="244:  return partialDerivative(3, x, y);"];
  v69  [label="254:  double partialDerivativeXY(double x, double y)"];
  v70  [label="256:  return partialDerivative(4, x, y);"];
  v71  [label="268:  double partialDerivative(int which, double x, double y)"];
  v72  [label="270:  if (partialDerivatives == null)"];
  v73  [label="271:  computePartialDerivatives()"];
  v74  [label="endif"];
  v75  [label="274:  final int i = searchIndex(x, xval)"];
  v76  [label="275:  final int j = searchIndex(y, yval)"];
  v77  [label="277:  final double xN = (x - xval[i]) / (xval[i + 1] - xval[i])"];
  v78  [label="278:  final double yN = (y - yval[j]) / (yval[j + 1] - yval[j])"];
  v79  [label="280:  return partialDerivatives[which][i][j].value(xN, yN);"];
  v80  [label="286:  void computePartialDerivatives()"];
  v81  [label="287:  final int lastI = xval.length - 1"];
  v82  [label="288:  final int lastJ = yval.length - 1"];
  v83  [label="289:  partialDerivatives = new BivariateFunction[5][lastI][lastJ]"];
  v84  [label="291:  for (  int i = 0 ; i < lastI ;   i++)"];
  v87  [label="endfor"];
  v88  [label="292:  for (  int j = 0 ; j < lastJ ;   j++)"];
  v91  [label="endfor"];
  v92  [label="293:  final BicubicSplineFunction f = splines[i][j]"];
  v93  [label="294:  partialDerivatives[0][i][j] = f.partialDerivativeX()"];
  v94  [label="295:  partialDerivatives[1][i][j] = f.partialDerivativeY()"];
  v95  [label="296:  partialDerivatives[2][i][j] = f.partialDerivativeXX()"];
  v96  [label="297:  partialDerivatives[3][i][j] = f.partialDerivativeYY()"];
  v97  [label="298:  partialDerivatives[4][i][j] = f.partialDerivativeXY()"];
  v98  [label="311:  int searchIndex(double c, double[] val)"];
  v99  [label="312:  final int r = Arrays.binarySearch(val, c)"];
  v100  [label="314:  if (r == -1 || r == -val.length - 1)"];
  v101  [label="316:  throw new OutOfRangeException(c, val[0], val[val.length - 1])"];
  v102  [label="endif"];
  v103  [label="319:  if (r < 0)"];
  v104  [label="322:  return -r - 2;"];
  v105  [label="endif"];
  v106  [label="324:  final int last = val.length - 1"];
  v107  [label="325:  if (r == last)"];
  v108  [label="328:  return last - 1;"];
  v109  [label="endif"];
  v110  [label="332:  return r;"];
  v111  [label="364:  double[] computeSplineCoefficients(double[] beta)"];
  v112  [label="365:  final double[] a = new double[NUM_COEFF]"];
  v113  [label="367:  for (  int i = 0 ; i < NUM_COEFF ;   i++)"];
  v116  [label="endfor"];
  v117  [label="368:  double result = 0"];
  v118  [label="369:  final double[] row = AINV[i]"];
  v119  [label="370:  for (  int j = 0 ; j < NUM_COEFF ;   j++)"];
  v122  [label="endfor"];
  v123  [label="371:  result += row[j] * beta[j]"];
  v124  [label="373:  a[i] = result"];
  v125  [label="376:  return a;"];
  v126  [label="413:  BicubicSplineFunction (double[] a)"];
  v127  [label="414:  this.a = new double[N][N]"];
  v128  [label="415:  for (  int i = 0 ; i < N ;   i++)"];
  v131  [label="endfor"];
  v132  [label="416:  for (  int j = 0 ; j < N ;   j++)"];
  v135  [label="endfor"];
  v136  [label="417:  this.a[i][j] = a[i * N + j]"];
  v137  [label="425:  double value(double x, double y)"];
  v138  [label="426:  if (x < 0 || x > 1)"];
  v139  [label="427:  throw new OutOfRangeException(x, 0, 1)"];
  v140  [label="endif"];
  v141  [label="429:  if (y < 0 || y > 1)"];
  v142  [label="430:  throw new OutOfRangeException(y, 0, 1)"];
  v143  [label="endif"];
  v144  [label="433:  final double x2 = x * x"];
  v145  [label="434:  final double x3 = x2 * x"];
  v146  [label="435:  final double[] pX = {1, x, x2, x3}"];
  v147  [label="437:  final double y2 = y * y"];
  v148  [label="438:  final double y3 = y2 * y"];
  v149  [label="439:  final double[] pY = {1, y, y2, y3}"];
  v150  [label="441:  return apply(pX, pY, a);"];
  v151  [label="452:  double apply(double[] pX, double[] pY, double[][] coeff)"];
  v152  [label="453:  double result = 0"];
  v153  [label="454:  for (  int i = 0 ; i < N ;   i++)"];
  v156  [label="endfor"];
  v157  [label="455:  for (  int j = 0 ; j < N ;   j++)"];
  v160  [label="endfor"];
  v161  [label="456:  result += coeff[i][j] * pX[i] * pY[j]"];
  v162  [label="460:  return result;"];
  v163  [label="466:  BivariateFunction partialDerivativeX()"];
  v164  [label="467:  if (partialDerivativeX == null)"];
  v165  [label="468:  computePartialDerivatives()"];
  v166  [label="endif"];
  v167  [label="471:  return partialDerivativeX;"];
  v168  [label="476:  BivariateFunction partialDerivativeY()"];
  v169  [label="477:  if (partialDerivativeY == null)"];
  v170  [label="478:  computePartialDerivatives()"];
  v171  [label="endif"];
  v172  [label="481:  return partialDerivativeY;"];
  v173  [label="486:  BivariateFunction partialDerivativeXX()"];
  v174  [label="487:  if (partialDerivativeXX == null)"];
  v175  [label="488:  computePartialDerivatives()"];
  v176  [label="endif"];
  v177  [label="491:  return partialDerivativeXX;"];
  v178  [label="496:  BivariateFunction partialDerivativeYY()"];
  v179  [label="497:  if (partialDerivativeYY == null)"];
  v180  [label="498:  computePartialDerivatives()"];
  v181  [label="endif"];
  v182  [label="501:  return partialDerivativeYY;"];
  v183  [label="506:  BivariateFunction partialDerivativeXY()"];
  v184  [label="507:  if (partialDerivativeXY == null)"];
  v185  [label="508:  computePartialDerivatives()"];
  v186  [label="endif"];
  v187  [label="511:  return partialDerivativeXY;"];
  v188  [label="517:  void computePartialDerivatives()"];
  v189  [label="518:  final double[][] aX = new double[N][N]"];
  v190  [label="519:  final double[][] aY = new double[N][N]"];
  v191  [label="520:  final double[][] aXX = new double[N][N]"];
  v192  [label="521:  final double[][] aYY = new double[N][N]"];
  v193  [label="522:  final double[][] aXY = new double[N][N]"];
  v194  [label="524:  for (  int i = 0 ; i < N ;   i++)"];
  v197  [label="endfor"];
  v198  [label="525:  for (  int j = 0 ; j < N ;   j++)"];
  v201  [label="endfor"];
  v202  [label="526:  final double c = a[i][j]"];
  v203  [label="527:  aX[i][j] = i * c"];
  v204  [label="528:  aY[i][j] = j * c"];
  v205  [label="529:  aXX[i][j] = (i - 1) * aX[i][j]"];
  v206  [label="530:  aYY[i][j] = (j - 1) * aY[i][j]"];
  v207  [label="531:  aXY[i][j] = j * aX[i][j]"];
  v208  [label="535:  partialDerivativeX = new BivariateFunction() { public double value(double x, double y)  { final double x2 = x * x; final double[] pX = {0, 1, x, x2};  final double y2 = y * y; final double y3 = y2 * y; final double[] pY = {1, y, y2, y3};  return apply(pX, pY, aX); } }"];
  v209  [label="547:  partialDerivativeY = new BivariateFunction() { public double value(double x, double y)  { final double x2 = x * x; final double x3 = x2 * x; final double[] pX = {1, x, x2, x3};  final double y2 = y * y; final double[] pY = {0, 1, y, y2};  return apply(pX, pY, aY); } }"];
  v210  [label="559:  partialDerivativeXX = new BivariateFunction() { public double value(double x, double y)  { final double[] pX = {0, 0, 1, x};  final double y2 = y * y; final double y3 = y2 * y; final double[] pY = {1, y, y2, y3};  return apply(pX, pY, aXX); } }"];
  v211  [label="570:  partialDerivativeYY = new BivariateFunction() { public double value(double x, double y)  { final double x2 = x * x; final double x3 = x2 * x; final double[] pX = {1, x, x2, x3};  final double[] pY = {0, 0, 1, y};  return apply(pX, pY, aYY); } }"];
  v212  [label="581:  partialDerivativeXY = new BivariateFunction() { public double value(double x, double y)  { final double x2 = x * x; final double[] pX = {0, 1, x, x2};  final double y2 = y * y; final double[] pY = {0, 1, y, y2};  return apply(pX, pY, aXY); } }"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4;
  v4 -> v5  [label="True"];
  v4 -> v6  [label="False"];
  v6 -> v7;
  v7 -> v8  [label="True"];
  v7 -> v9  [label="False"];
  v9 -> v10;
  v10 -> v11  [label="True"];
  v10 -> v12  [label="False"];
  v12 -> v13;
  v13 -> v14  [label="True"];
  v13 -> v15  [label="False"];
  v15 -> v16;
  v16 -> v17  [label="True"];
  v16 -> v18  [label="False"];
  v18 -> v19;
  v19 -> v20;
  v20 -> v21;
  v21 -> v22;
  v22 -> v23;
  v23 -> v24;
  v24 -> v25;
  v25 -> v26;
  v26 -> v29  [label="False"];
  v26 -> v30  [label="True"];
  v30 -> v31  [label="True"];
  v30 -> v32  [label="False"];
  v32 -> v33;
  v33 -> v34  [label="True"];
  v33 -> v35  [label="False"];
  v35 -> v36;
  v36 -> v37  [label="True"];
  v36 -> v38  [label="False"];
  v38 -> v39;
  v39 -> v40  [label="True"];
  v39 -> v41  [label="False"];
  v41 -> v42;
  v42 -> v43;
  v43 -> v46  [label="False"];
  v43 -> v47  [label="True"];
  v47 -> v48;
  v48 -> v49;
  v49 -> v43;
  v46 -> v26;
  v50 -> v51;
  v51 -> v52;
  v52 -> v53;
  v53 -> v54;
  v54 -> v55;
  v56 -> v57;
  v57 -> v58  [label="True"];
  v57 -> v60  [label="False"];
  v61 -> v62;
  v63 -> v64;
  v65 -> v66;
  v67 -> v68;
  v69 -> v70;
  v71 -> v72;
  v72 -> v73  [label="True"];
  v73 -> v74;
  v72 -> v74  [label="False"];
  v74 -> v75;
  v75 -> v76;
  v76 -> v77;
  v77 -> v78;
  v78 -> v79;
  v80 -> v81;
  v81 -> v82;
  v82 -> v83;
  v83 -> v84;
  v84 -> v87  [label="False"];
  v84 -> v88  [label="True"];
  v88 -> v91  [label="False"];
  v88 -> v92  [label="True"];
  v92 -> v93;
  v93 -> v94;
  v94 -> v95;
  v95 -> v96;
  v96 -> v97;
  v97 -> v88;
  v91 -> v84;
  v98 -> v99;
  v99 -> v100;
  v100 -> v101  [label="True"];
  v100 -> v102  [label="False"];
  v102 -> v103;
  v103 -> v104  [label="True"];
  v103 -> v105  [label="False"];
  v105 -> v106;
  v106 -> v107;
  v107 -> v108  [label="True"];
  v107 -> v109  [label="False"];
  v109 -> v110;
  v111 -> v112;
  v112 -> v113;
  v113 -> v116  [label="False"];
  v113 -> v117  [label="True"];
  v117 -> v118;
  v118 -> v119;
  v119 -> v122  [label="False"];
  v119 -> v123  [label="True"];
  v123 -> v119;
  v122 -> v124;
  v124 -> v113;
  v116 -> v125;
  v126 -> v127;
  v127 -> v128;
  v128 -> v131  [label="False"];
  v128 -> v132  [label="True"];
  v132 -> v135  [label="False"];
  v132 -> v136  [label="True"];
  v136 -> v132;
  v135 -> v128;
  v137 -> v138;
  v138 -> v139  [label="True"];
  v138 -> v140  [label="False"];
  v140 -> v141;
  v141 -> v142  [label="True"];
  v141 -> v143  [label="False"];
  v143 -> v144;
  v144 -> v145;
  v145 -> v146;
  v146 -> v147;
  v147 -> v148;
  v148 -> v149;
  v149 -> v150;
  v151 -> v152;
  v152 -> v153;
  v153 -> v156  [label="False"];
  v153 -> v157  [label="True"];
  v157 -> v160  [label="False"];
  v157 -> v161  [label="True"];
  v161 -> v157;
  v160 -> v153;
  v156 -> v162;
  v163 -> v164;
  v164 -> v165  [label="True"];
  v165 -> v166;
  v164 -> v166  [label="False"];
  v166 -> v167;
  v168 -> v169;
  v169 -> v170  [label="True"];
  v170 -> v171;
  v169 -> v171  [label="False"];
  v171 -> v172;
  v173 -> v174;
  v174 -> v175  [label="True"];
  v175 -> v176;
  v174 -> v176  [label="False"];
  v176 -> v177;
  v178 -> v179;
  v179 -> v180  [label="True"];
  v180 -> v181;
  v179 -> v181  [label="False"];
  v181 -> v182;
  v183 -> v184;
  v184 -> v185  [label="True"];
  v185 -> v186;
  v184 -> v186  [label="False"];
  v186 -> v187;
  v188 -> v189;
  v189 -> v190;
  v190 -> v191;
  v191 -> v192;
  v192 -> v193;
  v193 -> v194;
  v194 -> v197  [label="False"];
  v194 -> v198  [label="True"];
  v198 -> v201  [label="False"];
  v198 -> v202  [label="True"];
  v202 -> v203;
  v203 -> v204;
  v204 -> v205;
  v205 -> v206;
  v206 -> v207;
  v207 -> v198;
  v201 -> v194;
  v197 -> v208;
  v208 -> v209;
  v209 -> v210;
  v210 -> v211;
  v211 -> v212;
  // end-of-graph
}
