digraph IterativeLegendreGaussIntegrator_CFG {
  // graph-vertices
  v1  [label="69:  IterativeLegendreGaussIntegrator (final int n, final double relativeAccuracy, final double absoluteAccuracy, final int minimalIterationCount, final int maximalIterationCount)"];
  v2  [label="75:  super(relativeAccuracy, absoluteAccuracy, minimalIterationCount, maximalIterationCount)"];
  v3  [label="76:  if (n <= 0)"];
  v4  [label="77:  throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_POINTS, n)"];
  v5  [label="endif"];
  v6  [label="79:  numberOfPoints = n"];
  v7  [label="90:  IterativeLegendreGaussIntegrator (final int n, final double relativeAccuracy, final double absoluteAccuracy)"];
  v8  [label="94:  this(n, relativeAccuracy, absoluteAccuracy,  DEFAULT_MIN_ITERATIONS_COUNT, DEFAULT_MAX_ITERATIONS_COUNT)"];
  v9  [label="110:  IterativeLegendreGaussIntegrator (final int n, final int minimalIterationCount, final int maximalIterationCount)"];
  v10  [label="114:  this(n, DEFAULT_RELATIVE_ACCURACY, DEFAULT_ABSOLUTE_ACCURACY,  minimalIterationCount, maximalIterationCount)"];
  v11  [label="120:  double doIntegrate()"];
  v12  [label="123:  double oldt = stage(1)"];
  v13  [label="125:  int n = 2"];
  v14  [label="126:  while (true)"];
  v15  [label="endwhile"];
  v16  [label="128:  final double t = stage(n)"];
  v17  [label="131:  final double delta = FastMath.abs(t - oldt)"];
  v18  [label="132:  final double limit = FastMath.max(getAbsoluteAccuracy(),  getRelativeAccuracy() * (FastMath.abs(oldt) + FastMath.abs(t)) * 0.5)"];
  v19  [label="137:  if (iterations.getCount() + 1 >= getMinimalIterationCount() && delta <= limit)"];
  v20  [label="139:  return t;"];
  v21  [label="endif"];
  v22  [label="143:  final double ratio = FastMath.min(4, FastMath.pow(delta / limit, 0.5 / numberOfPoints))"];
  v23  [label="144:  n = FastMath.max((int) (ratio * n), n + 1)"];
  v24  [label="145:  oldt = t"];
  v25  [label="146:  iterations.incrementCount()"];
  v26  [label="158:  double stage(final int n)"];
  v27  [label="161:  final UnivariateFunction f = new UnivariateFunction() { public double value(double x) throws MathIllegalArgumentException, TooManyEvaluationsException { return computeObjectiveValue(x); } }"];
  v28  [label="168:  final double min = getMin()"];
  v29  [label="169:  final double max = getMax()"];
  v30  [label="170:  final double step = (max - min) / n"];
  v31  [label="172:  double sum = 0"];
  v32  [label="173:  for (  int i = 0 ; i < n ;   i++)"];
  v35  [label="endfor"];
  v36  [label="175:  final double a = min + i * step"];
  v37  [label="176:  final double b = a + step"];
  v38  [label="177:  final GaussIntegrator g = FACTORY.legendreHighPrecision(numberOfPoints, a, b)"];
  v39  [label="178:  sum += g.integrate(f)"];
  v40  [label="181:  return sum;"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4  [label="True"];
  v3 -> v5  [label="False"];
  v5 -> v6;
  v7 -> v8;
  v9 -> v10;
  v11 -> v12;
  v12 -> v13;
  v13 -> v14;
  v14 -> v15  [label="False"];
  v14 -> v16  [label="True"];
  v16 -> v17;
  v17 -> v18;
  v18 -> v19;
  v19 -> v20  [label="True"];
  v19 -> v21  [label="False"];
  v21 -> v22;
  v22 -> v23;
  v23 -> v24;
  v24 -> v25;
  v25 -> v14;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v31;
  v31 -> v32;
  v32 -> v35  [label="False"];
  v32 -> v36  [label="True"];
  v36 -> v37;
  v37 -> v38;
  v38 -> v39;
  v39 -> v32;
  v35 -> v40;
  // end-of-graph
}
