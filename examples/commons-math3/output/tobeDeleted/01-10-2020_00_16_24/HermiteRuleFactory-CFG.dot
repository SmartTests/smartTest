digraph HermiteRuleFactory_CFG {
  // graph-vertices
  v1  [label="63:  Pair<Double[],Double[]> computeRule(int numberOfPoints)"];
  v2  [label="66:  if (numberOfPoints == 1)"];
  v3  [label="68:  return new Pair<Double[], Double[]>(new Double[] { 0d }, new Double[] { SQRT_PI });"];
  v4  [label="endif"];
  v5  [label="75:  final int lastNumPoints = numberOfPoints - 1"];
  v6  [label="76:  final Double[] previousPoints = getRuleInternal(lastNumPoints).getFirst()"];
  v7  [label="79:  final Double[] points = new Double[numberOfPoints]"];
  v8  [label="80:  final Double[] weights = new Double[numberOfPoints]"];
  v9  [label="82:  final double sqrtTwoTimesLastNumPoints = FastMath.sqrt(2 * lastNumPoints)"];
  v10  [label="83:  final double sqrtTwoTimesNumPoints = FastMath.sqrt(2 * numberOfPoints)"];
  v11  [label="86:  final int iMax = numberOfPoints / 2"];
  v12  [label="87:  int i = 0"];
  v13  [label="87:  for (i < iMax)"];
  v14  [label="87:  i++"];
  v15  [label="endfor"];
  v16  [label="89:  double a = (i == 0) ? -sqrtTwoTimesLastNumPoints : previousPoints[i - 1].doubleValue()"];
  v17  [label="91:  double b = (iMax == 1) ? -0.5 : previousPoints[i].doubleValue()"];
  v18  [label="94:  double hma = H0"];
  v19  [label="96:  double ha = H1 * a"];
  v20  [label="98:  double hmb = H0"];
  v21  [label="100:  double hb = H1 * b"];
  v22  [label="101:  int j = 1"];
  v23  [label="101:  for (j < numberOfPoints)"];
  v24  [label="101:  j++"];
  v25  [label="endfor"];
  v26  [label="103:  final double jp1 = j + 1"];
  v27  [label="104:  final double s = FastMath.sqrt(2 / jp1)"];
  v28  [label="105:  final double sm = FastMath.sqrt(j / jp1)"];
  v29  [label="106:  final double hpa = s * a * ha - sm * hma"];
  v30  [label="107:  final double hpb = s * b * hb - sm * hmb"];
  v31  [label="108:  hma = ha"];
  v32  [label="109:  ha = hpa"];
  v33  [label="110:  hmb = hb"];
  v34  [label="111:  hb = hpb"];
  v35  [label="116:  double c = 0.5 * (a + b)"];
  v36  [label="118:  double hmc = H0"];
  v37  [label="120:  double hc = H1 * c"];
  v38  [label="121:  boolean done = false"];
  v39  [label="122:  while (!done)"];
  v40  [label="endwhile"];
  v41  [label="123:  done = b - a <= Math.ulp(c)"];
  v42  [label="124:  hmc = H0"];
  v43  [label="125:  hc = H1 * c"];
  v44  [label="126:  int j = 1"];
  v45  [label="126:  for (j < numberOfPoints)"];
  v46  [label="126:  j++"];
  v47  [label="endfor"];
  v48  [label="128:  final double jp1 = j + 1"];
  v49  [label="129:  final double s = FastMath.sqrt(2 / jp1)"];
  v50  [label="130:  final double sm = FastMath.sqrt(j / jp1)"];
  v51  [label="131:  final double hpc = s * c * hc - sm * hmc"];
  v52  [label="132:  hmc = hc"];
  v53  [label="133:  hc = hpc"];
  v54  [label="136:  if (!done)"];
  v55  [label="137:  if (ha * hc < 0)"];
  v56  [label="138:  b = c"];
  v57  [label="139:  hmb = hmc"];
  v58  [label="140:  hb = hc"];
  v59  [label="endif"];
  v60  [label="142:  a = c"];
  v61  [label="143:  hma = hmc"];
  v62  [label="144:  ha = hc"];
  v63  [label="146:  c = 0.5 * (a + b)"];
  v64  [label="endif"];
  v65  [label="149:  final double d = sqrtTwoTimesNumPoints * hmc"];
  v66  [label="150:  final double w = 2 / (d * d)"];
  v67  [label="152:  points[i] = c"];
  v68  [label="153:  weights[i] = w"];
  v69  [label="155:  final int idx = lastNumPoints - i"];
  v70  [label="156:  points[idx] = -c"];
  v71  [label="157:  weights[idx] = w"];
  v72  [label="164:  if (numberOfPoints % 2 != 0)"];
  v73  [label="165:  double hm = H0"];
  v74  [label="166:  int j = 1"];
  v75  [label="166:  for (j < numberOfPoints)"];
  v76  [label="166:  j += 2"];
  v77  [label="endfor"];
  v78  [label="167:  final double jp1 = j + 1"];
  v79  [label="168:  hm = -FastMath.sqrt(j / jp1) * hm"];
  v80  [label="170:  final double d = sqrtTwoTimesNumPoints * hm"];
  v81  [label="171:  final double w = 2 / (d * d)"];
  v82  [label="173:  points[iMax] = 0d"];
  v83  [label="174:  weights[iMax] = w"];
  v84  [label="endif"];
  v85  [label="177:  return new Pair<Double[], Double[]>(points, weights);"];
  // graph-edges
  v1 -> v2;
  v2 -> v3  [label="True"];
  v2 -> v4  [label="False"];
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8;
  v8 -> v9;
  v9 -> v10;
  v10 -> v11;
  v11 -> v12;
  v12 -> v13;
  v13 -> v15  [label="False"];
  v13 -> v16  [label="True"];
  v16 -> v17;
  v17 -> v18;
  v18 -> v19;
  v19 -> v20;
  v20 -> v21;
  v21 -> v22;
  v22 -> v23;
  v23 -> v25  [label="False"];
  v23 -> v26  [label="True"];
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v31;
  v31 -> v32;
  v32 -> v33;
  v33 -> v34;
  v34 -> v24;
  v24 -> v23;
  v25 -> v35;
  v35 -> v36;
  v36 -> v37;
  v37 -> v38;
  v38 -> v39;
  v39 -> v40  [label="False"];
  v39 -> v41  [label="True"];
  v41 -> v42;
  v42 -> v43;
  v43 -> v44;
  v44 -> v45;
  v45 -> v47  [label="False"];
  v45 -> v48  [label="True"];
  v48 -> v49;
  v49 -> v50;
  v50 -> v51;
  v51 -> v52;
  v52 -> v53;
  v53 -> v46;
  v46 -> v45;
  v47 -> v54;
  v54 -> v55  [label="True"];
  v55 -> v56  [label="True"];
  v56 -> v57;
  v57 -> v58;
  v58 -> v59;
  v55 -> v60  [label="False"];
  v60 -> v61;
  v61 -> v62;
  v62 -> v59;
  v59 -> v63;
  v63 -> v64;
  v54 -> v64  [label="False"];
  v64 -> v39;
  v40 -> v65;
  v65 -> v66;
  v66 -> v67;
  v67 -> v68;
  v68 -> v69;
  v69 -> v70;
  v70 -> v71;
  v71 -> v14;
  v14 -> v13;
  v15 -> v72;
  v72 -> v73  [label="True"];
  v73 -> v74;
  v74 -> v75;
  v75 -> v77  [label="False"];
  v75 -> v78  [label="True"];
  v78 -> v79;
  v79 -> v76;
  v76 -> v75;
  v77 -> v80;
  v80 -> v81;
  v81 -> v82;
  v82 -> v83;
  v83 -> v84;
  v72 -> v84  [label="False"];
  v84 -> v85;
  // end-of-graph
}
