digraph LegendreHighPrecisionRuleFactory_CFG {
  // graph-vertices
  v1  [label="49:  LegendreHighPrecisionRuleFactory ()"];
  v2  [label="50:  this(MathContext.DECIMAL128)"];
  v3  [label="56:  LegendreHighPrecisionRuleFactory (MathContext mContext)"];
  v4  [label="57:  this.mContext = mContext"];
  v5  [label="58:  two = new BigDecimal('2', mContext)"];
  v6  [label="59:  minusOne = new BigDecimal('-1', mContext)"];
  v7  [label="60:  oneHalf = new BigDecimal('0.5', mContext)"];
  v8  [label="65:  Pair<BigDecimal[],BigDecimal[]> computeRule(int numberOfPoints)"];
  v9  [label="68:  if (numberOfPoints == 1)"];
  v10  [label="70:  return new Pair<BigDecimal[], BigDecimal[]>(new BigDecimal[] { BigDecimal.ZERO }, new BigDecimal[] { two });"];
  v11  [label="endif"];
  v12  [label="77:  final BigDecimal[] previousPoints = getRuleInternal(numberOfPoints - 1).getFirst()"];
  v13  [label="80:  final BigDecimal[] points = new BigDecimal[numberOfPoints]"];
  v14  [label="81:  final BigDecimal[] weights = new BigDecimal[numberOfPoints]"];
  v15  [label="84:  final int iMax = numberOfPoints / 2"];
  v16  [label="85:  int i = 0"];
  v17  [label="85:  for (i < iMax)"];
  v18  [label="85:  i++"];
  v19  [label="endfor"];
  v20  [label="87:  BigDecimal a = (i == 0) ? minusOne : previousPoints[i - 1]"];
  v21  [label="89:  BigDecimal b = (iMax == 1) ? BigDecimal.ONE : previousPoints[i]"];
  v22  [label="91:  BigDecimal pma = BigDecimal.ONE"];
  v23  [label="93:  BigDecimal pa = a"];
  v24  [label="95:  BigDecimal pmb = BigDecimal.ONE"];
  v25  [label="97:  BigDecimal pb = b"];
  v26  [label="98:  int j = 1"];
  v27  [label="98:  for (j < numberOfPoints)"];
  v28  [label="98:  j++"];
  v29  [label="endfor"];
  v30  [label="99:  final BigDecimal b_two_j_p_1 = new BigDecimal(2 * j + 1, mContext)"];
  v31  [label="100:  final BigDecimal b_j = new BigDecimal(j, mContext)"];
  v32  [label="101:  final BigDecimal b_j_p_1 = new BigDecimal(j + 1, mContext)"];
  v33  [label="106:  BigDecimal tmp1 = a.multiply(b_two_j_p_1, mContext)"];
  v34  [label="107:  tmp1 = pa.multiply(tmp1, mContext)"];
  v35  [label="108:  BigDecimal tmp2 = pma.multiply(b_j, mContext)"];
  v36  [label="110:  BigDecimal ppa = tmp1.subtract(tmp2, mContext)"];
  v37  [label="111:  ppa = ppa.divide(b_j_p_1, mContext)"];
  v38  [label="116:  tmp1 = b.multiply(b_two_j_p_1, mContext)"];
  v39  [label="117:  tmp1 = pb.multiply(tmp1, mContext)"];
  v40  [label="118:  tmp2 = pmb.multiply(b_j, mContext)"];
  v41  [label="120:  BigDecimal ppb = tmp1.subtract(tmp2, mContext)"];
  v42  [label="121:  ppb = ppb.divide(b_j_p_1, mContext)"];
  v43  [label="123:  pma = pa"];
  v44  [label="124:  pa = ppa"];
  v45  [label="125:  pmb = pb"];
  v46  [label="126:  pb = ppb"];
  v47  [label="130:  BigDecimal c = a.add(b, mContext).multiply(oneHalf, mContext)"];
  v48  [label="132:  BigDecimal pmc = BigDecimal.ONE"];
  v49  [label="134:  BigDecimal pc = c"];
  v50  [label="135:  boolean done = false"];
  v51  [label="136:  while (!done)"];
  v52  [label="endwhile"];
  v53  [label="137:  BigDecimal tmp1 = b.subtract(a, mContext)"];
  v54  [label="138:  BigDecimal tmp2 = c.ulp().multiply(BigDecimal.TEN, mContext)"];
  v55  [label="139:  done = tmp1.compareTo(tmp2) <= 0"];
  v56  [label="140:  pmc = BigDecimal.ONE"];
  v57  [label="141:  pc = c"];
  v58  [label="142:  int j = 1"];
  v59  [label="142:  for (j < numberOfPoints)"];
  v60  [label="142:  j++"];
  v61  [label="endfor"];
  v62  [label="143:  final BigDecimal b_two_j_p_1 = new BigDecimal(2 * j + 1, mContext)"];
  v63  [label="144:  final BigDecimal b_j = new BigDecimal(j, mContext)"];
  v64  [label="145:  final BigDecimal b_j_p_1 = new BigDecimal(j + 1, mContext)"];
  v65  [label="148:  tmp1 = c.multiply(b_two_j_p_1, mContext)"];
  v66  [label="149:  tmp1 = pc.multiply(tmp1, mContext)"];
  v67  [label="150:  tmp2 = pmc.multiply(b_j, mContext)"];
  v68  [label="152:  BigDecimal ppc = tmp1.subtract(tmp2, mContext)"];
  v69  [label="153:  ppc = ppc.divide(b_j_p_1, mContext)"];
  v70  [label="155:  pmc = pc"];
  v71  [label="156:  pc = ppc"];
  v72  [label="159:  if (!done)"];
  v73  [label="160:  if (pa.signum() * pc.signum() <= 0)"];
  v74  [label="161:  b = c"];
  v75  [label="162:  pmb = pmc"];
  v76  [label="163:  pb = pc"];
  v77  [label="endif"];
  v78  [label="165:  a = c"];
  v79  [label="166:  pma = pmc"];
  v80  [label="167:  pa = pc"];
  v81  [label="169:  c = a.add(b, mContext).multiply(oneHalf, mContext)"];
  v82  [label="endif"];
  v83  [label="172:  final BigDecimal nP = new BigDecimal(numberOfPoints, mContext)"];
  v84  [label="173:  BigDecimal tmp1 = pmc.subtract(c.multiply(pc, mContext), mContext)"];
  v85  [label="174:  tmp1 = tmp1.multiply(nP)"];
  v86  [label="175:  tmp1 = tmp1.pow(2, mContext)"];
  v87  [label="176:  BigDecimal tmp2 = c.pow(2, mContext)"];
  v88  [label="177:  tmp2 = BigDecimal.ONE.subtract(tmp2, mContext)"];
  v89  [label="178:  tmp2 = tmp2.multiply(two, mContext)"];
  v90  [label="179:  tmp2 = tmp2.divide(tmp1, mContext)"];
  v91  [label="181:  points[i] = c"];
  v92  [label="182:  weights[i] = tmp2"];
  v93  [label="184:  final int idx = numberOfPoints - i - 1"];
  v94  [label="185:  points[idx] = c.negate(mContext)"];
  v95  [label="186:  weights[idx] = tmp2"];
  v96  [label="192:  if (numberOfPoints % 2 != 0)"];
  v97  [label="193:  BigDecimal pmc = BigDecimal.ONE"];
  v98  [label="194:  int j = 1"];
  v99  [label="194:  for (j < numberOfPoints)"];
  v100  [label="194:  j += 2"];
  v101  [label="endfor"];
  v102  [label="195:  final BigDecimal b_j = new BigDecimal(j, mContext)"];
  v103  [label="196:  final BigDecimal b_j_p_1 = new BigDecimal(j + 1, mContext)"];
  v104  [label="199:  pmc = pmc.multiply(b_j, mContext)"];
  v105  [label="200:  pmc = pmc.divide(b_j_p_1, mContext)"];
  v106  [label="201:  pmc = pmc.negate(mContext)"];
  v107  [label="205:  final BigDecimal nP = new BigDecimal(numberOfPoints, mContext)"];
  v108  [label="206:  BigDecimal tmp1 = pmc.multiply(nP, mContext)"];
  v109  [label="207:  tmp1 = tmp1.pow(2, mContext)"];
  v110  [label="208:  BigDecimal tmp2 = two.divide(tmp1, mContext)"];
  v111  [label="210:  points[iMax] = BigDecimal.ZERO"];
  v112  [label="211:  weights[iMax] = tmp2"];
  v113  [label="endif"];
  v114  [label="214:  return new Pair<BigDecimal[], BigDecimal[]>(points, weights);"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v8 -> v9;
  v9 -> v10  [label="True"];
  v9 -> v11  [label="False"];
  v11 -> v12;
  v12 -> v13;
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v17;
  v17 -> v19  [label="False"];
  v17 -> v20  [label="True"];
  v20 -> v21;
  v21 -> v22;
  v22 -> v23;
  v23 -> v24;
  v24 -> v25;
  v25 -> v26;
  v26 -> v27;
  v27 -> v29  [label="False"];
  v27 -> v30  [label="True"];
  v30 -> v31;
  v31 -> v32;
  v32 -> v33;
  v33 -> v34;
  v34 -> v35;
  v35 -> v36;
  v36 -> v37;
  v37 -> v38;
  v38 -> v39;
  v39 -> v40;
  v40 -> v41;
  v41 -> v42;
  v42 -> v43;
  v43 -> v44;
  v44 -> v45;
  v45 -> v46;
  v46 -> v28;
  v28 -> v27;
  v29 -> v47;
  v47 -> v48;
  v48 -> v49;
  v49 -> v50;
  v50 -> v51;
  v51 -> v52  [label="False"];
  v51 -> v53  [label="True"];
  v53 -> v54;
  v54 -> v55;
  v55 -> v56;
  v56 -> v57;
  v57 -> v58;
  v58 -> v59;
  v59 -> v61  [label="False"];
  v59 -> v62  [label="True"];
  v62 -> v63;
  v63 -> v64;
  v64 -> v65;
  v65 -> v66;
  v66 -> v67;
  v67 -> v68;
  v68 -> v69;
  v69 -> v70;
  v70 -> v71;
  v71 -> v60;
  v60 -> v59;
  v61 -> v72;
  v72 -> v73  [label="True"];
  v73 -> v74  [label="True"];
  v74 -> v75;
  v75 -> v76;
  v76 -> v77;
  v73 -> v78  [label="False"];
  v78 -> v79;
  v79 -> v80;
  v80 -> v77;
  v77 -> v81;
  v81 -> v82;
  v72 -> v82  [label="False"];
  v82 -> v51;
  v52 -> v83;
  v83 -> v84;
  v84 -> v85;
  v85 -> v86;
  v86 -> v87;
  v87 -> v88;
  v88 -> v89;
  v89 -> v90;
  v90 -> v91;
  v91 -> v92;
  v92 -> v93;
  v93 -> v94;
  v94 -> v95;
  v95 -> v18;
  v18 -> v17;
  v19 -> v96;
  v96 -> v97  [label="True"];
  v97 -> v98;
  v98 -> v99;
  v99 -> v101  [label="False"];
  v99 -> v102  [label="True"];
  v102 -> v103;
  v103 -> v104;
  v104 -> v105;
  v105 -> v106;
  v106 -> v100;
  v100 -> v99;
  v101 -> v107;
  v107 -> v108;
  v108 -> v109;
  v109 -> v110;
  v110 -> v111;
  v111 -> v112;
  v112 -> v113;
  v96 -> v113  [label="False"];
  v113 -> v114;
  // end-of-graph
}
