digraph MidPointIntegrator_CFG {
  // graph-vertices
  v1  [label="57:  MidPointIntegrator (final double relativeAccuracy, final double absoluteAccuracy, final int minimalIterationCount, final int maximalIterationCount)"];
  v2  [label="62:  super(relativeAccuracy, absoluteAccuracy, minimalIterationCount, maximalIterationCount)"];
  v3  [label="63:  if (maximalIterationCount > MIDPOINT_MAX_ITERATIONS_COUNT)"];
  v4  [label="64:  throw new NumberIsTooLargeException(maximalIterationCount, MIDPOINT_MAX_ITERATIONS_COUNT, false)"];
  v5  [label="endif"];
  v6  [label="81:  MidPointIntegrator (final int minimalIterationCount, final int maximalIterationCount)"];
  v7  [label="84:  super(minimalIterationCount, maximalIterationCount)"];
  v8  [label="85:  if (maximalIterationCount > MIDPOINT_MAX_ITERATIONS_COUNT)"];
  v9  [label="86:  throw new NumberIsTooLargeException(maximalIterationCount, MIDPOINT_MAX_ITERATIONS_COUNT, false)"];
  v10  [label="endif"];
  v11  [label="95:  MidPointIntegrator ()"];
  v12  [label="96:  super(DEFAULT_MIN_ITERATIONS_COUNT, MIDPOINT_MAX_ITERATIONS_COUNT)"];
  v13  [label="118:  double stage(final int n,  double previousStageResult,  double min,  double diffMaxMin)"];
  v14  [label="125:  final long np = 0L << (n - 1)"];
  v15  [label="126:  double sum = 0"];
  v16  [label="129:  final double spacing = diffMaxMin / np"];
  v17  [label="132:  double x = min + 0.5 * spacing"];
  v18  [label="133:  for (  long i = 0 ; i < np ;   i++)"];
  v21  [label="endfor"];
  v22  [label="134:  sum += computeObjectiveValue(x)"];
  v23  [label="135:  x += spacing"];
  v24  [label="138:  return 0.5 * (previousStageResult + sum * spacing);"];
  v25  [label="144:  double doIntegrate()"];
  v26  [label="147:  final double min = getMin()"];
  v27  [label="148:  final double diff = getMax() - min"];
  v28  [label="149:  final double midPoint = min + 0.5 * diff"];
  v29  [label="151:  double oldt = diff * computeObjectiveValue(midPoint)"];
  v30  [label="153:  while (true)"];
  v31  [label="endwhile"];
  v32  [label="154:  iterations.incrementCount()"];
  v33  [label="155:  final int i = iterations.getCount()"];
  v34  [label="156:  final double t = stage(i, oldt, min, diff)"];
  v35  [label="157:  if (i >= getMinimalIterationCount())"];
  v36  [label="158:  final double delta = FastMath.abs(t - oldt)"];
  v37  [label="159:  final double rLimit = getRelativeAccuracy() * (FastMath.abs(oldt) + FastMath.abs(t)) * 0.5"];
  v38  [label="161:  if ((delta <= rLimit) || (delta <= getAbsoluteAccuracy()))"];
  v39  [label="162:  return t;"];
  v40  [label="endif"];
  v41  [label="endif"];
  v42  [label="165:  oldt = t"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4  [label="True"];
  v3 -> v5  [label="False"];
  v6 -> v7;
  v7 -> v8;
  v8 -> v9  [label="True"];
  v8 -> v10  [label="False"];
  v11 -> v12;
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v17;
  v17 -> v18;
  v18 -> v21  [label="False"];
  v18 -> v22  [label="True"];
  v22 -> v23;
  v23 -> v18;
  v21 -> v24;
  v25 -> v26;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v31  [label="False"];
  v30 -> v32  [label="True"];
  v32 -> v33;
  v33 -> v34;
  v34 -> v35;
  v35 -> v36  [label="True"];
  v36 -> v37;
  v37 -> v38;
  v38 -> v39  [label="True"];
  v38 -> v40  [label="False"];
  v40 -> v41;
  v35 -> v41  [label="False"];
  v41 -> v42;
  v42 -> v30;
  // end-of-graph
}
