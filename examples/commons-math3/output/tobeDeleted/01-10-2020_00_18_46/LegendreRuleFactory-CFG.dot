digraph LegendreRuleFactory_CFG {
  // graph-vertices
  v1  [label="36:  Pair<Double[],Double[]> computeRule(int numberOfPoints)"];
  v2  [label="39:  if (numberOfPoints == 1)"];
  v3  [label="41:  return new Pair<Double[], Double[]>(new Double[] { 0d }, new Double[] { 2d });"];
  v4  [label="endif"];
  v5  [label="48:  final Double[] previousPoints = getRuleInternal(numberOfPoints - 1).getFirst()"];
  v6  [label="51:  final Double[] points = new Double[numberOfPoints]"];
  v7  [label="52:  final Double[] weights = new Double[numberOfPoints]"];
  v8  [label="55:  final int iMax = numberOfPoints / 2"];
  v9  [label="56:  int i = 0"];
  v10  [label="56:  for (i < iMax)"];
  v11  [label="56:  i++"];
  v12  [label="endfor"];
  v13  [label="58:  double a = (i == 0) ? -1 : previousPoints[i - 1].doubleValue()"];
  v14  [label="60:  double b = (iMax == 1) ? 1 : previousPoints[i].doubleValue()"];
  v15  [label="62:  double pma = 1"];
  v16  [label="64:  double pa = a"];
  v17  [label="66:  double pmb = 1"];
  v18  [label="68:  double pb = b"];
  v19  [label="69:  int j = 1"];
  v20  [label="69:  for (j < numberOfPoints)"];
  v21  [label="69:  j++"];
  v22  [label="endfor"];
  v23  [label="70:  final int two_j_p_1 = 2 * j + 1"];
  v24  [label="71:  final int j_p_1 = j + 1"];
  v25  [label="73:  final double ppa = (two_j_p_1 * a * pa - j * pma) / j_p_1"];
  v26  [label="75:  final double ppb = (two_j_p_1 * b * pb - j * pmb) / j_p_1"];
  v27  [label="76:  pma = pa"];
  v28  [label="77:  pa = ppa"];
  v29  [label="78:  pmb = pb"];
  v30  [label="79:  pb = ppb"];
  v31  [label="83:  double c = 0.5 * (a + b)"];
  v32  [label="85:  double pmc = 1"];
  v33  [label="87:  double pc = c"];
  v34  [label="88:  boolean done = false"];
  v35  [label="89:  while (!done)"];
  v36  [label="endwhile"];
  v37  [label="90:  done = b - a <= Math.ulp(c)"];
  v38  [label="91:  pmc = 1"];
  v39  [label="92:  pc = c"];
  v40  [label="93:  int j = 1"];
  v41  [label="93:  for (j < numberOfPoints)"];
  v42  [label="93:  j++"];
  v43  [label="endfor"];
  v44  [label="95:  final double ppc = ((2 * j + 1) * c * pc - j * pmc) / (j + 1)"];
  v45  [label="96:  pmc = pc"];
  v46  [label="97:  pc = ppc"];
  v47  [label="100:  if (!done)"];
  v48  [label="101:  if (pa * pc <= 0)"];
  v49  [label="102:  b = c"];
  v50  [label="103:  pmb = pmc"];
  v51  [label="104:  pb = pc"];
  v52  [label="endif"];
  v53  [label="106:  a = c"];
  v54  [label="107:  pma = pmc"];
  v55  [label="108:  pa = pc"];
  v56  [label="110:  c = 0.5 * (a + b)"];
  v57  [label="endif"];
  v58  [label="113:  final double d = numberOfPoints * (pmc - c * pc)"];
  v59  [label="114:  final double w = 2 * (1 - c * c) / (d * d)"];
  v60  [label="116:  points[i] = c"];
  v61  [label="117:  weights[i] = w"];
  v62  [label="119:  final int idx = numberOfPoints - i - 1"];
  v63  [label="120:  points[idx] = -c"];
  v64  [label="121:  weights[idx] = w"];
  v65  [label="127:  if (numberOfPoints % 2 != 0)"];
  v66  [label="128:  double pmc = 1"];
  v67  [label="129:  int j = 1"];
  v68  [label="129:  for (j < numberOfPoints)"];
  v69  [label="129:  j += 2"];
  v70  [label="endfor"];
  v71  [label="130:  pmc = -j * pmc / (j + 1)"];
  v72  [label="132:  final double d = numberOfPoints * pmc"];
  v73  [label="133:  final double w = 2 / (d * d)"];
  v74  [label="135:  points[iMax] = 0d"];
  v75  [label="136:  weights[iMax] = w"];
  v76  [label="endif"];
  v77  [label="139:  return new Pair<Double[], Double[]>(points, weights);"];
  // graph-edges
  v1 -> v2;
  v2 -> v3  [label="True"];
  v2 -> v4  [label="False"];
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8;
  v8 -> v9;
  v9 -> v10;
  v10 -> v12  [label="False"];
  v10 -> v13  [label="True"];
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v17;
  v17 -> v18;
  v18 -> v19;
  v19 -> v20;
  v20 -> v22  [label="False"];
  v20 -> v23  [label="True"];
  v23 -> v24;
  v24 -> v25;
  v25 -> v26;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v21;
  v21 -> v20;
  v22 -> v31;
  v31 -> v32;
  v32 -> v33;
  v33 -> v34;
  v34 -> v35;
  v35 -> v36  [label="False"];
  v35 -> v37  [label="True"];
  v37 -> v38;
  v38 -> v39;
  v39 -> v40;
  v40 -> v41;
  v41 -> v43  [label="False"];
  v41 -> v44  [label="True"];
  v44 -> v45;
  v45 -> v46;
  v46 -> v42;
  v42 -> v41;
  v43 -> v47;
  v47 -> v48  [label="True"];
  v48 -> v49  [label="True"];
  v49 -> v50;
  v50 -> v51;
  v51 -> v52;
  v48 -> v53  [label="False"];
  v53 -> v54;
  v54 -> v55;
  v55 -> v52;
  v52 -> v56;
  v56 -> v57;
  v47 -> v57  [label="False"];
  v57 -> v35;
  v36 -> v58;
  v58 -> v59;
  v59 -> v60;
  v60 -> v61;
  v61 -> v62;
  v62 -> v63;
  v63 -> v64;
  v64 -> v11;
  v11 -> v10;
  v12 -> v65;
  v65 -> v66  [label="True"];
  v66 -> v67;
  v67 -> v68;
  v68 -> v70  [label="False"];
  v68 -> v71  [label="True"];
  v71 -> v69;
  v69 -> v68;
  v70 -> v72;
  v72 -> v73;
  v73 -> v74;
  v74 -> v75;
  v75 -> v76;
  v65 -> v76  [label="False"];
  v76 -> v77;
  // end-of-graph
}
