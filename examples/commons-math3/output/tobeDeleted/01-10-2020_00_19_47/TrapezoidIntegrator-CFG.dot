digraph TrapezoidIntegrator_CFG {
  // graph-vertices
  v1  [label="60:  TrapezoidIntegrator (final double relativeAccuracy,  final double absoluteAccuracy,  final int minimalIterationCount,  final int maximalIterationCount)"];
  v2  [label="65:  super(relativeAccuracy, absoluteAccuracy, minimalIterationCount, maximalIterationCount)"];
  v3  [label="66:  if (maximalIterationCount > TRAPEZOID_MAX_ITERATIONS_COUNT)"];
  v4  [label="67:  throw new NumberIsTooLargeException(maximalIterationCount, TRAPEZOID_MAX_ITERATIONS_COUNT, false)"];
  v5  [label="endif"];
  v6  [label="84:  TrapezoidIntegrator (final int minimalIterationCount,  final int maximalIterationCount)"];
  v7  [label="87:  super(minimalIterationCount, maximalIterationCount)"];
  v8  [label="88:  if (maximalIterationCount > TRAPEZOID_MAX_ITERATIONS_COUNT)"];
  v9  [label="89:  throw new NumberIsTooLargeException(maximalIterationCount, TRAPEZOID_MAX_ITERATIONS_COUNT, false)"];
  v10  [label="endif"];
  v11  [label="98:  TrapezoidIntegrator ()"];
  v12  [label="99:  super(DEFAULT_MIN_ITERATIONS_COUNT, TRAPEZOID_MAX_ITERATIONS_COUNT)"];
  v13  [label="117:  double stage(final BaseAbstractUnivariateIntegrator baseIntegrator, final int n)"];
  v14  [label="120:  if (n == 0)"];
  v15  [label="121:  final double max = baseIntegrator.getMax()"];
  v16  [label="122:  final double min = baseIntegrator.getMin()"];
  v17  [label="123:  s = 0.5 * (max - min) * (baseIntegrator.computeObjectiveValue(min) +  baseIntegrator.computeObjectiveValue(max))"];
  v18  [label="126:  return s;"];
  v19  [label="endif"];
  v20  [label="128:  final long np = 1L << (n-1)"];
  v21  [label="129:  double sum = 0"];
  v22  [label="130:  final double max = baseIntegrator.getMax()"];
  v23  [label="131:  final double min = baseIntegrator.getMin()"];
  v24  [label="133:  final double spacing = (max - min) / np"];
  v25  [label="134:  double x = min + 0.5 * spacing"];
  v26  [label="135:  for (  long i = 0 ; i < np ;   i++)"];
  v29  [label="endfor"];
  v30  [label="136:  sum += baseIntegrator.computeObjectiveValue(x)"];
  v31  [label="137:  x += spacing"];
  v32  [label="140:  s = 0.5 * (s + sum * spacing)"];
  v33  [label="141:  return s;"];
  v34  [label="147:  double doIntegrate()"];
  v35  [label="150:  double oldt = stage(this, 0)"];
  v36  [label="151:  iterations.incrementCount()"];
  v37  [label="152:  while (true)"];
  v38  [label="endwhile"];
  v39  [label="153:  final int i = iterations.getCount()"];
  v40  [label="154:  final double t = stage(this, i)"];
  v41  [label="155:  if (i >= getMinimalIterationCount())"];
  v42  [label="156:  final double delta = FastMath.abs(t - oldt)"];
  v43  [label="157:  final double rLimit = getRelativeAccuracy() * (FastMath.abs(oldt) + FastMath.abs(t)) * 0.5"];
  v44  [label="159:  if ((delta <= rLimit) || (delta <= getAbsoluteAccuracy()))"];
  v45  [label="160:  return t;"];
  v46  [label="endif"];
  v47  [label="endif"];
  v48  [label="163:  oldt = t"];
  v49  [label="164:  iterations.incrementCount()"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v4  [label="True"];
  v3 -> v5  [label="False"];
  v6 -> v7;
  v7 -> v8;
  v8 -> v9  [label="True"];
  v8 -> v10  [label="False"];
  v11 -> v12;
  v13 -> v14;
  v14 -> v15  [label="True"];
  v15 -> v16;
  v16 -> v17;
  v17 -> v18;
  v14 -> v20  [label="False"];
  v20 -> v21;
  v21 -> v22;
  v22 -> v23;
  v23 -> v24;
  v24 -> v25;
  v25 -> v26;
  v26 -> v29  [label="False"];
  v26 -> v30  [label="True"];
  v30 -> v31;
  v31 -> v26;
  v29 -> v32;
  v32 -> v33;
  v34 -> v35;
  v35 -> v36;
  v36 -> v37;
  v37 -> v38  [label="False"];
  v37 -> v39  [label="True"];
  v39 -> v40;
  v40 -> v41;
  v41 -> v42  [label="True"];
  v42 -> v43;
  v43 -> v44;
  v44 -> v45  [label="True"];
  v44 -> v46  [label="False"];
  v46 -> v47;
  v41 -> v47  [label="False"];
  v47 -> v48;
  v48 -> v49;
  v49 -> v37;
  // end-of-graph
}
