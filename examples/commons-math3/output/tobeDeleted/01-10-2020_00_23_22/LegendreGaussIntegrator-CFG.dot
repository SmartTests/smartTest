digraph LegendreGaussIntegrator_CFG {
  // graph-vertices
  v1  [label="137:  LegendreGaussIntegrator (final int n,  final double relativeAccuracy,  final double absoluteAccuracy,  final int minimalIterationCount,  final int maximalIterationCount)"];
  v2  [label="143:  super(relativeAccuracy, absoluteAccuracy, minimalIterationCount, maximalIterationCount)"];
  v3  [label="144:  switch (n)"];
  v4  [label="end-switch"];
  v5  [label="145:  case 2 :"];
  v6  [label="146:  abscissas = ABSCISSAS_2"];
  v7  [label="147:  weights = WEIGHTS_2"];
  v8  [label="148:  break;"];
  v9  [label="149:  case 3 :"];
  v10  [label="150:  abscissas = ABSCISSAS_3"];
  v11  [label="151:  weights = WEIGHTS_3"];
  v12  [label="152:  break;"];
  v13  [label="153:  case 4 :"];
  v14  [label="154:  abscissas = ABSCISSAS_4"];
  v15  [label="155:  weights = WEIGHTS_4"];
  v16  [label="156:  break;"];
  v17  [label="157:  case 5 :"];
  v18  [label="158:  abscissas = ABSCISSAS_5"];
  v19  [label="159:  weights = WEIGHTS_5"];
  v20  [label="160:  break;"];
  v21  [label="161:  default :"];
  v22  [label="162:  throw new MathIllegalArgumentException( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED, n, 2, 5)"];
  v23  [label="176:  LegendreGaussIntegrator (final int n,  final double relativeAccuracy,  final double absoluteAccuracy)"];
  v24  [label="180:  this(n, relativeAccuracy, absoluteAccuracy,  DEFAULT_MIN_ITERATIONS_COUNT, DEFAULT_MAX_ITERATIONS_COUNT)"];
  v25  [label="195:  LegendreGaussIntegrator (final int n,  final int minimalIterationCount,  final int maximalIterationCount)"];
  v26  [label="199:  this(n, DEFAULT_RELATIVE_ACCURACY, DEFAULT_ABSOLUTE_ACCURACY,  minimalIterationCount, maximalIterationCount)"];
  v27  [label="205:  double doIntegrate()"];
  v28  [label="209:  double oldt = stage(1)"];
  v29  [label="211:  int n = 2"];
  v30  [label="212:  while (true)"];
  v31  [label="endwhile"];
  v32  [label="215:  final double t = stage(n)"];
  v33  [label="218:  final double delta = FastMath.abs(t - oldt)"];
  v34  [label="219:  final double limit = FastMath.max(getAbsoluteAccuracy(),  getRelativeAccuracy() * (FastMath.abs(oldt) + FastMath.abs(t)) * 0.5)"];
  v35  [label="224:  if ((iterations.getCount() + 1 >= getMinimalIterationCount()) && (delta <= limit))"];
  v36  [label="225:  return t;"];
  v37  [label="endif"];
  v38  [label="229:  double ratio = FastMath.min(4, FastMath.pow(delta / limit, 0.5 / abscissas.length))"];
  v39  [label="230:  n = FastMath.max((int) (ratio * n), n + 1)"];
  v40  [label="231:  oldt = t"];
  v41  [label="232:  iterations.incrementCount()"];
  v42  [label="245:  double stage(final int n)"];
  v43  [label="249:  final double step = (getMax() - getMin()) / n"];
  v44  [label="250:  final double halfStep = step / 2.0"];
  v45  [label="253:  double midPoint = getMin() + halfStep"];
  v46  [label="254:  double sum = 0.0"];
  v47  [label="255:  for (  int i = 0 ; i < n ;   ++i)"];
  v50  [label="endfor"];
  v51  [label="256:  for (  int j = 0 ; j < abscissas.length ;   ++j)"];
  v54  [label="endfor"];
  v55  [label="257:  sum += weights[j] * computeObjectiveValue(midPoint + halfStep * abscissas[j])"];
  v56  [label="259:  midPoint += step"];
  v57  [label="262:  return halfStep * sum;"];
  // graph-edges
  v1 -> v2;
  v2 -> v3;
  v3 -> v5;
  v5 -> v6  [label="True"];
  v6 -> v7;
  v7 -> v8;
  v8 -> v4;
  v5 -> v9  [label="False"];
  v9 -> v10  [label="True"];
  v10 -> v11;
  v11 -> v12;
  v12 -> v4;
  v9 -> v13  [label="False"];
  v13 -> v14  [label="True"];
  v14 -> v15;
  v15 -> v16;
  v16 -> v4;
  v13 -> v17  [label="False"];
  v17 -> v18  [label="True"];
  v18 -> v19;
  v19 -> v20;
  v20 -> v4;
  v17 -> v21  [label="False"];
  v21 -> v22;
  v23 -> v24;
  v25 -> v26;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v31  [label="False"];
  v30 -> v32  [label="True"];
  v32 -> v33;
  v33 -> v34;
  v34 -> v35;
  v35 -> v36  [label="True"];
  v35 -> v37  [label="False"];
  v37 -> v38;
  v38 -> v39;
  v39 -> v40;
  v40 -> v41;
  v41 -> v30;
  v42 -> v43;
  v43 -> v44;
  v44 -> v45;
  v45 -> v46;
  v46 -> v47;
  v47 -> v50  [label="False"];
  v47 -> v51  [label="True"];
  v51 -> v54  [label="False"];
  v51 -> v55  [label="True"];
  v55 -> v51;
  v54 -> v56;
  v56 -> v47;
  v50 -> v57;
  // end-of-graph
}
